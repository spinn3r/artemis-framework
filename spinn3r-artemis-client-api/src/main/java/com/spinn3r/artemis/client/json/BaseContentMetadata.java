package com.spinn3r.artemis.client.json;

import javax.annotation.Generated;
import javax.xml.bind.DataBindingException;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;

import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonToken;

import java.nio.charset.Charset;
import java.nio.ByteBuffer;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;

import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.spinn3r.artemis.util.io.FastByteArrayOutputStream;
import com.spinn3r.artemis.util.io.utf8.*;

import com.spinn3r.artemis.schema.core.JSON;

import com.spinn3r.artemis.json.Msg;
import com.spinn3r.artemis.schema.core.ByteArray;
import com.spinn3r.artemis.schema.core.BlobSet;
import com.spinn3r.artemis.schema.core.NoNullSet;
import com.spinn3r.artemis.schema.core.NoNullMap;
import com.spinn3r.artemis.schema.core.ObjectMapperFactory;
import com.spinn3r.artemis.schema.core.ISO8601;
import com.spinn3r.artemis.schema.core.ByteBufferInputStreams;

/**
 * <p>
 * High level extract fields parsed using semantic markup  and other techniques. These fields are populated by  multiple algorithms executing over the same HTML which  attempt to pick the best value from all alternatives.
 * </p>
 *
 *
 *
 * <p>
 * THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
 * </p>
 */
@JsonIgnoreProperties(ignoreUnknown=true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@Generated(value="generated")
@SuppressWarnings("unusedImports")
public abstract class BaseContentMetadata
    implements Msg

    {

    private static final Charset UTF_8 = Charset.forName("UTF-8");

    private static TimeZone UTC = TimeZone.getTimeZone("UTC");

    public static final boolean UNDERSCORE = false;

    // JsonFactory: all JsonParser and JsonGenerator instances used for
    // Streaming API and Data Binding are constructed by JsonFactory. And
    // heavy-weight objects like symbol tables are reused by these factories. As
    // such it is beneficial to reuse these factories. (NOTE: ObjectMapper's
    // hold their own references to JsonFactory instances)

    private static final JsonFactory JSON_FACTORY = new JsonFactory();

    private static final ObjectMapper MAPPER = ObjectMapperFactory.newObjectMapper( UNDERSCORE );

    public enum MainFormat {

        /**
         * HTML form of the content.  This is the default for the vast majority of the content we index.
         */
        HTML( 0 ) ,

        /**
         * The content is formatted as plain text.  Which is primarily used for Twitter and other microblogging services.
         */
        TEXT( 1 ) ,

        ;

        MainFormat( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static MainFormat fromValue( int value ) {

            switch( value ) {

                case 0:
                    return HTML;

                case 1:
                    return TEXT;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static MainFormat fromValue( String value ) {

            switch( value ) {

                case "HTML":
                    return HTML;

                case "TEXT":
                    return TEXT;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum AuthorGender {

        /**
         * Male
         */
        MALE( 0 ) ,

        /**
         * Female
         */
        FEMALE( 1 ) ,

        /**
         * Unknown
         */
        UNKNOWN( 2 ) ,

        ;

        AuthorGender( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static AuthorGender fromValue( int value ) {

            switch( value ) {

                case 0:
                    return MALE;

                case 1:
                    return FEMALE;

                case 2:
                    return UNKNOWN;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static AuthorGender fromValue( String value ) {

            switch( value ) {

                case "MALE":
                    return MALE;

                case "FEMALE":
                    return FEMALE;

                case "UNKNOWN":
                    return UNKNOWN;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum Card {

        /**
         * Basic summary of the content.
         */
        SUMMARY( 0 ) ,

        /**
         * Basic summary of the content using a large image
         */
        SUMMARY_LARGE_IMAGE( 1 ) ,

        /**
         * The content is a photo
         */
        PHOTO( 2 ) ,

        /**
         * The content is a photo gallery with multiple images
         */
        GALLERY( 3 ) ,

        /**
         * The content is an embedded video player
         */
        PLAYER( 4 ) ,

        ;

        Card( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static Card fromValue( int value ) {

            switch( value ) {

                case 0:
                    return SUMMARY;

                case 1:
                    return SUMMARY_LARGE_IMAGE;

                case 2:
                    return PHOTO;

                case 3:
                    return GALLERY;

                case 4:
                    return PLAYER;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static Card fromValue( String value ) {

            switch( value ) {

                case "SUMMARY":
                    return SUMMARY;

                case "SUMMARY_LARGE_IMAGE":
                    return SUMMARY_LARGE_IMAGE;

                case "PHOTO":
                    return PHOTO;

                case "GALLERY":
                    return GALLERY;

                case "PLAYER":
                    return PLAYER;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum Type {

        /**
         * A blog post, mainstream news article, tweet, etc.
         */
        POST( 0 ) ,

        /**
         * A reply to a post inline, usually by members of the community.
         */
        COMMENT( 1 ) ,

        ;

        Type( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static Type fromValue( int value ) {

            switch( value ) {

                case 0:
                    return POST;

                case 1:
                    return COMMENT;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static Type fromValue( String value ) {

            switch( value ) {

                case "POST":
                    return POST;

                case "COMMENT":
                    return COMMENT;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum Sentiment {

        /**
         * Positive sentiment
         */
        POSITIVE( 0 ) ,

        /**
         * Negative sentiment
         */
        NEGATIVE( 1 ) ,

        /**
         * Neutral sentiment (neither positive nor negative)
         */
        NEUTRAL( 2 ) ,

        ;

        Sentiment( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static Sentiment fromValue( int value ) {

            switch( value ) {

                case 0:
                    return POSITIVE;

                case 1:
                    return NEGATIVE;

                case 2:
                    return NEUTRAL;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static Sentiment fromValue( String value ) {

            switch( value ) {

                case "POSITIVE":
                    return POSITIVE;

                case "NEGATIVE":
                    return NEGATIVE;

                case "NEUTRAL":
                    return NEUTRAL;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    // true when we've manually created this object by call
    protected boolean constructed = false;

    public BaseContentMetadata() {
        this.constructed = true;
    }

    // **** members for this POJO

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPermalink = 0;

    public int hasModifiedPermalink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPermalink = false;

    protected String permalink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPermalinkRedirect = 0;

    public int hasModifiedPermalinkRedirect = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPermalinkRedirect = false;

    protected String permalinkRedirect;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPermalinkRedirectDomain = 0;

    public int hasModifiedPermalinkRedirectDomain = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPermalinkRedirectDomain = false;

    protected String permalinkRedirectDomain;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPermalinkRedirectSite = 0;

    public int hasModifiedPermalinkRedirectSite = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPermalinkRedirectSite = false;

    protected String permalinkRedirectSite;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLink = 0;

    public int hasModifiedLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLink = false;

    protected String link;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLinkDomain = 0;

    public int hasModifiedLinkDomain = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLinkDomain = false;

    protected String linkDomain;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLinkSite = 0;

    public int hasModifiedLinkSite = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLinkSite = false;

    protected String linkSite;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasShortlink = 0;

    public int hasModifiedShortlink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedShortlink = false;

    protected String shortlink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasCanonical = 0;

    public int hasModifiedCanonical = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedCanonical = false;

    protected String canonical;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDomain = 0;

    public int hasModifiedDomain = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDomain = false;

    protected String domain;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSite = 0;

    public int hasModifiedSite = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSite = false;

    protected String site;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMain = 0;

    public int hasModifiedMain = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMain = false;

    protected String main;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMainLength = 0;

    public int hasModifiedMainLength = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMainLength = false;

    protected int mainLength;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMainChecksum = 0;

    public int hasModifiedMainChecksum = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMainChecksum = false;

    protected String mainChecksum;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMainAuthoritative = 0;

    public int hasModifiedMainAuthoritative = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMainAuthoritative = false;

    protected boolean mainAuthoritative;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMainFormat = 0;

    public int hasModifiedMainFormat = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMainFormat = false;

    protected MainFormat mainFormat;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasExtract = 0;

    public int hasModifiedExtract = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedExtract = false;

    protected String extract;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasExtractLength = 0;

    public int hasModifiedExtractLength = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedExtractLength = false;

    protected int extractLength;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasExtractChecksum = 0;

    public int hasModifiedExtractChecksum = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedExtractChecksum = false;

    protected String extractChecksum;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSummaryText = 0;

    public int hasModifiedSummaryText = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSummaryText = false;

    protected String summaryText;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasTitle = 0;

    public int hasModifiedTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedTitle = false;

    protected String title;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPublisher = 0;

    public int hasModifiedPublisher = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPublisher = false;

    protected String publisher;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSection = 0;

    public int hasModifiedSection = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSection = false;

    protected String section;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDescription = 0;

    public int hasModifiedDescription = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDescription = false;

    protected String description;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasTags = 0;

    public int hasModifiedTags = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedTags = false;

    protected Set<String> tags;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMentions = 0;

    public int hasModifiedMentions = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMentions = false;

    protected Set<String> mentions;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLinks = 0;

    public int hasModifiedLinks = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLinks = false;

    protected Set<String> links;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPublished = 0;

    public int hasModifiedPublished = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPublished = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC")

    protected Date published;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasModified = 0;

    public int hasModifiedModified = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedModified = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC")

    protected Date modified;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPublishedPartial = 0;

    public int hasModifiedPublishedPartial = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPublishedPartial = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC")

    protected Date publishedPartial;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasModifiedPartial = 0;

    public int hasModifiedModifiedPartial = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedModifiedPartial = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC")

    protected Date modifiedPartial;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorName = 0;

    public int hasModifiedAuthorName = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorName = false;

    protected String authorName;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorLink = 0;

    public int hasModifiedAuthorLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorLink = false;

    protected String authorLink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorHandle = 0;

    public int hasModifiedAuthorHandle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorHandle = false;

    protected String authorHandle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorFollowers = 0;

    public int hasModifiedAuthorFollowers = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorFollowers = false;

    protected int authorFollowers;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorLocation = 0;

    public int hasModifiedAuthorLocation = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorLocation = false;

    protected String authorLocation;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorAvatarImg = 0;

    public int hasModifiedAuthorAvatarImg = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorAvatarImg = false;

    protected String authorAvatarImg;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorAvatarWidth = 0;

    public int hasModifiedAuthorAvatarWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorAvatarWidth = false;

    protected int authorAvatarWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorAvatarHeight = 0;

    public int hasModifiedAuthorAvatarHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorAvatarHeight = false;

    protected int authorAvatarHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorTwitterHandle = 0;

    public int hasModifiedAuthorTwitterHandle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorTwitterHandle = false;

    protected String authorTwitterHandle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorTwitterUserid = 0;

    public int hasModifiedAuthorTwitterUserid = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorTwitterUserid = false;

    protected String authorTwitterUserid;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorUserId = 0;

    public int hasModifiedAuthorUserId = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorUserId = false;

    protected String authorUserId;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorGender = 0;

    public int hasModifiedAuthorGender = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorGender = false;

    protected AuthorGender authorGender;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoLocation = 0;

    public int hasModifiedGeoLocation = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoLocation = false;

    protected String geoLocation;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoLocationId = 0;

    public int hasModifiedGeoLocationId = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoLocationId = false;

    protected String geoLocationId;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoFeaturename = 0;

    public int hasModifiedGeoFeaturename = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoFeaturename = false;

    protected String geoFeaturename;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoPoint = 0;

    public int hasModifiedGeoPoint = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoPoint = false;

    protected String geoPoint;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoBox = 0;

    public int hasModifiedGeoBox = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoBox = false;

    protected String geoBox;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoNameId = 0;

    public int hasModifiedGeoNameId = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoNameId = false;

    protected String geoNameId;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoName = 0;

    public int hasModifiedGeoName = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoName = false;

    protected String geoName;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoCountry = 0;

    public int hasModifiedGeoCountry = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoCountry = false;

    protected String geoCountry;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoState = 0;

    public int hasModifiedGeoState = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoState = false;

    protected String geoState;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoCity = 0;

    public int hasModifiedGeoCity = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoCity = false;

    protected String geoCity;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasRatingValue = 0;

    public int hasModifiedRatingValue = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedRatingValue = false;

    protected String ratingValue;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasFaviconSrc = 0;

    public int hasModifiedFaviconSrc = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedFaviconSrc = false;

    protected String faviconSrc;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasFaviconWidth = 0;

    public int hasModifiedFaviconWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedFaviconWidth = false;

    protected int faviconWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasFaviconHeight = 0;

    public int hasModifiedFaviconHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedFaviconHeight = false;

    protected int faviconHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasImageSrc = 0;

    public int hasModifiedImageSrc = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedImageSrc = false;

    protected String imageSrc;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasImageWidth = 0;

    public int hasModifiedImageWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedImageWidth = false;

    protected int imageWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasImageHeight = 0;

    public int hasModifiedImageHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedImageHeight = false;

    protected int imageHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasShared = 0;

    public int hasModifiedShared = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedShared = false;

    protected boolean shared;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedProfileLink = 0;

    public int hasModifiedSharedProfileLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedProfileLink = false;

    protected String sharedProfileLink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedProfileTitle = 0;

    public int hasModifiedSharedProfileTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedProfileTitle = false;

    protected String sharedProfileTitle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasReplied = 0;

    public int hasModifiedReplied = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedReplied = false;

    protected boolean replied;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasRepliedProfileLink = 0;

    public int hasModifiedRepliedProfileLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedRepliedProfileLink = false;

    protected String repliedProfileLink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasRepliedProfileTitle = 0;

    public int hasModifiedRepliedProfileTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedRepliedProfileTitle = false;

    protected String repliedProfileTitle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasCard = 0;

    public int hasModifiedCard = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedCard = false;

    protected Card card;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasVideoPlayer = 0;

    public int hasModifiedVideoPlayer = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedVideoPlayer = false;

    protected String videoPlayer;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasVideoPlayerWidth = 0;

    public int hasModifiedVideoPlayerWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedVideoPlayerWidth = false;

    protected int videoPlayerWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasVideoPlayerHeight = 0;

    public int hasModifiedVideoPlayerHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedVideoPlayerHeight = false;

    protected int videoPlayerHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasType = 0;

    public int hasModifiedType = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedType = false;

    protected Type type;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSentiment = 0;

    public int hasModifiedSentiment = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSentiment = false;

    protected Sentiment sentiment;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLang = 0;

    public int hasModifiedLang = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLang = false;

    protected String lang;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasCategories = 0;

    public int hasModifiedCategories = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedCategories = false;

    protected Map<String,Double> categories;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDuplicates = 0;

    public int hasModifiedDuplicates = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDuplicates = false;

    protected Map<Long,Double> duplicates;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDuplicatesCount = 0;

    public int hasModifiedDuplicatesCount = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDuplicatesCount = false;

    protected int duplicatesCount;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasClassifications = 0;

    public int hasModifiedClassifications = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedClassifications = false;

    protected Map<String,Double> classifications;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentHashcode = 0;

    public int hasModifiedParentHashcode = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentHashcode = false;

    protected String parentHashcode;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentPermalink = 0;

    public int hasModifiedParentPermalink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentPermalink = false;

    protected String parentPermalink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentTitle = 0;

    public int hasModifiedParentTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentTitle = false;

    protected String parentTitle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentLang = 0;

    public int hasModifiedParentLang = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentLang = false;

    protected String parentLang;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentResource = 0;

    public int hasModifiedParentResource = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentResource = false;

    protected String parentResource;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLikes = 0;

    public int hasModifiedLikes = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLikes = false;

    protected int likes;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDislikes = 0;

    public int hasModifiedDislikes = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDislikes = false;

    protected int dislikes;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasComments = 0;

    public int hasModifiedComments = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedComments = false;

    protected int comments;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasViews = 0;

    public int hasModifiedViews = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedViews = false;

    protected int views;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMetadataScore = 0;

    public int hasModifiedMetadataScore = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMetadataScore = false;

    protected int metadataScore;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasShares = 0;

    public int hasModifiedShares = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedShares = false;

    protected int shares;

    // **** methods for this POJO

    public BaseContentMetadata setPermalink ( String permalink ) {

        ++this.hasPermalink;
        ++this.hasModifiedPermalink;

        this.permalink = permalink;

        hasDefinedPermalink = true;

        return this;

    }

    /**
     * <p>
     * The unique URL to the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink
     * </p>
     */
    public String getPermalink() {

        if ( this.constructed == false && this.hasPermalink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.permalink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.permalink;
    }

    /**
     * <p>
     * The unique URL to the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink
     * </p>
     */
    public Optional<String> getPermalinkAsOptional() {

        if ( this.constructed == false && this.hasPermalink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.permalink );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The unique URL to the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink
     * </p>
     */
    public String getPermalink ( String _default ) {

        if ( ! hasPermalink() ) {
            return _default;
        }

        return getPermalink();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPermalink () {
        return this.hasPermalink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPermalink () {
        this.hasPermalink = 0;
        this.hasModifiedPermalink = 0;
        this.hasDefinedPermalink = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPermalink () {
        return this.hasModifiedPermalink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPermalink () {
        return this.hasDefinedPermalink;
    }

    public BaseContentMetadata setPermalinkRedirect ( String permalinkRedirect ) {

        ++this.hasPermalinkRedirect;
        ++this.hasModifiedPermalinkRedirect;

        this.permalinkRedirect = permalinkRedirect;

        hasDefinedPermalinkRedirect = true;

        return this;

    }

    /**
     * <p>
     * Same as permalink but if the site performs a 301 or 302 redirect this is the URL we were redirected to.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect
     * </p>
     */
    public String getPermalinkRedirect() {

        if ( this.constructed == false && this.hasPermalinkRedirect == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.permalinkRedirect" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.permalinkRedirect;
    }

    /**
     * <p>
     * Same as permalink but if the site performs a 301 or 302 redirect this is the URL we were redirected to.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect
     * </p>
     */
    public Optional<String> getPermalinkRedirectAsOptional() {

        if ( this.constructed == false && this.hasPermalinkRedirect == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.permalinkRedirect );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Same as permalink but if the site performs a 301 or 302 redirect this is the URL we were redirected to.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect
     * </p>
     */
    public String getPermalinkRedirect ( String _default ) {

        if ( ! hasPermalinkRedirect() ) {
            return _default;
        }

        return getPermalinkRedirect();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPermalinkRedirect () {
        return this.hasPermalinkRedirect > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPermalinkRedirect () {
        this.hasPermalinkRedirect = 0;
        this.hasModifiedPermalinkRedirect = 0;
        this.hasDefinedPermalinkRedirect = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPermalinkRedirect () {
        return this.hasModifiedPermalinkRedirect > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPermalinkRedirect () {
        return this.hasDefinedPermalinkRedirect;
    }

    public BaseContentMetadata setPermalinkRedirectDomain ( String permalinkRedirectDomain ) {

        ++this.hasPermalinkRedirectDomain;
        ++this.hasModifiedPermalinkRedirectDomain;

        this.permalinkRedirectDomain = permalinkRedirectDomain;

        hasDefinedPermalinkRedirectDomain = true;

        return this;

    }

    /**
     * <p>
     * The domain for the permalink_redirect. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_domain
     * </p>
     */
    public String getPermalinkRedirectDomain() {

        if ( this.constructed == false && this.hasPermalinkRedirectDomain == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.permalinkRedirectDomain" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.permalinkRedirectDomain;
    }

    /**
     * <p>
     * The domain for the permalink_redirect. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_domain
     * </p>
     */
    public Optional<String> getPermalinkRedirectDomainAsOptional() {

        if ( this.constructed == false && this.hasPermalinkRedirectDomain == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.permalinkRedirectDomain );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The domain for the permalink_redirect. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_domain
     * </p>
     */
    public String getPermalinkRedirectDomain ( String _default ) {

        if ( ! hasPermalinkRedirectDomain() ) {
            return _default;
        }

        return getPermalinkRedirectDomain();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPermalinkRedirectDomain () {
        return this.hasPermalinkRedirectDomain > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPermalinkRedirectDomain () {
        this.hasPermalinkRedirectDomain = 0;
        this.hasModifiedPermalinkRedirectDomain = 0;
        this.hasDefinedPermalinkRedirectDomain = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPermalinkRedirectDomain () {
        return this.hasModifiedPermalinkRedirectDomain > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPermalinkRedirectDomain () {
        return this.hasDefinedPermalinkRedirectDomain;
    }

    public BaseContentMetadata setPermalinkRedirectSite ( String permalinkRedirectSite ) {

        ++this.hasPermalinkRedirectSite;
        ++this.hasModifiedPermalinkRedirectSite;

        this.permalinkRedirectSite = permalinkRedirectSite;

        hasDefinedPermalinkRedirectSite = true;

        return this;

    }

    /**
     * <p>
     * The site for the permalink_redirect. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_site
     * </p>
     */
    public String getPermalinkRedirectSite() {

        if ( this.constructed == false && this.hasPermalinkRedirectSite == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.permalinkRedirectSite" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.permalinkRedirectSite;
    }

    /**
     * <p>
     * The site for the permalink_redirect. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_site
     * </p>
     */
    public Optional<String> getPermalinkRedirectSiteAsOptional() {

        if ( this.constructed == false && this.hasPermalinkRedirectSite == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.permalinkRedirectSite );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The site for the permalink_redirect. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_site
     * </p>
     */
    public String getPermalinkRedirectSite ( String _default ) {

        if ( ! hasPermalinkRedirectSite() ) {
            return _default;
        }

        return getPermalinkRedirectSite();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPermalinkRedirectSite () {
        return this.hasPermalinkRedirectSite > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPermalinkRedirectSite () {
        this.hasPermalinkRedirectSite = 0;
        this.hasModifiedPermalinkRedirectSite = 0;
        this.hasDefinedPermalinkRedirectSite = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPermalinkRedirectSite () {
        return this.hasModifiedPermalinkRedirectSite > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPermalinkRedirectSite () {
        return this.hasDefinedPermalinkRedirectSite;
    }

    public BaseContentMetadata setLink ( String link ) {

        ++this.hasLink;
        ++this.hasModifiedLink;

        this.link = link;

        hasDefinedLink = true;

        return this;

    }

    /**
     * <p>
     * The primary link to the content.  The vast majority of the time, this is identical to permalink.  However, some publisher types (MEMETRACKER) have a different link to the content which is external to the site.  If the link is NOT the same as the permalink, then we include it in the links field for search and accuracy purposes.
     * </p>
     *
     * <p>
     * Schema type: text , name: link
     * </p>
     */
    public String getLink() {

        if ( this.constructed == false && this.hasLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.link" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.link;
    }

    /**
     * <p>
     * The primary link to the content.  The vast majority of the time, this is identical to permalink.  However, some publisher types (MEMETRACKER) have a different link to the content which is external to the site.  If the link is NOT the same as the permalink, then we include it in the links field for search and accuracy purposes.
     * </p>
     *
     * <p>
     * Schema type: text , name: link
     * </p>
     */
    public Optional<String> getLinkAsOptional() {

        if ( this.constructed == false && this.hasLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.link );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The primary link to the content.  The vast majority of the time, this is identical to permalink.  However, some publisher types (MEMETRACKER) have a different link to the content which is external to the site.  If the link is NOT the same as the permalink, then we include it in the links field for search and accuracy purposes.
     * </p>
     *
     * <p>
     * Schema type: text , name: link
     * </p>
     */
    public String getLink ( String _default ) {

        if ( ! hasLink() ) {
            return _default;
        }

        return getLink();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLink () {
        return this.hasLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLink () {
        this.hasLink = 0;
        this.hasModifiedLink = 0;
        this.hasDefinedLink = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLink () {
        return this.hasModifiedLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLink () {
        return this.hasDefinedLink;
    }

    public BaseContentMetadata setLinkDomain ( String linkDomain ) {

        ++this.hasLinkDomain;
        ++this.hasModifiedLinkDomain;

        this.linkDomain = linkDomain;

        hasDefinedLinkDomain = true;

        return this;

    }

    /**
     * <p>
     * The domain for the link. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_domain
     * </p>
     */
    public String getLinkDomain() {

        if ( this.constructed == false && this.hasLinkDomain == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.linkDomain" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.linkDomain;
    }

    /**
     * <p>
     * The domain for the link. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_domain
     * </p>
     */
    public Optional<String> getLinkDomainAsOptional() {

        if ( this.constructed == false && this.hasLinkDomain == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.linkDomain );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The domain for the link. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_domain
     * </p>
     */
    public String getLinkDomain ( String _default ) {

        if ( ! hasLinkDomain() ) {
            return _default;
        }

        return getLinkDomain();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLinkDomain () {
        return this.hasLinkDomain > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLinkDomain () {
        this.hasLinkDomain = 0;
        this.hasModifiedLinkDomain = 0;
        this.hasDefinedLinkDomain = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLinkDomain () {
        return this.hasModifiedLinkDomain > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLinkDomain () {
        return this.hasDefinedLinkDomain;
    }

    public BaseContentMetadata setLinkSite ( String linkSite ) {

        ++this.hasLinkSite;
        ++this.hasModifiedLinkSite;

        this.linkSite = linkSite;

        hasDefinedLinkSite = true;

        return this;

    }

    /**
     * <p>
     * The site for the link. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_site
     * </p>
     */
    public String getLinkSite() {

        if ( this.constructed == false && this.hasLinkSite == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.linkSite" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.linkSite;
    }

    /**
     * <p>
     * The site for the link. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_site
     * </p>
     */
    public Optional<String> getLinkSiteAsOptional() {

        if ( this.constructed == false && this.hasLinkSite == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.linkSite );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The site for the link. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_site
     * </p>
     */
    public String getLinkSite ( String _default ) {

        if ( ! hasLinkSite() ) {
            return _default;
        }

        return getLinkSite();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLinkSite () {
        return this.hasLinkSite > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLinkSite () {
        this.hasLinkSite = 0;
        this.hasModifiedLinkSite = 0;
        this.hasDefinedLinkSite = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLinkSite () {
        return this.hasModifiedLinkSite > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLinkSite () {
        return this.hasDefinedLinkSite;
    }

    public BaseContentMetadata setShortlink ( String shortlink ) {

        ++this.hasShortlink;
        ++this.hasModifiedShortlink;

        this.shortlink = shortlink;

        hasDefinedShortlink = true;

        return this;

    }

    /**
     * <p>
     * The shortlink URL, if known.  This is the prefered 'short' URL discovered from either the content itself or through metdata.
     * </p>
     *
     * <p>
     * Schema type: text , name: shortlink
     * </p>
     */
    public String getShortlink() {

        if ( this.constructed == false && this.hasShortlink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.shortlink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.shortlink;
    }

    /**
     * <p>
     * The shortlink URL, if known.  This is the prefered 'short' URL discovered from either the content itself or through metdata.
     * </p>
     *
     * <p>
     * Schema type: text , name: shortlink
     * </p>
     */
    public Optional<String> getShortlinkAsOptional() {

        if ( this.constructed == false && this.hasShortlink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.shortlink );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The shortlink URL, if known.  This is the prefered 'short' URL discovered from either the content itself or through metdata.
     * </p>
     *
     * <p>
     * Schema type: text , name: shortlink
     * </p>
     */
    public String getShortlink ( String _default ) {

        if ( ! hasShortlink() ) {
            return _default;
        }

        return getShortlink();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasShortlink () {
        return this.hasShortlink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearShortlink () {
        this.hasShortlink = 0;
        this.hasModifiedShortlink = 0;
        this.hasDefinedShortlink = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedShortlink () {
        return this.hasModifiedShortlink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedShortlink () {
        return this.hasDefinedShortlink;
    }

    public BaseContentMetadata setCanonical ( String canonical ) {

        ++this.hasCanonical;
        ++this.hasModifiedCanonical;

        this.canonical = canonical;

        hasDefinedCanonical = true;

        return this;

    }

    /**
     * <p>
     * The canonical URL to the content (as specified by the publisher) in rel=canonical (and other specs such as og:url).
     * </p>
     *
     * <p>
     * Schema type: text , name: canonical
     * </p>
     */
    public String getCanonical() {

        if ( this.constructed == false && this.hasCanonical == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.canonical" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.canonical;
    }

    /**
     * <p>
     * The canonical URL to the content (as specified by the publisher) in rel=canonical (and other specs such as og:url).
     * </p>
     *
     * <p>
     * Schema type: text , name: canonical
     * </p>
     */
    public Optional<String> getCanonicalAsOptional() {

        if ( this.constructed == false && this.hasCanonical == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.canonical );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The canonical URL to the content (as specified by the publisher) in rel=canonical (and other specs such as og:url).
     * </p>
     *
     * <p>
     * Schema type: text , name: canonical
     * </p>
     */
    public String getCanonical ( String _default ) {

        if ( ! hasCanonical() ) {
            return _default;
        }

        return getCanonical();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasCanonical () {
        return this.hasCanonical > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearCanonical () {
        this.hasCanonical = 0;
        this.hasModifiedCanonical = 0;
        this.hasDefinedCanonical = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedCanonical () {
        return this.hasModifiedCanonical > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedCanonical () {
        return this.hasDefinedCanonical;
    }

    public BaseContentMetadata setDomain ( String domain ) {

        ++this.hasDomain;
        ++this.hasModifiedDomain;

        this.domain = domain;

        hasDefinedDomain = true;

        return this;

    }

    /**
     * <p>
     * The domain name of the permalink.  blogspot.com, example,com, etc. 
     * </p>
     *
     * <p>
     * Schema type: text , name: domain
     * </p>
     */
    public String getDomain() {

        if ( this.constructed == false && this.hasDomain == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.domain" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.domain;
    }

    /**
     * <p>
     * The domain name of the permalink.  blogspot.com, example,com, etc. 
     * </p>
     *
     * <p>
     * Schema type: text , name: domain
     * </p>
     */
    public Optional<String> getDomainAsOptional() {

        if ( this.constructed == false && this.hasDomain == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.domain );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The domain name of the permalink.  blogspot.com, example,com, etc. 
     * </p>
     *
     * <p>
     * Schema type: text , name: domain
     * </p>
     */
    public String getDomain ( String _default ) {

        if ( ! hasDomain() ) {
            return _default;
        }

        return getDomain();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDomain () {
        return this.hasDomain > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDomain () {
        this.hasDomain = 0;
        this.hasModifiedDomain = 0;
        this.hasDefinedDomain = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDomain () {
        return this.hasModifiedDomain > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDomain () {
        return this.hasDefinedDomain;
    }

    public BaseContentMetadata setSite ( String site ) {

        ++this.hasSite;
        ++this.hasModifiedSite;

        this.site = site;

        hasDefinedSite = true;

        return this;

    }

    /**
     * <p>
     * The site of the permalink including the full host name.  www.cnn.com would be a site and cnn.com would be a domain.
     * </p>
     *
     * <p>
     * Schema type: text , name: site
     * </p>
     */
    public String getSite() {

        if ( this.constructed == false && this.hasSite == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.site" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.site;
    }

    /**
     * <p>
     * The site of the permalink including the full host name.  www.cnn.com would be a site and cnn.com would be a domain.
     * </p>
     *
     * <p>
     * Schema type: text , name: site
     * </p>
     */
    public Optional<String> getSiteAsOptional() {

        if ( this.constructed == false && this.hasSite == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.site );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The site of the permalink including the full host name.  www.cnn.com would be a site and cnn.com would be a domain.
     * </p>
     *
     * <p>
     * Schema type: text , name: site
     * </p>
     */
    public String getSite ( String _default ) {

        if ( ! hasSite() ) {
            return _default;
        }

        return getSite();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSite () {
        return this.hasSite > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSite () {
        this.hasSite = 0;
        this.hasModifiedSite = 0;
        this.hasDefinedSite = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSite () {
        return this.hasModifiedSite > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSite () {
        return this.hasDefinedSite;
    }

    public BaseContentMetadata setMain ( String main ) {

        ++this.hasMain;
        ++this.hasModifiedMain;

        this.main = main;

        hasDefinedMain = true;

        return this;

    }

    /**
     * <p>
     * The actual main content of the article.  The authoritative 'main' of the post derived by removing sidebar content. (html).  This content is sanitized, cleaned so that javascript, event handlers, etc are removed.  This is analagous to the HTML5 main element.  IE the main content of the page, with no header, footer, or sidebar content.
     * </p>
     *
     * <p>
     * Schema type: text , name: main
     * </p>
     */
    public String getMain() {

        if ( this.constructed == false && this.hasMain == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.main" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.main;
    }

    /**
     * <p>
     * The actual main content of the article.  The authoritative 'main' of the post derived by removing sidebar content. (html).  This content is sanitized, cleaned so that javascript, event handlers, etc are removed.  This is analagous to the HTML5 main element.  IE the main content of the page, with no header, footer, or sidebar content.
     * </p>
     *
     * <p>
     * Schema type: text , name: main
     * </p>
     */
    public Optional<String> getMainAsOptional() {

        if ( this.constructed == false && this.hasMain == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.main );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The actual main content of the article.  The authoritative 'main' of the post derived by removing sidebar content. (html).  This content is sanitized, cleaned so that javascript, event handlers, etc are removed.  This is analagous to the HTML5 main element.  IE the main content of the page, with no header, footer, or sidebar content.
     * </p>
     *
     * <p>
     * Schema type: text , name: main
     * </p>
     */
    public String getMain ( String _default ) {

        if ( ! hasMain() ) {
            return _default;
        }

        return getMain();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMain () {
        return this.hasMain > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMain () {
        this.hasMain = 0;
        this.hasModifiedMain = 0;
        this.hasDefinedMain = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMain () {
        return this.hasModifiedMain > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMain () {
        return this.hasDefinedMain;
    }

    public BaseContentMetadata setMainLength ( int mainLength ) {

        ++this.hasMainLength;
        ++this.hasModifiedMainLength;

        this.mainLength = mainLength;

        hasDefinedMainLength = true;

        return this;

    }

    /**
     * <p>
     * The length of the main field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: main_length
     * </p>
     */
    public int getMainLength() {

        if ( this.constructed == false && this.hasMainLength == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mainLength" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mainLength;
    }

    /**
     * <p>
     * The length of the main field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: main_length
     * </p>
     */
    public Optional<Integer> getMainLengthAsOptional() {

        if ( this.constructed == false && this.hasMainLength == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.mainLength );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The length of the main field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: main_length
     * </p>
     */
    public int getMainLength ( int _default ) {

        if ( ! hasMainLength() ) {
            return _default;
        }

        return getMainLength();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMainLength () {
        return this.hasMainLength > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMainLength () {
        this.hasMainLength = 0;
        this.hasModifiedMainLength = 0;
        this.hasDefinedMainLength = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMainLength () {
        return this.hasModifiedMainLength > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMainLength () {
        return this.hasDefinedMainLength;
    }

    public BaseContentMetadata setMainChecksum ( String mainChecksum ) {

        ++this.hasMainChecksum;
        ++this.hasModifiedMainChecksum;

        this.mainChecksum = mainChecksum;

        hasDefinedMainChecksum = true;

        return this;

    }

    /**
     * <p>
     * The checksum of the main field.
     * </p>
     *
     * <p>
     * Schema type: text , name: main_checksum
     * </p>
     */
    public String getMainChecksum() {

        if ( this.constructed == false && this.hasMainChecksum == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mainChecksum" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mainChecksum;
    }

    /**
     * <p>
     * The checksum of the main field.
     * </p>
     *
     * <p>
     * Schema type: text , name: main_checksum
     * </p>
     */
    public Optional<String> getMainChecksumAsOptional() {

        if ( this.constructed == false && this.hasMainChecksum == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.mainChecksum );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The checksum of the main field.
     * </p>
     *
     * <p>
     * Schema type: text , name: main_checksum
     * </p>
     */
    public String getMainChecksum ( String _default ) {

        if ( ! hasMainChecksum() ) {
            return _default;
        }

        return getMainChecksum();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMainChecksum () {
        return this.hasMainChecksum > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMainChecksum () {
        this.hasMainChecksum = 0;
        this.hasModifiedMainChecksum = 0;
        this.hasDefinedMainChecksum = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMainChecksum () {
        return this.hasModifiedMainChecksum > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMainChecksum () {
        return this.hasDefinedMainChecksum;
    }

    public BaseContentMetadata setMainAuthoritative ( boolean mainAuthoritative ) {

        ++this.hasMainAuthoritative;
        ++this.hasModifiedMainAuthoritative;

        this.mainAuthoritative = mainAuthoritative;

        hasDefinedMainAuthoritative = true;

        return this;

    }

    /**
     * <p>
     * True when the main content is 100% accurate and the extract is not needed.
     * </p>
     *
     * <p>
     * Schema type: boolean , name: main_authoritative
     * </p>
     */
    public boolean getMainAuthoritative() {

        if ( this.constructed == false && this.hasMainAuthoritative == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mainAuthoritative" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mainAuthoritative;
    }

    /**
     * <p>
     * True when the main content is 100% accurate and the extract is not needed.
     * </p>
     *
     * <p>
     * Schema type: boolean , name: main_authoritative
     * </p>
     */
    public Optional<Boolean> getMainAuthoritativeAsOptional() {

        if ( this.constructed == false && this.hasMainAuthoritative == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.mainAuthoritative );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * True when the main content is 100% accurate and the extract is not needed.
     * </p>
     *
     * <p>
     * Schema type: boolean , name: main_authoritative
     * </p>
     */
    public boolean getMainAuthoritative ( boolean _default ) {

        if ( ! hasMainAuthoritative() ) {
            return _default;
        }

        return getMainAuthoritative();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMainAuthoritative () {
        return this.hasMainAuthoritative > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMainAuthoritative () {
        this.hasMainAuthoritative = 0;
        this.hasModifiedMainAuthoritative = 0;
        this.hasDefinedMainAuthoritative = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMainAuthoritative () {
        return this.hasModifiedMainAuthoritative > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMainAuthoritative () {
        return this.hasDefinedMainAuthoritative;
    }

    public BaseContentMetadata setMainFormat ( MainFormat mainFormat ) {

        ++this.hasMainFormat;
        ++this.hasModifiedMainFormat;

        this.mainFormat = mainFormat;

        hasDefinedMainFormat = true;

        return this;

    }

    /**
     * <p>
     * The format of the main element (either HTML or text)
     * </p>
     *
     * <p>
     * Schema type: enum , name: main_format
     * </p>
     */
    public MainFormat getMainFormat() {

        if ( this.constructed == false && this.hasMainFormat == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mainFormat" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mainFormat;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The format of the main element (either HTML or text)
     * </p>
     *
     * <p>
     * Schema type: enum , name: main_format
     * </p>
     */
    public MainFormat getMainFormat ( MainFormat _default ) {

        if ( ! hasMainFormat() ) {
            return _default;
        }

        return getMainFormat();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMainFormat () {
        return this.hasMainFormat > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMainFormat () {
        this.hasMainFormat = 0;
        this.hasModifiedMainFormat = 0;
        this.hasDefinedMainFormat = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMainFormat () {
        return this.hasModifiedMainFormat > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMainFormat () {
        return this.hasDefinedMainFormat;
    }

    public BaseContentMetadata setExtract ( String extract ) {

        ++this.hasExtract;
        ++this.hasModifiedExtract;

        this.extract = extract;

        hasDefinedExtract = true;

        return this;

    }

    /**
     * <p>
     * The extract of the content with applied chrome/boilerpipe removal algorithms applied.  
     * </p>
     *
     * <p>
     * Schema type: text , name: extract
     * </p>
     */
    public String getExtract() {

        if ( this.constructed == false && this.hasExtract == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.extract" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.extract;
    }

    /**
     * <p>
     * The extract of the content with applied chrome/boilerpipe removal algorithms applied.  
     * </p>
     *
     * <p>
     * Schema type: text , name: extract
     * </p>
     */
    public Optional<String> getExtractAsOptional() {

        if ( this.constructed == false && this.hasExtract == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.extract );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The extract of the content with applied chrome/boilerpipe removal algorithms applied.  
     * </p>
     *
     * <p>
     * Schema type: text , name: extract
     * </p>
     */
    public String getExtract ( String _default ) {

        if ( ! hasExtract() ) {
            return _default;
        }

        return getExtract();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasExtract () {
        return this.hasExtract > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearExtract () {
        this.hasExtract = 0;
        this.hasModifiedExtract = 0;
        this.hasDefinedExtract = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedExtract () {
        return this.hasModifiedExtract > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedExtract () {
        return this.hasDefinedExtract;
    }

    public BaseContentMetadata setExtractLength ( int extractLength ) {

        ++this.hasExtractLength;
        ++this.hasModifiedExtractLength;

        this.extractLength = extractLength;

        hasDefinedExtractLength = true;

        return this;

    }

    /**
     * <p>
     * The length of the extract field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: extract_length
     * </p>
     */
    public int getExtractLength() {

        if ( this.constructed == false && this.hasExtractLength == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.extractLength" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.extractLength;
    }

    /**
     * <p>
     * The length of the extract field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: extract_length
     * </p>
     */
    public Optional<Integer> getExtractLengthAsOptional() {

        if ( this.constructed == false && this.hasExtractLength == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.extractLength );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The length of the extract field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: extract_length
     * </p>
     */
    public int getExtractLength ( int _default ) {

        if ( ! hasExtractLength() ) {
            return _default;
        }

        return getExtractLength();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasExtractLength () {
        return this.hasExtractLength > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearExtractLength () {
        this.hasExtractLength = 0;
        this.hasModifiedExtractLength = 0;
        this.hasDefinedExtractLength = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedExtractLength () {
        return this.hasModifiedExtractLength > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedExtractLength () {
        return this.hasDefinedExtractLength;
    }

    public BaseContentMetadata setExtractChecksum ( String extractChecksum ) {

        ++this.hasExtractChecksum;
        ++this.hasModifiedExtractChecksum;

        this.extractChecksum = extractChecksum;

        hasDefinedExtractChecksum = true;

        return this;

    }

    /**
     * <p>
     * The checksum of the extract field.
     * </p>
     *
     * <p>
     * Schema type: text , name: extract_checksum
     * </p>
     */
    public String getExtractChecksum() {

        if ( this.constructed == false && this.hasExtractChecksum == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.extractChecksum" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.extractChecksum;
    }

    /**
     * <p>
     * The checksum of the extract field.
     * </p>
     *
     * <p>
     * Schema type: text , name: extract_checksum
     * </p>
     */
    public Optional<String> getExtractChecksumAsOptional() {

        if ( this.constructed == false && this.hasExtractChecksum == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.extractChecksum );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The checksum of the extract field.
     * </p>
     *
     * <p>
     * Schema type: text , name: extract_checksum
     * </p>
     */
    public String getExtractChecksum ( String _default ) {

        if ( ! hasExtractChecksum() ) {
            return _default;
        }

        return getExtractChecksum();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasExtractChecksum () {
        return this.hasExtractChecksum > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearExtractChecksum () {
        this.hasExtractChecksum = 0;
        this.hasModifiedExtractChecksum = 0;
        this.hasDefinedExtractChecksum = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedExtractChecksum () {
        return this.hasModifiedExtractChecksum > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedExtractChecksum () {
        return this.hasDefinedExtractChecksum;
    }

    public BaseContentMetadata setSummaryText ( String summaryText ) {

        ++this.hasSummaryText;
        ++this.hasModifiedSummaryText;

        this.summaryText = summaryText;

        hasDefinedSummaryText = true;

        return this;

    }

    /**
     * <p>
     * A summary of the document computed by our document summarizer. This summary is in plain text. If mulitiple paragraphs are present they are separated by a newline. If you would like to separate the paragraphs in your UI and you're rendering HTML you can split the summary text by newline and wrap each paragraph in a P element.
     * </p>
     *
     * <p>
     * Schema type: text , name: summary_text
     * </p>
     */
    public String getSummaryText() {

        if ( this.constructed == false && this.hasSummaryText == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.summaryText" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.summaryText;
    }

    /**
     * <p>
     * A summary of the document computed by our document summarizer. This summary is in plain text. If mulitiple paragraphs are present they are separated by a newline. If you would like to separate the paragraphs in your UI and you're rendering HTML you can split the summary text by newline and wrap each paragraph in a P element.
     * </p>
     *
     * <p>
     * Schema type: text , name: summary_text
     * </p>
     */
    public Optional<String> getSummaryTextAsOptional() {

        if ( this.constructed == false && this.hasSummaryText == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.summaryText );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * A summary of the document computed by our document summarizer. This summary is in plain text. If mulitiple paragraphs are present they are separated by a newline. If you would like to separate the paragraphs in your UI and you're rendering HTML you can split the summary text by newline and wrap each paragraph in a P element.
     * </p>
     *
     * <p>
     * Schema type: text , name: summary_text
     * </p>
     */
    public String getSummaryText ( String _default ) {

        if ( ! hasSummaryText() ) {
            return _default;
        }

        return getSummaryText();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSummaryText () {
        return this.hasSummaryText > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSummaryText () {
        this.hasSummaryText = 0;
        this.hasModifiedSummaryText = 0;
        this.hasDefinedSummaryText = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSummaryText () {
        return this.hasModifiedSummaryText > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSummaryText () {
        return this.hasDefinedSummaryText;
    }

    public BaseContentMetadata setTitle ( String title ) {

        ++this.hasTitle;
        ++this.hasModifiedTitle;

        this.title = title;

        hasDefinedTitle = true;

        return this;

    }

    /**
     * <p>
     * The title of the post.
     * </p>
     *
     * <p>
     * Schema type: text , name: title
     * </p>
     */
    public String getTitle() {

        if ( this.constructed == false && this.hasTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.title" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.title;
    }

    /**
     * <p>
     * The title of the post.
     * </p>
     *
     * <p>
     * Schema type: text , name: title
     * </p>
     */
    public Optional<String> getTitleAsOptional() {

        if ( this.constructed == false && this.hasTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.title );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The title of the post.
     * </p>
     *
     * <p>
     * Schema type: text , name: title
     * </p>
     */
    public String getTitle ( String _default ) {

        if ( ! hasTitle() ) {
            return _default;
        }

        return getTitle();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasTitle () {
        return this.hasTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearTitle () {
        this.hasTitle = 0;
        this.hasModifiedTitle = 0;
        this.hasDefinedTitle = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedTitle () {
        return this.hasModifiedTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedTitle () {
        return this.hasDefinedTitle;
    }

    public BaseContentMetadata setPublisher ( String publisher ) {

        ++this.hasPublisher;
        ++this.hasModifiedPublisher;

        this.publisher = publisher;

        hasDefinedPublisher = true;

        return this;

    }

    /**
     * <p>
     * The publisher name.  (CNN, MSNBC, Techcrunch, etc)
     * </p>
     *
     * <p>
     * Schema type: text , name: publisher
     * </p>
     */
    public String getPublisher() {

        if ( this.constructed == false && this.hasPublisher == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.publisher" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.publisher;
    }

    /**
     * <p>
     * The publisher name.  (CNN, MSNBC, Techcrunch, etc)
     * </p>
     *
     * <p>
     * Schema type: text , name: publisher
     * </p>
     */
    public Optional<String> getPublisherAsOptional() {

        if ( this.constructed == false && this.hasPublisher == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.publisher );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The publisher name.  (CNN, MSNBC, Techcrunch, etc)
     * </p>
     *
     * <p>
     * Schema type: text , name: publisher
     * </p>
     */
    public String getPublisher ( String _default ) {

        if ( ! hasPublisher() ) {
            return _default;
        }

        return getPublisher();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPublisher () {
        return this.hasPublisher > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPublisher () {
        this.hasPublisher = 0;
        this.hasModifiedPublisher = 0;
        this.hasDefinedPublisher = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPublisher () {
        return this.hasModifiedPublisher > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPublisher () {
        return this.hasDefinedPublisher;
    }

    public BaseContentMetadata setSection ( String section ) {

        ++this.hasSection;
        ++this.hasModifiedSection;

        this.section = section;

        hasDefinedSection = true;

        return this;

    }

    /**
     * <p>
     * Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: section
     * </p>
     */
    public String getSection() {

        if ( this.constructed == false && this.hasSection == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.section" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.section;
    }

    /**
     * <p>
     * Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: section
     * </p>
     */
    public Optional<String> getSectionAsOptional() {

        if ( this.constructed == false && this.hasSection == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.section );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: section
     * </p>
     */
    public String getSection ( String _default ) {

        if ( ! hasSection() ) {
            return _default;
        }

        return getSection();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSection () {
        return this.hasSection > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSection () {
        this.hasSection = 0;
        this.hasModifiedSection = 0;
        this.hasDefinedSection = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSection () {
        return this.hasModifiedSection > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSection () {
        return this.hasDefinedSection;
    }

    public BaseContentMetadata setDescription ( String description ) {

        ++this.hasDescription;
        ++this.hasModifiedDescription;

        this.description = description;

        hasDefinedDescription = true;

        return this;

    }

    /**
     * <p>
     * A short description of the item (HTML)
     * </p>
     *
     * <p>
     * Schema type: text , name: description
     * </p>
     */
    public String getDescription() {

        if ( this.constructed == false && this.hasDescription == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.description" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.description;
    }

    /**
     * <p>
     * A short description of the item (HTML)
     * </p>
     *
     * <p>
     * Schema type: text , name: description
     * </p>
     */
    public Optional<String> getDescriptionAsOptional() {

        if ( this.constructed == false && this.hasDescription == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.description );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * A short description of the item (HTML)
     * </p>
     *
     * <p>
     * Schema type: text , name: description
     * </p>
     */
    public String getDescription ( String _default ) {

        if ( ! hasDescription() ) {
            return _default;
        }

        return getDescription();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDescription () {
        return this.hasDescription > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDescription () {
        this.hasDescription = 0;
        this.hasModifiedDescription = 0;
        this.hasDefinedDescription = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDescription () {
        return this.hasModifiedDescription > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDescription () {
        return this.hasDefinedDescription;
    }

    public BaseContentMetadata setTags ( Set<String> tags ) {

        NoNullSet.validate( tags );

        ++this.hasTags;
        ++this.hasModifiedTags;

        this.tags = tags;

        hasDefinedTags = true;

        return this;

    }

    /**
     * <p>
     * Tags for the item.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: tags
     * </p>
     */
    public Set<String> getTags() {

        if ( this.constructed == false && this.hasTags == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.tags" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.tags;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Tags for the item.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: tags
     * </p>
     */
    public Set<String> getTags ( Set<String> _default ) {

        if ( ! hasTags() ) {
            return _default;
        }

        return getTags();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasTags () {
        return this.hasTags > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearTags () {
        this.hasTags = 0;
        this.hasModifiedTags = 0;
        this.hasDefinedTags = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedTags () {
        return this.hasModifiedTags > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedTags () {
        return this.hasDefinedTags;
    }

    public BaseContentMetadata setMentions ( Set<String> mentions ) {

        NoNullSet.validate( mentions );

        ++this.hasMentions;
        ++this.hasModifiedMentions;

        this.mentions = mentions;

        hasDefinedMentions = true;

        return this;

    }

    /**
     * <p>
     * Username mentions for users within the content of this post.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: mentions
     * </p>
     */
    public Set<String> getMentions() {

        if ( this.constructed == false && this.hasMentions == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mentions" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mentions;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Username mentions for users within the content of this post.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: mentions
     * </p>
     */
    public Set<String> getMentions ( Set<String> _default ) {

        if ( ! hasMentions() ) {
            return _default;
        }

        return getMentions();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMentions () {
        return this.hasMentions > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMentions () {
        this.hasMentions = 0;
        this.hasModifiedMentions = 0;
        this.hasDefinedMentions = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMentions () {
        return this.hasModifiedMentions > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMentions () {
        return this.hasDefinedMentions;
    }

    public BaseContentMetadata setLinks ( Set<String> links ) {

        NoNullSet.validate( links );

        ++this.hasLinks;
        ++this.hasModifiedLinks;

        this.links = links;

        hasDefinedLinks = true;

        return this;

    }

    /**
     * <p>
     * All outbound links in the main element.  Since main is the authoritative content, without chrome or sidebar content, this can be used for ranking purposes.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: links
     * </p>
     */
    public Set<String> getLinks() {

        if ( this.constructed == false && this.hasLinks == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.links" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.links;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * All outbound links in the main element.  Since main is the authoritative content, without chrome or sidebar content, this can be used for ranking purposes.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: links
     * </p>
     */
    public Set<String> getLinks ( Set<String> _default ) {

        if ( ! hasLinks() ) {
            return _default;
        }

        return getLinks();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLinks () {
        return this.hasLinks > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLinks () {
        this.hasLinks = 0;
        this.hasModifiedLinks = 0;
        this.hasDefinedLinks = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLinks () {
        return this.hasModifiedLinks > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLinks () {
        return this.hasDefinedLinks;
    }

    public BaseContentMetadata setPublished ( Date published ) {

        ++this.hasPublished;
        ++this.hasModifiedPublished;

        this.published = published;

        hasDefinedPublished = true;

        return this;

    }

    /**
     * <p>
     * Date of first broadcast/publication.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published
     * </p>
     */
    public Date getPublished() {

        if ( this.constructed == false && this.hasPublished == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.published" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.published;
    }

    /**
     * <p>
     * Date of first broadcast/publication.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published
     * </p>
     */
    public Optional<Date> getPublishedAsOptional() {

        if ( this.constructed == false && this.hasPublished == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.published );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Date of first broadcast/publication.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published
     * </p>
     */
    public Date getPublished ( Date _default ) {

        if ( ! hasPublished() ) {
            return _default;
        }

        return getPublished();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPublished () {
        return this.hasPublished > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPublished () {
        this.hasPublished = 0;
        this.hasModifiedPublished = 0;
        this.hasDefinedPublished = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPublished () {
        return this.hasModifiedPublished > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPublished () {
        return this.hasDefinedPublished;
    }

    public BaseContentMetadata setModified ( Date modified ) {

        ++this.hasModified;
        ++this.hasModifiedModified;

        this.modified = modified;

        hasDefinedModified = true;

        return this;

    }

    /**
     * <p>
     * The date on which the content was most recently modified.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified
     * </p>
     */
    public Date getModified() {

        if ( this.constructed == false && this.hasModified == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.modified" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.modified;
    }

    /**
     * <p>
     * The date on which the content was most recently modified.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified
     * </p>
     */
    public Optional<Date> getModifiedAsOptional() {

        if ( this.constructed == false && this.hasModified == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.modified );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The date on which the content was most recently modified.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified
     * </p>
     */
    public Date getModified ( Date _default ) {

        if ( ! hasModified() ) {
            return _default;
        }

        return getModified();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasModified () {
        return this.hasModified > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearModified () {
        this.hasModified = 0;
        this.hasModifiedModified = 0;
        this.hasDefinedModified = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedModified () {
        return this.hasModifiedModified > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedModified () {
        return this.hasDefinedModified;
    }

    public BaseContentMetadata setPublishedPartial ( Date publishedPartial ) {

        ++this.hasPublishedPartial;
        ++this.hasModifiedPublishedPartial;

        this.publishedPartial = publishedPartial;

        hasDefinedPublishedPartial = true;

        return this;

    }

    /**
     * <p>
     * This is identical to `published` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published_partial
     * </p>
     */
    public Date getPublishedPartial() {

        if ( this.constructed == false && this.hasPublishedPartial == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.publishedPartial" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.publishedPartial;
    }

    /**
     * <p>
     * This is identical to `published` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published_partial
     * </p>
     */
    public Optional<Date> getPublishedPartialAsOptional() {

        if ( this.constructed == false && this.hasPublishedPartial == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.publishedPartial );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * This is identical to `published` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published_partial
     * </p>
     */
    public Date getPublishedPartial ( Date _default ) {

        if ( ! hasPublishedPartial() ) {
            return _default;
        }

        return getPublishedPartial();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPublishedPartial () {
        return this.hasPublishedPartial > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPublishedPartial () {
        this.hasPublishedPartial = 0;
        this.hasModifiedPublishedPartial = 0;
        this.hasDefinedPublishedPartial = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPublishedPartial () {
        return this.hasModifiedPublishedPartial > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPublishedPartial () {
        return this.hasDefinedPublishedPartial;
    }

    public BaseContentMetadata setModifiedPartial ( Date modifiedPartial ) {

        ++this.hasModifiedPartial;
        ++this.hasModifiedModifiedPartial;

        this.modifiedPartial = modifiedPartial;

        hasDefinedModifiedPartial = true;

        return this;

    }

    /**
     * <p>
     * This is identical to `modified` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified_partial
     * </p>
     */
    public Date getModifiedPartial() {

        if ( this.constructed == false && this.hasModifiedPartial == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.modifiedPartial" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.modifiedPartial;
    }

    /**
     * <p>
     * This is identical to `modified` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified_partial
     * </p>
     */
    public Optional<Date> getModifiedPartialAsOptional() {

        if ( this.constructed == false && this.hasModifiedPartial == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.modifiedPartial );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * This is identical to `modified` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified_partial
     * </p>
     */
    public Date getModifiedPartial ( Date _default ) {

        if ( ! hasModifiedPartial() ) {
            return _default;
        }

        return getModifiedPartial();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasModifiedPartial () {
        return this.hasModifiedPartial > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearModifiedPartial () {
        this.hasModifiedPartial = 0;
        this.hasModifiedModifiedPartial = 0;
        this.hasDefinedModifiedPartial = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedModifiedPartial () {
        return this.hasModifiedModifiedPartial > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedModifiedPartial () {
        return this.hasDefinedModifiedPartial;
    }

    public BaseContentMetadata setAuthorName ( String authorName ) {

        ++this.hasAuthorName;
        ++this.hasModifiedAuthorName;

        this.authorName = authorName;

        hasDefinedAuthorName = true;

        return this;

    }

    /**
     * <p>
     * The name of the author.  This is the human readable name like 'Barack Obama' or 'Michael Jordan'
     * </p>
     *
     * <p>
     * Schema type: text , name: author_name
     * </p>
     */
    public String getAuthorName() {

        if ( this.constructed == false && this.hasAuthorName == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorName" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorName;
    }

    /**
     * <p>
     * The name of the author.  This is the human readable name like 'Barack Obama' or 'Michael Jordan'
     * </p>
     *
     * <p>
     * Schema type: text , name: author_name
     * </p>
     */
    public Optional<String> getAuthorNameAsOptional() {

        if ( this.constructed == false && this.hasAuthorName == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorName );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The name of the author.  This is the human readable name like 'Barack Obama' or 'Michael Jordan'
     * </p>
     *
     * <p>
     * Schema type: text , name: author_name
     * </p>
     */
    public String getAuthorName ( String _default ) {

        if ( ! hasAuthorName() ) {
            return _default;
        }

        return getAuthorName();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorName () {
        return this.hasAuthorName > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorName () {
        this.hasAuthorName = 0;
        this.hasModifiedAuthorName = 0;
        this.hasDefinedAuthorName = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorName () {
        return this.hasModifiedAuthorName > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorName () {
        return this.hasDefinedAuthorName;
    }

    public BaseContentMetadata setAuthorLink ( String authorLink ) {

        ++this.hasAuthorLink;
        ++this.hasModifiedAuthorLink;

        this.authorLink = authorLink;

        hasDefinedAuthorLink = true;

        return this;

    }

    /**
     * <p>
     * The link for the author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_link
     * </p>
     */
    public String getAuthorLink() {

        if ( this.constructed == false && this.hasAuthorLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorLink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorLink;
    }

    /**
     * <p>
     * The link for the author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_link
     * </p>
     */
    public Optional<String> getAuthorLinkAsOptional() {

        if ( this.constructed == false && this.hasAuthorLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorLink );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The link for the author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_link
     * </p>
     */
    public String getAuthorLink ( String _default ) {

        if ( ! hasAuthorLink() ) {
            return _default;
        }

        return getAuthorLink();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorLink () {
        return this.hasAuthorLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorLink () {
        this.hasAuthorLink = 0;
        this.hasModifiedAuthorLink = 0;
        this.hasDefinedAuthorLink = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorLink () {
        return this.hasModifiedAuthorLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorLink () {
        return this.hasDefinedAuthorLink;
    }

    public BaseContentMetadata setAuthorHandle ( String authorHandle ) {

        ++this.hasAuthorHandle;
        ++this.hasModifiedAuthorHandle;

        this.authorHandle = authorHandle;

        hasDefinedAuthorHandle = true;

        return this;

    }

    /**
     * <p>
     * The handle of the author.  This is a unique token/handle for the author across the whole site.  For example 'barackobama' and would never conflict with another account.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_handle
     * </p>
     */
    public String getAuthorHandle() {

        if ( this.constructed == false && this.hasAuthorHandle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorHandle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorHandle;
    }

    /**
     * <p>
     * The handle of the author.  This is a unique token/handle for the author across the whole site.  For example 'barackobama' and would never conflict with another account.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_handle
     * </p>
     */
    public Optional<String> getAuthorHandleAsOptional() {

        if ( this.constructed == false && this.hasAuthorHandle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorHandle );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The handle of the author.  This is a unique token/handle for the author across the whole site.  For example 'barackobama' and would never conflict with another account.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_handle
     * </p>
     */
    public String getAuthorHandle ( String _default ) {

        if ( ! hasAuthorHandle() ) {
            return _default;
        }

        return getAuthorHandle();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorHandle () {
        return this.hasAuthorHandle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorHandle () {
        this.hasAuthorHandle = 0;
        this.hasModifiedAuthorHandle = 0;
        this.hasDefinedAuthorHandle = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorHandle () {
        return this.hasModifiedAuthorHandle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorHandle () {
        return this.hasDefinedAuthorHandle;
    }

    public BaseContentMetadata setAuthorFollowers ( int authorFollowers ) {

        ++this.hasAuthorFollowers;
        ++this.hasModifiedAuthorFollowers;

        this.authorFollowers = authorFollowers;

        hasDefinedAuthorFollowers = true;

        return this;

    }

    /**
     * <p>
     * The number of followers for this author.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_followers
     * </p>
     */
    public int getAuthorFollowers() {

        if ( this.constructed == false && this.hasAuthorFollowers == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorFollowers" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorFollowers;
    }

    /**
     * <p>
     * The number of followers for this author.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_followers
     * </p>
     */
    public Optional<Integer> getAuthorFollowersAsOptional() {

        if ( this.constructed == false && this.hasAuthorFollowers == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorFollowers );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The number of followers for this author.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_followers
     * </p>
     */
    public int getAuthorFollowers ( int _default ) {

        if ( ! hasAuthorFollowers() ) {
            return _default;
        }

        return getAuthorFollowers();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorFollowers () {
        return this.hasAuthorFollowers > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorFollowers () {
        this.hasAuthorFollowers = 0;
        this.hasModifiedAuthorFollowers = 0;
        this.hasDefinedAuthorFollowers = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorFollowers () {
        return this.hasModifiedAuthorFollowers > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorFollowers () {
        return this.hasDefinedAuthorFollowers;
    }

    public BaseContentMetadata setAuthorLocation ( String authorLocation ) {

        ++this.hasAuthorLocation;
        ++this.hasModifiedAuthorLocation;

        this.authorLocation = authorLocation;

        hasDefinedAuthorLocation = true;

        return this;

    }

    /**
     * <p>
     * The location for this author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_location
     * </p>
     */
    public String getAuthorLocation() {

        if ( this.constructed == false && this.hasAuthorLocation == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorLocation" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorLocation;
    }

    /**
     * <p>
     * The location for this author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_location
     * </p>
     */
    public Optional<String> getAuthorLocationAsOptional() {

        if ( this.constructed == false && this.hasAuthorLocation == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorLocation );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The location for this author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_location
     * </p>
     */
    public String getAuthorLocation ( String _default ) {

        if ( ! hasAuthorLocation() ) {
            return _default;
        }

        return getAuthorLocation();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorLocation () {
        return this.hasAuthorLocation > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorLocation () {
        this.hasAuthorLocation = 0;
        this.hasModifiedAuthorLocation = 0;
        this.hasDefinedAuthorLocation = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorLocation () {
        return this.hasModifiedAuthorLocation > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorLocation () {
        return this.hasDefinedAuthorLocation;
    }

    public BaseContentMetadata setAuthorAvatarImg ( String authorAvatarImg ) {

        ++this.hasAuthorAvatarImg;
        ++this.hasModifiedAuthorAvatarImg;

        this.authorAvatarImg = authorAvatarImg;

        hasDefinedAuthorAvatarImg = true;

        return this;

    }

    /**
     * <p>
     * The URL to the img which is an avatar for the user who posted this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_avatar_img
     * </p>
     */
    public String getAuthorAvatarImg() {

        if ( this.constructed == false && this.hasAuthorAvatarImg == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorAvatarImg" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorAvatarImg;
    }

    /**
     * <p>
     * The URL to the img which is an avatar for the user who posted this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_avatar_img
     * </p>
     */
    public Optional<String> getAuthorAvatarImgAsOptional() {

        if ( this.constructed == false && this.hasAuthorAvatarImg == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorAvatarImg );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The URL to the img which is an avatar for the user who posted this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_avatar_img
     * </p>
     */
    public String getAuthorAvatarImg ( String _default ) {

        if ( ! hasAuthorAvatarImg() ) {
            return _default;
        }

        return getAuthorAvatarImg();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorAvatarImg () {
        return this.hasAuthorAvatarImg > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorAvatarImg () {
        this.hasAuthorAvatarImg = 0;
        this.hasModifiedAuthorAvatarImg = 0;
        this.hasDefinedAuthorAvatarImg = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorAvatarImg () {
        return this.hasModifiedAuthorAvatarImg > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorAvatarImg () {
        return this.hasDefinedAuthorAvatarImg;
    }

    public BaseContentMetadata setAuthorAvatarWidth ( int authorAvatarWidth ) {

        ++this.hasAuthorAvatarWidth;
        ++this.hasModifiedAuthorAvatarWidth;

        this.authorAvatarWidth = authorAvatarWidth;

        hasDefinedAuthorAvatarWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_width
     * </p>
     */
    public int getAuthorAvatarWidth() {

        if ( this.constructed == false && this.hasAuthorAvatarWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorAvatarWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorAvatarWidth;
    }

    /**
     * <p>
     * The width of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_width
     * </p>
     */
    public Optional<Integer> getAuthorAvatarWidthAsOptional() {

        if ( this.constructed == false && this.hasAuthorAvatarWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorAvatarWidth );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The width of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_width
     * </p>
     */
    public int getAuthorAvatarWidth ( int _default ) {

        if ( ! hasAuthorAvatarWidth() ) {
            return _default;
        }

        return getAuthorAvatarWidth();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorAvatarWidth () {
        return this.hasAuthorAvatarWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorAvatarWidth () {
        this.hasAuthorAvatarWidth = 0;
        this.hasModifiedAuthorAvatarWidth = 0;
        this.hasDefinedAuthorAvatarWidth = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorAvatarWidth () {
        return this.hasModifiedAuthorAvatarWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorAvatarWidth () {
        return this.hasDefinedAuthorAvatarWidth;
    }

    public BaseContentMetadata setAuthorAvatarHeight ( int authorAvatarHeight ) {

        ++this.hasAuthorAvatarHeight;
        ++this.hasModifiedAuthorAvatarHeight;

        this.authorAvatarHeight = authorAvatarHeight;

        hasDefinedAuthorAvatarHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_height
     * </p>
     */
    public int getAuthorAvatarHeight() {

        if ( this.constructed == false && this.hasAuthorAvatarHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorAvatarHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorAvatarHeight;
    }

    /**
     * <p>
     * The height of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_height
     * </p>
     */
    public Optional<Integer> getAuthorAvatarHeightAsOptional() {

        if ( this.constructed == false && this.hasAuthorAvatarHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorAvatarHeight );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The height of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_height
     * </p>
     */
    public int getAuthorAvatarHeight ( int _default ) {

        if ( ! hasAuthorAvatarHeight() ) {
            return _default;
        }

        return getAuthorAvatarHeight();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorAvatarHeight () {
        return this.hasAuthorAvatarHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorAvatarHeight () {
        this.hasAuthorAvatarHeight = 0;
        this.hasModifiedAuthorAvatarHeight = 0;
        this.hasDefinedAuthorAvatarHeight = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorAvatarHeight () {
        return this.hasModifiedAuthorAvatarHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorAvatarHeight () {
        return this.hasDefinedAuthorAvatarHeight;
    }

    public BaseContentMetadata setAuthorTwitterHandle ( String authorTwitterHandle ) {

        ++this.hasAuthorTwitterHandle;
        ++this.hasModifiedAuthorTwitterHandle;

        this.authorTwitterHandle = authorTwitterHandle;

        hasDefinedAuthorTwitterHandle = true;

        return this;

    }

    /**
     * <p>
     * Deprecated.  Use author_handle instead
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_handle
     * </p>
     */
    public String getAuthorTwitterHandle() {

        if ( this.constructed == false && this.hasAuthorTwitterHandle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorTwitterHandle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorTwitterHandle;
    }

    /**
     * <p>
     * Deprecated.  Use author_handle instead
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_handle
     * </p>
     */
    public Optional<String> getAuthorTwitterHandleAsOptional() {

        if ( this.constructed == false && this.hasAuthorTwitterHandle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorTwitterHandle );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Deprecated.  Use author_handle instead
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_handle
     * </p>
     */
    public String getAuthorTwitterHandle ( String _default ) {

        if ( ! hasAuthorTwitterHandle() ) {
            return _default;
        }

        return getAuthorTwitterHandle();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorTwitterHandle () {
        return this.hasAuthorTwitterHandle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorTwitterHandle () {
        this.hasAuthorTwitterHandle = 0;
        this.hasModifiedAuthorTwitterHandle = 0;
        this.hasDefinedAuthorTwitterHandle = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorTwitterHandle () {
        return this.hasModifiedAuthorTwitterHandle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorTwitterHandle () {
        return this.hasDefinedAuthorTwitterHandle;
    }

    public BaseContentMetadata setAuthorTwitterUserid ( String authorTwitterUserid ) {

        ++this.hasAuthorTwitterUserid;
        ++this.hasModifiedAuthorTwitterUserid;

        this.authorTwitterUserid = authorTwitterUserid;

        hasDefinedAuthorTwitterUserid = true;

        return this;

    }

    /**
     * <p>
     * Deprecated.  Use author_user_id instead.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_userid
     * </p>
     */
    public String getAuthorTwitterUserid() {

        if ( this.constructed == false && this.hasAuthorTwitterUserid == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorTwitterUserid" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorTwitterUserid;
    }

    /**
     * <p>
     * Deprecated.  Use author_user_id instead.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_userid
     * </p>
     */
    public Optional<String> getAuthorTwitterUseridAsOptional() {

        if ( this.constructed == false && this.hasAuthorTwitterUserid == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorTwitterUserid );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Deprecated.  Use author_user_id instead.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_userid
     * </p>
     */
    public String getAuthorTwitterUserid ( String _default ) {

        if ( ! hasAuthorTwitterUserid() ) {
            return _default;
        }

        return getAuthorTwitterUserid();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorTwitterUserid () {
        return this.hasAuthorTwitterUserid > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorTwitterUserid () {
        this.hasAuthorTwitterUserid = 0;
        this.hasModifiedAuthorTwitterUserid = 0;
        this.hasDefinedAuthorTwitterUserid = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorTwitterUserid () {
        return this.hasModifiedAuthorTwitterUserid > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorTwitterUserid () {
        return this.hasDefinedAuthorTwitterUserid;
    }

    public BaseContentMetadata setAuthorUserId ( String authorUserId ) {

        ++this.hasAuthorUserId;
        ++this.hasModifiedAuthorUserId;

        this.authorUserId = authorUserId;

        hasDefinedAuthorUserId = true;

        return this;

    }

    /**
     * <p>
     * User ID in the target platform (when available, twitter for instance)
     * </p>
     *
     * <p>
     * Schema type: text , name: author_user_id
     * </p>
     */
    public String getAuthorUserId() {

        if ( this.constructed == false && this.hasAuthorUserId == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorUserId" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorUserId;
    }

    /**
     * <p>
     * User ID in the target platform (when available, twitter for instance)
     * </p>
     *
     * <p>
     * Schema type: text , name: author_user_id
     * </p>
     */
    public Optional<String> getAuthorUserIdAsOptional() {

        if ( this.constructed == false && this.hasAuthorUserId == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorUserId );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * User ID in the target platform (when available, twitter for instance)
     * </p>
     *
     * <p>
     * Schema type: text , name: author_user_id
     * </p>
     */
    public String getAuthorUserId ( String _default ) {

        if ( ! hasAuthorUserId() ) {
            return _default;
        }

        return getAuthorUserId();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorUserId () {
        return this.hasAuthorUserId > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorUserId () {
        this.hasAuthorUserId = 0;
        this.hasModifiedAuthorUserId = 0;
        this.hasDefinedAuthorUserId = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorUserId () {
        return this.hasModifiedAuthorUserId > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorUserId () {
        return this.hasDefinedAuthorUserId;
    }

    public BaseContentMetadata setAuthorGender ( AuthorGender authorGender ) {

        ++this.hasAuthorGender;
        ++this.hasModifiedAuthorGender;

        this.authorGender = authorGender;

        hasDefinedAuthorGender = true;

        return this;

    }

    /**
     * <p>
     * When present, the gender of the author.
     * </p>
     *
     * <p>
     * Schema type: enum , name: author_gender
     * </p>
     */
    public AuthorGender getAuthorGender() {

        if ( this.constructed == false && this.hasAuthorGender == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorGender" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorGender;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * When present, the gender of the author.
     * </p>
     *
     * <p>
     * Schema type: enum , name: author_gender
     * </p>
     */
    public AuthorGender getAuthorGender ( AuthorGender _default ) {

        if ( ! hasAuthorGender() ) {
            return _default;
        }

        return getAuthorGender();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorGender () {
        return this.hasAuthorGender > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorGender () {
        this.hasAuthorGender = 0;
        this.hasModifiedAuthorGender = 0;
        this.hasDefinedAuthorGender = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorGender () {
        return this.hasModifiedAuthorGender > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorGender () {
        return this.hasDefinedAuthorGender;
    }

    public BaseContentMetadata setGeoLocation ( String geoLocation ) {

        ++this.hasGeoLocation;
        ++this.hasModifiedGeoLocation;

        this.geoLocation = geoLocation;

        hasDefinedGeoLocation = true;

        return this;

    }

    /**
     * <p>
     * The human readable location of the source.  Example: 'Washington, DC'
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location
     * </p>
     */
    public String getGeoLocation() {

        if ( this.constructed == false && this.hasGeoLocation == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoLocation" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoLocation;
    }

    /**
     * <p>
     * The human readable location of the source.  Example: 'Washington, DC'
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location
     * </p>
     */
    public Optional<String> getGeoLocationAsOptional() {

        if ( this.constructed == false && this.hasGeoLocation == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoLocation );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The human readable location of the source.  Example: 'Washington, DC'
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location
     * </p>
     */
    public String getGeoLocation ( String _default ) {

        if ( ! hasGeoLocation() ) {
            return _default;
        }

        return getGeoLocation();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoLocation () {
        return this.hasGeoLocation > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoLocation () {
        this.hasGeoLocation = 0;
        this.hasModifiedGeoLocation = 0;
        this.hasDefinedGeoLocation = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoLocation () {
        return this.hasModifiedGeoLocation > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoLocation () {
        return this.hasDefinedGeoLocation;
    }

    public BaseContentMetadata setGeoLocationId ( String geoLocationId ) {

        ++this.hasGeoLocationId;
        ++this.hasModifiedGeoLocationId;

        this.geoLocationId = geoLocationId;

        hasDefinedGeoLocationId = true;

        return this;

    }

    /**
     * <p>
     * The location identifier (if available) for this location.  This is platform specific.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location_id
     * </p>
     */
    public String getGeoLocationId() {

        if ( this.constructed == false && this.hasGeoLocationId == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoLocationId" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoLocationId;
    }

    /**
     * <p>
     * The location identifier (if available) for this location.  This is platform specific.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location_id
     * </p>
     */
    public Optional<String> getGeoLocationIdAsOptional() {

        if ( this.constructed == false && this.hasGeoLocationId == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoLocationId );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The location identifier (if available) for this location.  This is platform specific.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location_id
     * </p>
     */
    public String getGeoLocationId ( String _default ) {

        if ( ! hasGeoLocationId() ) {
            return _default;
        }

        return getGeoLocationId();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoLocationId () {
        return this.hasGeoLocationId > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoLocationId () {
        this.hasGeoLocationId = 0;
        this.hasModifiedGeoLocationId = 0;
        this.hasDefinedGeoLocationId = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoLocationId () {
        return this.hasModifiedGeoLocationId > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoLocationId () {
        return this.hasDefinedGeoLocationId;
    }

    public BaseContentMetadata setGeoFeaturename ( String geoFeaturename ) {

        ++this.hasGeoFeaturename;
        ++this.hasModifiedGeoFeaturename;

        this.geoFeaturename = geoFeaturename;

        hasDefinedGeoFeaturename = true;

        return this;

    }

    /**
     * <p>
     * Name of the feature we're representing.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_featurename
     * </p>
     */
    public String getGeoFeaturename() {

        if ( this.constructed == false && this.hasGeoFeaturename == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoFeaturename" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoFeaturename;
    }

    /**
     * <p>
     * Name of the feature we're representing.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_featurename
     * </p>
     */
    public Optional<String> getGeoFeaturenameAsOptional() {

        if ( this.constructed == false && this.hasGeoFeaturename == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoFeaturename );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Name of the feature we're representing.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_featurename
     * </p>
     */
    public String getGeoFeaturename ( String _default ) {

        if ( ! hasGeoFeaturename() ) {
            return _default;
        }

        return getGeoFeaturename();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoFeaturename () {
        return this.hasGeoFeaturename > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoFeaturename () {
        this.hasGeoFeaturename = 0;
        this.hasModifiedGeoFeaturename = 0;
        this.hasDefinedGeoFeaturename = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoFeaturename () {
        return this.hasModifiedGeoFeaturename > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoFeaturename () {
        return this.hasDefinedGeoFeaturename;
    }

    public BaseContentMetadata setGeoPoint ( String geoPoint ) {

        ++this.hasGeoPoint;
        ++this.hasModifiedGeoPoint;

        this.geoPoint = geoPoint;

        hasDefinedGeoPoint = true;

        return this;

    }

    /**
     * <p>
     * A point contains a single latitude-longitude pair, separated by whitespace.
     * </p>
     *
     * <p>
     * Schema type: geo_point , name: geo_point
     * </p>
     */
    public String getGeoPoint() {

        if ( this.constructed == false && this.hasGeoPoint == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoPoint" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoPoint;
    }

    /**
     * <p>
     * A point contains a single latitude-longitude pair, separated by whitespace.
     * </p>
     *
     * <p>
     * Schema type: geo_point , name: geo_point
     * </p>
     */
    public Optional<String> getGeoPointAsOptional() {

        if ( this.constructed == false && this.hasGeoPoint == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoPoint );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * A point contains a single latitude-longitude pair, separated by whitespace.
     * </p>
     *
     * <p>
     * Schema type: geo_point , name: geo_point
     * </p>
     */
    public String getGeoPoint ( String _default ) {

        if ( ! hasGeoPoint() ) {
            return _default;
        }

        return getGeoPoint();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoPoint () {
        return this.hasGeoPoint > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoPoint () {
        this.hasGeoPoint = 0;
        this.hasModifiedGeoPoint = 0;
        this.hasDefinedGeoPoint = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoPoint () {
        return this.hasModifiedGeoPoint > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoPoint () {
        return this.hasDefinedGeoPoint;
    }

    public BaseContentMetadata setGeoBox ( String geoBox ) {

        ++this.hasGeoBox;
        ++this.hasModifiedGeoBox;

        this.geoBox = geoBox;

        hasDefinedGeoBox = true;

        return this;

    }

    /**
     * <p>
     * A bounding box is a rectangular region, often used to define the extents of a map or a rough area of interest. A box contains two space seperate latitude-longitude pairs, with each pair separated by whitespace. The first pair is the lower corner, the second is the upper corner.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_box
     * </p>
     */
    public String getGeoBox() {

        if ( this.constructed == false && this.hasGeoBox == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoBox" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoBox;
    }

    /**
     * <p>
     * A bounding box is a rectangular region, often used to define the extents of a map or a rough area of interest. A box contains two space seperate latitude-longitude pairs, with each pair separated by whitespace. The first pair is the lower corner, the second is the upper corner.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_box
     * </p>
     */
    public Optional<String> getGeoBoxAsOptional() {

        if ( this.constructed == false && this.hasGeoBox == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoBox );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * A bounding box is a rectangular region, often used to define the extents of a map or a rough area of interest. A box contains two space seperate latitude-longitude pairs, with each pair separated by whitespace. The first pair is the lower corner, the second is the upper corner.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_box
     * </p>
     */
    public String getGeoBox ( String _default ) {

        if ( ! hasGeoBox() ) {
            return _default;
        }

        return getGeoBox();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoBox () {
        return this.hasGeoBox > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoBox () {
        this.hasGeoBox = 0;
        this.hasModifiedGeoBox = 0;
        this.hasDefinedGeoBox = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoBox () {
        return this.hasModifiedGeoBox > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoBox () {
        return this.hasDefinedGeoBox;
    }

    public BaseContentMetadata setGeoNameId ( String geoNameId ) {

        ++this.hasGeoNameId;
        ++this.hasModifiedGeoNameId;

        this.geoNameId = geoNameId;

        hasDefinedGeoNameId = true;

        return this;

    }

    /**
     * <p>
     * Id in geonames database.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name_id
     * </p>
     */
    public String getGeoNameId() {

        if ( this.constructed == false && this.hasGeoNameId == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoNameId" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoNameId;
    }

    /**
     * <p>
     * Id in geonames database.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name_id
     * </p>
     */
    public Optional<String> getGeoNameIdAsOptional() {

        if ( this.constructed == false && this.hasGeoNameId == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoNameId );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Id in geonames database.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name_id
     * </p>
     */
    public String getGeoNameId ( String _default ) {

        if ( ! hasGeoNameId() ) {
            return _default;
        }

        return getGeoNameId();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoNameId () {
        return this.hasGeoNameId > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoNameId () {
        this.hasGeoNameId = 0;
        this.hasModifiedGeoNameId = 0;
        this.hasDefinedGeoNameId = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoNameId () {
        return this.hasModifiedGeoNameId > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoNameId () {
        return this.hasDefinedGeoNameId;
    }

    public BaseContentMetadata setGeoName ( String geoName ) {

        ++this.hasGeoName;
        ++this.hasModifiedGeoName;

        this.geoName = geoName;

        hasDefinedGeoName = true;

        return this;

    }

    /**
     * <p>
     * The human readable location including its parent locations
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name
     * </p>
     */
    public String getGeoName() {

        if ( this.constructed == false && this.hasGeoName == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoName" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoName;
    }

    /**
     * <p>
     * The human readable location including its parent locations
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name
     * </p>
     */
    public Optional<String> getGeoNameAsOptional() {

        if ( this.constructed == false && this.hasGeoName == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoName );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The human readable location including its parent locations
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name
     * </p>
     */
    public String getGeoName ( String _default ) {

        if ( ! hasGeoName() ) {
            return _default;
        }

        return getGeoName();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoName () {
        return this.hasGeoName > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoName () {
        this.hasGeoName = 0;
        this.hasModifiedGeoName = 0;
        this.hasDefinedGeoName = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoName () {
        return this.hasModifiedGeoName > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoName () {
        return this.hasDefinedGeoName;
    }

    public BaseContentMetadata setGeoCountry ( String geoCountry ) {

        ++this.hasGeoCountry;
        ++this.hasModifiedGeoCountry;

        this.geoCountry = geoCountry;

        hasDefinedGeoCountry = true;

        return this;

    }

    /**
     * <p>
     * The human readable country derived from geo_location.  These are represented as ISO 3166-1 alpha-2: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_country
     * </p>
     */
    public String getGeoCountry() {

        if ( this.constructed == false && this.hasGeoCountry == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoCountry" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoCountry;
    }

    /**
     * <p>
     * The human readable country derived from geo_location.  These are represented as ISO 3166-1 alpha-2: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_country
     * </p>
     */
    public Optional<String> getGeoCountryAsOptional() {

        if ( this.constructed == false && this.hasGeoCountry == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoCountry );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The human readable country derived from geo_location.  These are represented as ISO 3166-1 alpha-2: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_country
     * </p>
     */
    public String getGeoCountry ( String _default ) {

        if ( ! hasGeoCountry() ) {
            return _default;
        }

        return getGeoCountry();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoCountry () {
        return this.hasGeoCountry > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoCountry () {
        this.hasGeoCountry = 0;
        this.hasModifiedGeoCountry = 0;
        this.hasDefinedGeoCountry = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoCountry () {
        return this.hasModifiedGeoCountry > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoCountry () {
        return this.hasDefinedGeoCountry;
    }

    public BaseContentMetadata setGeoState ( String geoState ) {

        ++this.hasGeoState;
        ++this.hasModifiedGeoState;

        this.geoState = geoState;

        hasDefinedGeoState = true;

        return this;

    }

    /**
     * <p>
     * The human readable state derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_state
     * </p>
     */
    public String getGeoState() {

        if ( this.constructed == false && this.hasGeoState == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoState" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoState;
    }

    /**
     * <p>
     * The human readable state derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_state
     * </p>
     */
    public Optional<String> getGeoStateAsOptional() {

        if ( this.constructed == false && this.hasGeoState == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoState );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The human readable state derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_state
     * </p>
     */
    public String getGeoState ( String _default ) {

        if ( ! hasGeoState() ) {
            return _default;
        }

        return getGeoState();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoState () {
        return this.hasGeoState > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoState () {
        this.hasGeoState = 0;
        this.hasModifiedGeoState = 0;
        this.hasDefinedGeoState = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoState () {
        return this.hasModifiedGeoState > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoState () {
        return this.hasDefinedGeoState;
    }

    public BaseContentMetadata setGeoCity ( String geoCity ) {

        ++this.hasGeoCity;
        ++this.hasModifiedGeoCity;

        this.geoCity = geoCity;

        hasDefinedGeoCity = true;

        return this;

    }

    /**
     * <p>
     * The human readable city derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_city
     * </p>
     */
    public String getGeoCity() {

        if ( this.constructed == false && this.hasGeoCity == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoCity" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoCity;
    }

    /**
     * <p>
     * The human readable city derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_city
     * </p>
     */
    public Optional<String> getGeoCityAsOptional() {

        if ( this.constructed == false && this.hasGeoCity == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoCity );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The human readable city derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_city
     * </p>
     */
    public String getGeoCity ( String _default ) {

        if ( ! hasGeoCity() ) {
            return _default;
        }

        return getGeoCity();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoCity () {
        return this.hasGeoCity > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoCity () {
        this.hasGeoCity = 0;
        this.hasModifiedGeoCity = 0;
        this.hasDefinedGeoCity = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoCity () {
        return this.hasModifiedGeoCity > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoCity () {
        return this.hasDefinedGeoCity;
    }

    public BaseContentMetadata setRatingValue ( String ratingValue ) {

        ++this.hasRatingValue;
        ++this.hasModifiedRatingValue;

        this.ratingValue = ratingValue;

        hasDefinedRatingValue = true;

        return this;

    }

    /**
     * <p>
     * The rating for this item provided by the user. 
     * </p>
     *
     * <p>
     * Schema type: text , name: rating_value
     * </p>
     */
    public String getRatingValue() {

        if ( this.constructed == false && this.hasRatingValue == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.ratingValue" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.ratingValue;
    }

    /**
     * <p>
     * The rating for this item provided by the user. 
     * </p>
     *
     * <p>
     * Schema type: text , name: rating_value
     * </p>
     */
    public Optional<String> getRatingValueAsOptional() {

        if ( this.constructed == false && this.hasRatingValue == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.ratingValue );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The rating for this item provided by the user. 
     * </p>
     *
     * <p>
     * Schema type: text , name: rating_value
     * </p>
     */
    public String getRatingValue ( String _default ) {

        if ( ! hasRatingValue() ) {
            return _default;
        }

        return getRatingValue();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasRatingValue () {
        return this.hasRatingValue > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearRatingValue () {
        this.hasRatingValue = 0;
        this.hasModifiedRatingValue = 0;
        this.hasDefinedRatingValue = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedRatingValue () {
        return this.hasModifiedRatingValue > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedRatingValue () {
        return this.hasDefinedRatingValue;
    }

    public BaseContentMetadata setFaviconSrc ( String faviconSrc ) {

        ++this.hasFaviconSrc;
        ++this.hasModifiedFaviconSrc;

        this.faviconSrc = faviconSrc;

        hasDefinedFaviconSrc = true;

        return this;

    }

    /**
     * <p>
     * The URL to the favicon which represents this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: favicon_src
     * </p>
     */
    public String getFaviconSrc() {

        if ( this.constructed == false && this.hasFaviconSrc == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.faviconSrc" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.faviconSrc;
    }

    /**
     * <p>
     * The URL to the favicon which represents this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: favicon_src
     * </p>
     */
    public Optional<String> getFaviconSrcAsOptional() {

        if ( this.constructed == false && this.hasFaviconSrc == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.faviconSrc );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The URL to the favicon which represents this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: favicon_src
     * </p>
     */
    public String getFaviconSrc ( String _default ) {

        if ( ! hasFaviconSrc() ) {
            return _default;
        }

        return getFaviconSrc();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasFaviconSrc () {
        return this.hasFaviconSrc > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearFaviconSrc () {
        this.hasFaviconSrc = 0;
        this.hasModifiedFaviconSrc = 0;
        this.hasDefinedFaviconSrc = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedFaviconSrc () {
        return this.hasModifiedFaviconSrc > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedFaviconSrc () {
        return this.hasDefinedFaviconSrc;
    }

    public BaseContentMetadata setFaviconWidth ( int faviconWidth ) {

        ++this.hasFaviconWidth;
        ++this.hasModifiedFaviconWidth;

        this.faviconWidth = faviconWidth;

        hasDefinedFaviconWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_width
     * </p>
     */
    public int getFaviconWidth() {

        if ( this.constructed == false && this.hasFaviconWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.faviconWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.faviconWidth;
    }

    /**
     * <p>
     * The width of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_width
     * </p>
     */
    public Optional<Integer> getFaviconWidthAsOptional() {

        if ( this.constructed == false && this.hasFaviconWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.faviconWidth );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The width of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_width
     * </p>
     */
    public int getFaviconWidth ( int _default ) {

        if ( ! hasFaviconWidth() ) {
            return _default;
        }

        return getFaviconWidth();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasFaviconWidth () {
        return this.hasFaviconWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearFaviconWidth () {
        this.hasFaviconWidth = 0;
        this.hasModifiedFaviconWidth = 0;
        this.hasDefinedFaviconWidth = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedFaviconWidth () {
        return this.hasModifiedFaviconWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedFaviconWidth () {
        return this.hasDefinedFaviconWidth;
    }

    public BaseContentMetadata setFaviconHeight ( int faviconHeight ) {

        ++this.hasFaviconHeight;
        ++this.hasModifiedFaviconHeight;

        this.faviconHeight = faviconHeight;

        hasDefinedFaviconHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_height
     * </p>
     */
    public int getFaviconHeight() {

        if ( this.constructed == false && this.hasFaviconHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.faviconHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.faviconHeight;
    }

    /**
     * <p>
     * The height of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_height
     * </p>
     */
    public Optional<Integer> getFaviconHeightAsOptional() {

        if ( this.constructed == false && this.hasFaviconHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.faviconHeight );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The height of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_height
     * </p>
     */
    public int getFaviconHeight ( int _default ) {

        if ( ! hasFaviconHeight() ) {
            return _default;
        }

        return getFaviconHeight();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasFaviconHeight () {
        return this.hasFaviconHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearFaviconHeight () {
        this.hasFaviconHeight = 0;
        this.hasModifiedFaviconHeight = 0;
        this.hasDefinedFaviconHeight = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedFaviconHeight () {
        return this.hasModifiedFaviconHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedFaviconHeight () {
        return this.hasDefinedFaviconHeight;
    }

    public BaseContentMetadata setImageSrc ( String imageSrc ) {

        ++this.hasImageSrc;
        ++this.hasModifiedImageSrc;

        this.imageSrc = imageSrc;

        hasDefinedImageSrc = true;

        return this;

    }

    /**
     * <p>
     * The URL to the img which represents this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: image_src
     * </p>
     */
    public String getImageSrc() {

        if ( this.constructed == false && this.hasImageSrc == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.imageSrc" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.imageSrc;
    }

    /**
     * <p>
     * The URL to the img which represents this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: image_src
     * </p>
     */
    public Optional<String> getImageSrcAsOptional() {

        if ( this.constructed == false && this.hasImageSrc == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.imageSrc );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The URL to the img which represents this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: image_src
     * </p>
     */
    public String getImageSrc ( String _default ) {

        if ( ! hasImageSrc() ) {
            return _default;
        }

        return getImageSrc();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasImageSrc () {
        return this.hasImageSrc > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearImageSrc () {
        this.hasImageSrc = 0;
        this.hasModifiedImageSrc = 0;
        this.hasDefinedImageSrc = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedImageSrc () {
        return this.hasModifiedImageSrc > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedImageSrc () {
        return this.hasDefinedImageSrc;
    }

    public BaseContentMetadata setImageWidth ( int imageWidth ) {

        ++this.hasImageWidth;
        ++this.hasModifiedImageWidth;

        this.imageWidth = imageWidth;

        hasDefinedImageWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_width
     * </p>
     */
    public int getImageWidth() {

        if ( this.constructed == false && this.hasImageWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.imageWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.imageWidth;
    }

    /**
     * <p>
     * The width of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_width
     * </p>
     */
    public Optional<Integer> getImageWidthAsOptional() {

        if ( this.constructed == false && this.hasImageWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.imageWidth );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The width of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_width
     * </p>
     */
    public int getImageWidth ( int _default ) {

        if ( ! hasImageWidth() ) {
            return _default;
        }

        return getImageWidth();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasImageWidth () {
        return this.hasImageWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearImageWidth () {
        this.hasImageWidth = 0;
        this.hasModifiedImageWidth = 0;
        this.hasDefinedImageWidth = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedImageWidth () {
        return this.hasModifiedImageWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedImageWidth () {
        return this.hasDefinedImageWidth;
    }

    public BaseContentMetadata setImageHeight ( int imageHeight ) {

        ++this.hasImageHeight;
        ++this.hasModifiedImageHeight;

        this.imageHeight = imageHeight;

        hasDefinedImageHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_height
     * </p>
     */
    public int getImageHeight() {

        if ( this.constructed == false && this.hasImageHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.imageHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.imageHeight;
    }

    /**
     * <p>
     * The height of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_height
     * </p>
     */
    public Optional<Integer> getImageHeightAsOptional() {

        if ( this.constructed == false && this.hasImageHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.imageHeight );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The height of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_height
     * </p>
     */
    public int getImageHeight ( int _default ) {

        if ( ! hasImageHeight() ) {
            return _default;
        }

        return getImageHeight();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasImageHeight () {
        return this.hasImageHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearImageHeight () {
        this.hasImageHeight = 0;
        this.hasModifiedImageHeight = 0;
        this.hasDefinedImageHeight = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedImageHeight () {
        return this.hasModifiedImageHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedImageHeight () {
        return this.hasDefinedImageHeight;
    }

    public BaseContentMetadata setShared ( boolean shared ) {

        ++this.hasShared;
        ++this.hasModifiedShared;

        this.shared = shared;

        hasDefinedShared = true;

        return this;

    }

    /**
     * <p>
     * True when this source was not published by the original user but actually shared from someone the source follows.  On microblogging platforms this is a retweet.  On others it's a shared post. 
     * </p>
     *
     * <p>
     * Schema type: boolean , name: shared
     * </p>
     */
    public boolean getShared() {

        if ( this.constructed == false && this.hasShared == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.shared" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.shared;
    }

    /**
     * <p>
     * True when this source was not published by the original user but actually shared from someone the source follows.  On microblogging platforms this is a retweet.  On others it's a shared post. 
     * </p>
     *
     * <p>
     * Schema type: boolean , name: shared
     * </p>
     */
    public Optional<Boolean> getSharedAsOptional() {

        if ( this.constructed == false && this.hasShared == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.shared );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * True when this source was not published by the original user but actually shared from someone the source follows.  On microblogging platforms this is a retweet.  On others it's a shared post. 
     * </p>
     *
     * <p>
     * Schema type: boolean , name: shared
     * </p>
     */
    public boolean getShared ( boolean _default ) {

        if ( ! hasShared() ) {
            return _default;
        }

        return getShared();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasShared () {
        return this.hasShared > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearShared () {
        this.hasShared = 0;
        this.hasModifiedShared = 0;
        this.hasDefinedShared = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedShared () {
        return this.hasModifiedShared > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedShared () {
        return this.hasDefinedShared;
    }

    public BaseContentMetadata setSharedProfileLink ( String sharedProfileLink ) {

        ++this.hasSharedProfileLink;
        ++this.hasModifiedSharedProfileLink;

        this.sharedProfileLink = sharedProfileLink;

        hasDefinedSharedProfileLink = true;

        return this;

    }

    /**
     * <p>
     * The link to the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_link
     * </p>
     */
    public String getSharedProfileLink() {

        if ( this.constructed == false && this.hasSharedProfileLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedProfileLink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedProfileLink;
    }

    /**
     * <p>
     * The link to the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_link
     * </p>
     */
    public Optional<String> getSharedProfileLinkAsOptional() {

        if ( this.constructed == false && this.hasSharedProfileLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedProfileLink );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The link to the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_link
     * </p>
     */
    public String getSharedProfileLink ( String _default ) {

        if ( ! hasSharedProfileLink() ) {
            return _default;
        }

        return getSharedProfileLink();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedProfileLink () {
        return this.hasSharedProfileLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedProfileLink () {
        this.hasSharedProfileLink = 0;
        this.hasModifiedSharedProfileLink = 0;
        this.hasDefinedSharedProfileLink = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedProfileLink () {
        return this.hasModifiedSharedProfileLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedProfileLink () {
        return this.hasDefinedSharedProfileLink;
    }

    public BaseContentMetadata setSharedProfileTitle ( String sharedProfileTitle ) {

        ++this.hasSharedProfileTitle;
        ++this.hasModifiedSharedProfileTitle;

        this.sharedProfileTitle = sharedProfileTitle;

        hasDefinedSharedProfileTitle = true;

        return this;

    }

    /**
     * <p>
     * The title of the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_title
     * </p>
     */
    public String getSharedProfileTitle() {

        if ( this.constructed == false && this.hasSharedProfileTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedProfileTitle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedProfileTitle;
    }

    /**
     * <p>
     * The title of the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_title
     * </p>
     */
    public Optional<String> getSharedProfileTitleAsOptional() {

        if ( this.constructed == false && this.hasSharedProfileTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedProfileTitle );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The title of the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_title
     * </p>
     */
    public String getSharedProfileTitle ( String _default ) {

        if ( ! hasSharedProfileTitle() ) {
            return _default;
        }

        return getSharedProfileTitle();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedProfileTitle () {
        return this.hasSharedProfileTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedProfileTitle () {
        this.hasSharedProfileTitle = 0;
        this.hasModifiedSharedProfileTitle = 0;
        this.hasDefinedSharedProfileTitle = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedProfileTitle () {
        return this.hasModifiedSharedProfileTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedProfileTitle () {
        return this.hasDefinedSharedProfileTitle;
    }

    public BaseContentMetadata setReplied ( boolean replied ) {

        ++this.hasReplied;
        ++this.hasModifiedReplied;

        this.replied = replied;

        hasDefinedReplied = true;

        return this;

    }

    /**
     * <p>
     * True when this source was a reply, false otherwhise
     * </p>
     *
     * <p>
     * Schema type: boolean , name: replied
     * </p>
     */
    public boolean getReplied() {

        if ( this.constructed == false && this.hasReplied == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.replied" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.replied;
    }

    /**
     * <p>
     * True when this source was a reply, false otherwhise
     * </p>
     *
     * <p>
     * Schema type: boolean , name: replied
     * </p>
     */
    public Optional<Boolean> getRepliedAsOptional() {

        if ( this.constructed == false && this.hasReplied == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.replied );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * True when this source was a reply, false otherwhise
     * </p>
     *
     * <p>
     * Schema type: boolean , name: replied
     * </p>
     */
    public boolean getReplied ( boolean _default ) {

        if ( ! hasReplied() ) {
            return _default;
        }

        return getReplied();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasReplied () {
        return this.hasReplied > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearReplied () {
        this.hasReplied = 0;
        this.hasModifiedReplied = 0;
        this.hasDefinedReplied = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedReplied () {
        return this.hasModifiedReplied > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedReplied () {
        return this.hasDefinedReplied;
    }

    public BaseContentMetadata setRepliedProfileLink ( String repliedProfileLink ) {

        ++this.hasRepliedProfileLink;
        ++this.hasModifiedRepliedProfileLink;

        this.repliedProfileLink = repliedProfileLink;

        hasDefinedRepliedProfileLink = true;

        return this;

    }

    /**
     * <p>
     * The link to the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_link
     * </p>
     */
    public String getRepliedProfileLink() {

        if ( this.constructed == false && this.hasRepliedProfileLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.repliedProfileLink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.repliedProfileLink;
    }

    /**
     * <p>
     * The link to the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_link
     * </p>
     */
    public Optional<String> getRepliedProfileLinkAsOptional() {

        if ( this.constructed == false && this.hasRepliedProfileLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.repliedProfileLink );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The link to the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_link
     * </p>
     */
    public String getRepliedProfileLink ( String _default ) {

        if ( ! hasRepliedProfileLink() ) {
            return _default;
        }

        return getRepliedProfileLink();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasRepliedProfileLink () {
        return this.hasRepliedProfileLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearRepliedProfileLink () {
        this.hasRepliedProfileLink = 0;
        this.hasModifiedRepliedProfileLink = 0;
        this.hasDefinedRepliedProfileLink = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedRepliedProfileLink () {
        return this.hasModifiedRepliedProfileLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedRepliedProfileLink () {
        return this.hasDefinedRepliedProfileLink;
    }

    public BaseContentMetadata setRepliedProfileTitle ( String repliedProfileTitle ) {

        ++this.hasRepliedProfileTitle;
        ++this.hasModifiedRepliedProfileTitle;

        this.repliedProfileTitle = repliedProfileTitle;

        hasDefinedRepliedProfileTitle = true;

        return this;

    }

    /**
     * <p>
     * The title of the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_title
     * </p>
     */
    public String getRepliedProfileTitle() {

        if ( this.constructed == false && this.hasRepliedProfileTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.repliedProfileTitle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.repliedProfileTitle;
    }

    /**
     * <p>
     * The title of the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_title
     * </p>
     */
    public Optional<String> getRepliedProfileTitleAsOptional() {

        if ( this.constructed == false && this.hasRepliedProfileTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.repliedProfileTitle );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The title of the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_title
     * </p>
     */
    public String getRepliedProfileTitle ( String _default ) {

        if ( ! hasRepliedProfileTitle() ) {
            return _default;
        }

        return getRepliedProfileTitle();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasRepliedProfileTitle () {
        return this.hasRepliedProfileTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearRepliedProfileTitle () {
        this.hasRepliedProfileTitle = 0;
        this.hasModifiedRepliedProfileTitle = 0;
        this.hasDefinedRepliedProfileTitle = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedRepliedProfileTitle () {
        return this.hasModifiedRepliedProfileTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedRepliedProfileTitle () {
        return this.hasDefinedRepliedProfileTitle;
    }

    public BaseContentMetadata setCard ( Card card ) {

        ++this.hasCard;
        ++this.hasModifiedCard;

        this.card = card;

        hasDefinedCard = true;

        return this;

    }

    /**
     * <p>
     * When present, the type of card that can be used to display this content within web applications
     * </p>
     *
     * <p>
     * Schema type: enum , name: card
     * </p>
     */
    public Card getCard() {

        if ( this.constructed == false && this.hasCard == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.card" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.card;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * When present, the type of card that can be used to display this content within web applications
     * </p>
     *
     * <p>
     * Schema type: enum , name: card
     * </p>
     */
    public Card getCard ( Card _default ) {

        if ( ! hasCard() ) {
            return _default;
        }

        return getCard();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasCard () {
        return this.hasCard > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearCard () {
        this.hasCard = 0;
        this.hasModifiedCard = 0;
        this.hasDefinedCard = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedCard () {
        return this.hasModifiedCard > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedCard () {
        return this.hasDefinedCard;
    }

    public BaseContentMetadata setVideoPlayer ( String videoPlayer ) {

        ++this.hasVideoPlayer;
        ++this.hasModifiedVideoPlayer;

        this.videoPlayer = videoPlayer;

        hasDefinedVideoPlayer = true;

        return this;

    }

    /**
     * <p>
     * The URL to an iframe which can be embedded to play this video.  HTTPS URL to iframe player. This must be a HTTPS URL which does not generate active mixed content warnings in a web browser
     * </p>
     *
     * <p>
     * Schema type: text , name: video_player
     * </p>
     */
    public String getVideoPlayer() {

        if ( this.constructed == false && this.hasVideoPlayer == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.videoPlayer" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.videoPlayer;
    }

    /**
     * <p>
     * The URL to an iframe which can be embedded to play this video.  HTTPS URL to iframe player. This must be a HTTPS URL which does not generate active mixed content warnings in a web browser
     * </p>
     *
     * <p>
     * Schema type: text , name: video_player
     * </p>
     */
    public Optional<String> getVideoPlayerAsOptional() {

        if ( this.constructed == false && this.hasVideoPlayer == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.videoPlayer );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The URL to an iframe which can be embedded to play this video.  HTTPS URL to iframe player. This must be a HTTPS URL which does not generate active mixed content warnings in a web browser
     * </p>
     *
     * <p>
     * Schema type: text , name: video_player
     * </p>
     */
    public String getVideoPlayer ( String _default ) {

        if ( ! hasVideoPlayer() ) {
            return _default;
        }

        return getVideoPlayer();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasVideoPlayer () {
        return this.hasVideoPlayer > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearVideoPlayer () {
        this.hasVideoPlayer = 0;
        this.hasModifiedVideoPlayer = 0;
        this.hasDefinedVideoPlayer = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedVideoPlayer () {
        return this.hasModifiedVideoPlayer > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedVideoPlayer () {
        return this.hasDefinedVideoPlayer;
    }

    public BaseContentMetadata setVideoPlayerWidth ( int videoPlayerWidth ) {

        ++this.hasVideoPlayerWidth;
        ++this.hasModifiedVideoPlayerWidth;

        this.videoPlayerWidth = videoPlayerWidth;

        hasDefinedVideoPlayerWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_width
     * </p>
     */
    public int getVideoPlayerWidth() {

        if ( this.constructed == false && this.hasVideoPlayerWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.videoPlayerWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.videoPlayerWidth;
    }

    /**
     * <p>
     * The width of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_width
     * </p>
     */
    public Optional<Integer> getVideoPlayerWidthAsOptional() {

        if ( this.constructed == false && this.hasVideoPlayerWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.videoPlayerWidth );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The width of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_width
     * </p>
     */
    public int getVideoPlayerWidth ( int _default ) {

        if ( ! hasVideoPlayerWidth() ) {
            return _default;
        }

        return getVideoPlayerWidth();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasVideoPlayerWidth () {
        return this.hasVideoPlayerWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearVideoPlayerWidth () {
        this.hasVideoPlayerWidth = 0;
        this.hasModifiedVideoPlayerWidth = 0;
        this.hasDefinedVideoPlayerWidth = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedVideoPlayerWidth () {
        return this.hasModifiedVideoPlayerWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedVideoPlayerWidth () {
        return this.hasDefinedVideoPlayerWidth;
    }

    public BaseContentMetadata setVideoPlayerHeight ( int videoPlayerHeight ) {

        ++this.hasVideoPlayerHeight;
        ++this.hasModifiedVideoPlayerHeight;

        this.videoPlayerHeight = videoPlayerHeight;

        hasDefinedVideoPlayerHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_height
     * </p>
     */
    public int getVideoPlayerHeight() {

        if ( this.constructed == false && this.hasVideoPlayerHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.videoPlayerHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.videoPlayerHeight;
    }

    /**
     * <p>
     * The height of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_height
     * </p>
     */
    public Optional<Integer> getVideoPlayerHeightAsOptional() {

        if ( this.constructed == false && this.hasVideoPlayerHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.videoPlayerHeight );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The height of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_height
     * </p>
     */
    public int getVideoPlayerHeight ( int _default ) {

        if ( ! hasVideoPlayerHeight() ) {
            return _default;
        }

        return getVideoPlayerHeight();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasVideoPlayerHeight () {
        return this.hasVideoPlayerHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearVideoPlayerHeight () {
        this.hasVideoPlayerHeight = 0;
        this.hasModifiedVideoPlayerHeight = 0;
        this.hasDefinedVideoPlayerHeight = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedVideoPlayerHeight () {
        return this.hasModifiedVideoPlayerHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedVideoPlayerHeight () {
        return this.hasDefinedVideoPlayerHeight;
    }

    public BaseContentMetadata setType ( Type type ) {

        ++this.hasType;
        ++this.hasModifiedType;

        this.type = type;

        hasDefinedType = true;

        return this;

    }

    /**
     * <p>
     * The type of this content as either a POST or a COMMENT.  This allows us to index posts and comments through the same API.
     * </p>
     *
     * <p>
     * Schema type: enum , name: type
     * </p>
     */
    public Type getType() {

        if ( this.constructed == false && this.hasType == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.type" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.type;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The type of this content as either a POST or a COMMENT.  This allows us to index posts and comments through the same API.
     * </p>
     *
     * <p>
     * Schema type: enum , name: type
     * </p>
     */
    public Type getType ( Type _default ) {

        if ( ! hasType() ) {
            return _default;
        }

        return getType();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasType () {
        return this.hasType > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearType () {
        this.hasType = 0;
        this.hasModifiedType = 0;
        this.hasDefinedType = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedType () {
        return this.hasModifiedType > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedType () {
        return this.hasDefinedType;
    }

    public BaseContentMetadata setSentiment ( Sentiment sentiment ) {

        ++this.hasSentiment;
        ++this.hasModifiedSentiment;

        this.sentiment = sentiment;

        hasDefinedSentiment = true;

        return this;

    }

    /**
     * <p>
     * The overall sentiment for this content
     * </p>
     *
     * <p>
     * Schema type: enum , name: sentiment
     * </p>
     */
    public Sentiment getSentiment() {

        if ( this.constructed == false && this.hasSentiment == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sentiment" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sentiment;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The overall sentiment for this content
     * </p>
     *
     * <p>
     * Schema type: enum , name: sentiment
     * </p>
     */
    public Sentiment getSentiment ( Sentiment _default ) {

        if ( ! hasSentiment() ) {
            return _default;
        }

        return getSentiment();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSentiment () {
        return this.hasSentiment > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSentiment () {
        this.hasSentiment = 0;
        this.hasModifiedSentiment = 0;
        this.hasDefinedSentiment = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSentiment () {
        return this.hasModifiedSentiment > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSentiment () {
        return this.hasDefinedSentiment;
    }

    public BaseContentMetadata setLang ( String lang ) {

        ++this.hasLang;
        ++this.hasModifiedLang;

        this.lang = lang;

        hasDefinedLang = true;

        return this;

    }

    /**
     * <p>
     * ISO language code for this source.  All our language codes are ISO 639 two letter lang codes. We use the special lang code of U when we are unable to determine the language from the underlying text - usually because we don't have enough data.
     * </p>
     *
     * <p>
     * Schema type: ascii , name: lang
     * </p>
     */
    public String getLang() {

        if ( this.constructed == false && this.hasLang == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.lang" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.lang;
    }

    /**
     * <p>
     * ISO language code for this source.  All our language codes are ISO 639 two letter lang codes. We use the special lang code of U when we are unable to determine the language from the underlying text - usually because we don't have enough data.
     * </p>
     *
     * <p>
     * Schema type: ascii , name: lang
     * </p>
     */
    public Optional<String> getLangAsOptional() {

        if ( this.constructed == false && this.hasLang == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.lang );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * ISO language code for this source.  All our language codes are ISO 639 two letter lang codes. We use the special lang code of U when we are unable to determine the language from the underlying text - usually because we don't have enough data.
     * </p>
     *
     * <p>
     * Schema type: ascii , name: lang
     * </p>
     */
    public String getLang ( String _default ) {

        if ( ! hasLang() ) {
            return _default;
        }

        return getLang();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLang () {
        return this.hasLang > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLang () {
        this.hasLang = 0;
        this.hasModifiedLang = 0;
        this.hasDefinedLang = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLang () {
        return this.hasModifiedLang > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLang () {
        return this.hasDefinedLang;
    }

    public BaseContentMetadata setCategories ( Map<String,Double> categories ) {

        ++this.hasCategories;
        ++this.hasModifiedCategories;

        this.categories = categories;

        hasDefinedCategories = true;

        return this;

    }

    /**
     * <p>
     * Provides a map between algorithmically determined categories (entertainment, politics, technology, science, sports, business, health) and their probabilities.  The probabilities are between 0.0 and 1.0 and if you sum them all they will equal 1.0.  
     * </p>
     *
     * <p>
     * Schema type: map&lt;ascii,double&gt; , name: categories
     * </p>
     */
    public Map<String,Double> getCategories() {

        if ( this.constructed == false && this.hasCategories == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.categories" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.categories;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Provides a map between algorithmically determined categories (entertainment, politics, technology, science, sports, business, health) and their probabilities.  The probabilities are between 0.0 and 1.0 and if you sum them all they will equal 1.0.  
     * </p>
     *
     * <p>
     * Schema type: map&lt;ascii,double&gt; , name: categories
     * </p>
     */
    public Map<String,Double> getCategories ( Map<String,Double> _default ) {

        if ( ! hasCategories() ) {
            return _default;
        }

        return getCategories();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasCategories () {
        return this.hasCategories > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearCategories () {
        this.hasCategories = 0;
        this.hasModifiedCategories = 0;
        this.hasDefinedCategories = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedCategories () {
        return this.hasModifiedCategories > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedCategories () {
        return this.hasDefinedCategories;
    }

    public BaseContentMetadata setDuplicates ( Map<Long,Double> duplicates ) {

        ++this.hasDuplicates;
        ++this.hasModifiedDuplicates;

        this.duplicates = duplicates;

        hasDefinedDuplicates = true;

        return this;

    }

    /**
     * <p>
     * Provides data on previously posted documents which are duplicates of this document.  Keys are sequence values for the documents and the is a double between 0.0 and 1.0 where 0.0 is no duplication and 1.0 is full duplication
     * </p>
     *
     * <p>
     * Schema type: map&lt;bigint,double&gt; , name: duplicates
     * </p>
     */
    public Map<Long,Double> getDuplicates() {

        if ( this.constructed == false && this.hasDuplicates == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.duplicates" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.duplicates;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Provides data on previously posted documents which are duplicates of this document.  Keys are sequence values for the documents and the is a double between 0.0 and 1.0 where 0.0 is no duplication and 1.0 is full duplication
     * </p>
     *
     * <p>
     * Schema type: map&lt;bigint,double&gt; , name: duplicates
     * </p>
     */
    public Map<Long,Double> getDuplicates ( Map<Long,Double> _default ) {

        if ( ! hasDuplicates() ) {
            return _default;
        }

        return getDuplicates();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDuplicates () {
        return this.hasDuplicates > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDuplicates () {
        this.hasDuplicates = 0;
        this.hasModifiedDuplicates = 0;
        this.hasDefinedDuplicates = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDuplicates () {
        return this.hasModifiedDuplicates > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDuplicates () {
        return this.hasDefinedDuplicates;
    }

    public BaseContentMetadata setDuplicatesCount ( int duplicatesCount ) {

        ++this.hasDuplicatesCount;
        ++this.hasModifiedDuplicatesCount;

        this.duplicatesCount = duplicatesCount;

        hasDefinedDuplicatesCount = true;

        return this;

    }

    /**
     * <p>
     * The total number of duplicates.
     * </p>
     *
     * <p>
     * Schema type: int , name: duplicates_count
     * </p>
     */
    public int getDuplicatesCount() {

        if ( this.constructed == false && this.hasDuplicatesCount == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.duplicatesCount" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.duplicatesCount;
    }

    /**
     * <p>
     * The total number of duplicates.
     * </p>
     *
     * <p>
     * Schema type: int , name: duplicates_count
     * </p>
     */
    public Optional<Integer> getDuplicatesCountAsOptional() {

        if ( this.constructed == false && this.hasDuplicatesCount == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.duplicatesCount );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The total number of duplicates.
     * </p>
     *
     * <p>
     * Schema type: int , name: duplicates_count
     * </p>
     */
    public int getDuplicatesCount ( int _default ) {

        if ( ! hasDuplicatesCount() ) {
            return _default;
        }

        return getDuplicatesCount();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDuplicatesCount () {
        return this.hasDuplicatesCount > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDuplicatesCount () {
        this.hasDuplicatesCount = 0;
        this.hasModifiedDuplicatesCount = 0;
        this.hasDefinedDuplicatesCount = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDuplicatesCount () {
        return this.hasModifiedDuplicatesCount > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDuplicatesCount () {
        return this.hasDefinedDuplicatesCount;
    }

    public BaseContentMetadata setClassifications ( Map<String,Double> classifications ) {

        ++this.hasClassifications;
        ++this.hasModifiedClassifications;

        this.classifications = classifications;

        hasDefinedClassifications = true;

        return this;

    }

    /**
     * <p>
     * Provides a map between algorithmically determined classifications driven by customers.  The keys are keys given to customers identify their classification and the value is the probability of that classification.  The values DO NOT sum to 1.0 as there may be multiple classifications here.
     * </p>
     *
     * <p>
     * Schema type: map&lt;ascii,double&gt; , name: classifications
     * </p>
     */
    public Map<String,Double> getClassifications() {

        if ( this.constructed == false && this.hasClassifications == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.classifications" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.classifications;
    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * Provides a map between algorithmically determined classifications driven by customers.  The keys are keys given to customers identify their classification and the value is the probability of that classification.  The values DO NOT sum to 1.0 as there may be multiple classifications here.
     * </p>
     *
     * <p>
     * Schema type: map&lt;ascii,double&gt; , name: classifications
     * </p>
     */
    public Map<String,Double> getClassifications ( Map<String,Double> _default ) {

        if ( ! hasClassifications() ) {
            return _default;
        }

        return getClassifications();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasClassifications () {
        return this.hasClassifications > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearClassifications () {
        this.hasClassifications = 0;
        this.hasModifiedClassifications = 0;
        this.hasDefinedClassifications = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedClassifications () {
        return this.hasModifiedClassifications > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedClassifications () {
        return this.hasDefinedClassifications;
    }

    public BaseContentMetadata setParentHashcode ( String parentHashcode ) {

        ++this.hasParentHashcode;
        ++this.hasModifiedParentHashcode;

        this.parentHashcode = parentHashcode;

        hasDefinedParentHashcode = true;

        return this;

    }

    /**
     * <p>
     * See content.hashcode
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_hashcode
     * </p>
     */
    public String getParentHashcode() {

        if ( this.constructed == false && this.hasParentHashcode == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentHashcode" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentHashcode;
    }

    /**
     * <p>
     * See content.hashcode
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_hashcode
     * </p>
     */
    public Optional<String> getParentHashcodeAsOptional() {

        if ( this.constructed == false && this.hasParentHashcode == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentHashcode );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * See content.hashcode
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_hashcode
     * </p>
     */
    public String getParentHashcode ( String _default ) {

        if ( ! hasParentHashcode() ) {
            return _default;
        }

        return getParentHashcode();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentHashcode () {
        return this.hasParentHashcode > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentHashcode () {
        this.hasParentHashcode = 0;
        this.hasModifiedParentHashcode = 0;
        this.hasDefinedParentHashcode = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentHashcode () {
        return this.hasModifiedParentHashcode > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentHashcode () {
        return this.hasDefinedParentHashcode;
    }

    public BaseContentMetadata setParentPermalink ( String parentPermalink ) {

        ++this.hasParentPermalink;
        ++this.hasModifiedParentPermalink;

        this.parentPermalink = parentPermalink;

        hasDefinedParentPermalink = true;

        return this;

    }

    /**
     * <p>
     * See content.permalink
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_permalink
     * </p>
     */
    public String getParentPermalink() {

        if ( this.constructed == false && this.hasParentPermalink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentPermalink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentPermalink;
    }

    /**
     * <p>
     * See content.permalink
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_permalink
     * </p>
     */
    public Optional<String> getParentPermalinkAsOptional() {

        if ( this.constructed == false && this.hasParentPermalink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentPermalink );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * See content.permalink
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_permalink
     * </p>
     */
    public String getParentPermalink ( String _default ) {

        if ( ! hasParentPermalink() ) {
            return _default;
        }

        return getParentPermalink();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentPermalink () {
        return this.hasParentPermalink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentPermalink () {
        this.hasParentPermalink = 0;
        this.hasModifiedParentPermalink = 0;
        this.hasDefinedParentPermalink = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentPermalink () {
        return this.hasModifiedParentPermalink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentPermalink () {
        return this.hasDefinedParentPermalink;
    }

    public BaseContentMetadata setParentTitle ( String parentTitle ) {

        ++this.hasParentTitle;
        ++this.hasModifiedParentTitle;

        this.parentTitle = parentTitle;

        hasDefinedParentTitle = true;

        return this;

    }

    /**
     * <p>
     * See content.title
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_title
     * </p>
     */
    public String getParentTitle() {

        if ( this.constructed == false && this.hasParentTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentTitle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentTitle;
    }

    /**
     * <p>
     * See content.title
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_title
     * </p>
     */
    public Optional<String> getParentTitleAsOptional() {

        if ( this.constructed == false && this.hasParentTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentTitle );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * See content.title
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_title
     * </p>
     */
    public String getParentTitle ( String _default ) {

        if ( ! hasParentTitle() ) {
            return _default;
        }

        return getParentTitle();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentTitle () {
        return this.hasParentTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentTitle () {
        this.hasParentTitle = 0;
        this.hasModifiedParentTitle = 0;
        this.hasDefinedParentTitle = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentTitle () {
        return this.hasModifiedParentTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentTitle () {
        return this.hasDefinedParentTitle;
    }

    public BaseContentMetadata setParentLang ( String parentLang ) {

        ++this.hasParentLang;
        ++this.hasModifiedParentLang;

        this.parentLang = parentLang;

        hasDefinedParentLang = true;

        return this;

    }

    /**
     * <p>
     * See content.lang
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_lang
     * </p>
     */
    public String getParentLang() {

        if ( this.constructed == false && this.hasParentLang == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentLang" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentLang;
    }

    /**
     * <p>
     * See content.lang
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_lang
     * </p>
     */
    public Optional<String> getParentLangAsOptional() {

        if ( this.constructed == false && this.hasParentLang == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentLang );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * See content.lang
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_lang
     * </p>
     */
    public String getParentLang ( String _default ) {

        if ( ! hasParentLang() ) {
            return _default;
        }

        return getParentLang();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentLang () {
        return this.hasParentLang > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentLang () {
        this.hasParentLang = 0;
        this.hasModifiedParentLang = 0;
        this.hasDefinedParentLang = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentLang () {
        return this.hasModifiedParentLang > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentLang () {
        return this.hasDefinedParentLang;
    }

    public BaseContentMetadata setParentResource ( String parentResource ) {

        ++this.hasParentResource;
        ++this.hasModifiedParentResource;

        this.parentResource = parentResource;

        hasDefinedParentResource = true;

        return this;

    }

    /**
     * <p>
     * See content.resource
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_resource
     * </p>
     */
    public String getParentResource() {

        if ( this.constructed == false && this.hasParentResource == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentResource" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentResource;
    }

    /**
     * <p>
     * See content.resource
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_resource
     * </p>
     */
    public Optional<String> getParentResourceAsOptional() {

        if ( this.constructed == false && this.hasParentResource == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentResource );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * See content.resource
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_resource
     * </p>
     */
    public String getParentResource ( String _default ) {

        if ( ! hasParentResource() ) {
            return _default;
        }

        return getParentResource();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentResource () {
        return this.hasParentResource > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentResource () {
        this.hasParentResource = 0;
        this.hasModifiedParentResource = 0;
        this.hasDefinedParentResource = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentResource () {
        return this.hasModifiedParentResource > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentResource () {
        return this.hasDefinedParentResource;
    }

    public BaseContentMetadata setLikes ( int likes ) {

        ++this.hasLikes;
        ++this.hasModifiedLikes;

        this.likes = likes;

        hasDefinedLikes = true;

        return this;

    }

    /**
     * <p>
     * The number of likes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: likes
     * </p>
     */
    public int getLikes() {

        if ( this.constructed == false && this.hasLikes == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.likes" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.likes;
    }

    /**
     * <p>
     * The number of likes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: likes
     * </p>
     */
    public Optional<Integer> getLikesAsOptional() {

        if ( this.constructed == false && this.hasLikes == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.likes );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The number of likes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: likes
     * </p>
     */
    public int getLikes ( int _default ) {

        if ( ! hasLikes() ) {
            return _default;
        }

        return getLikes();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLikes () {
        return this.hasLikes > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLikes () {
        this.hasLikes = 0;
        this.hasModifiedLikes = 0;
        this.hasDefinedLikes = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLikes () {
        return this.hasModifiedLikes > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLikes () {
        return this.hasDefinedLikes;
    }

    public BaseContentMetadata setDislikes ( int dislikes ) {

        ++this.hasDislikes;
        ++this.hasModifiedDislikes;

        this.dislikes = dislikes;

        hasDefinedDislikes = true;

        return this;

    }

    /**
     * <p>
     * The number of dislikes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: dislikes
     * </p>
     */
    public int getDislikes() {

        if ( this.constructed == false && this.hasDislikes == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.dislikes" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.dislikes;
    }

    /**
     * <p>
     * The number of dislikes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: dislikes
     * </p>
     */
    public Optional<Integer> getDislikesAsOptional() {

        if ( this.constructed == false && this.hasDislikes == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.dislikes );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The number of dislikes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: dislikes
     * </p>
     */
    public int getDislikes ( int _default ) {

        if ( ! hasDislikes() ) {
            return _default;
        }

        return getDislikes();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDislikes () {
        return this.hasDislikes > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDislikes () {
        this.hasDislikes = 0;
        this.hasModifiedDislikes = 0;
        this.hasDefinedDislikes = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDislikes () {
        return this.hasModifiedDislikes > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDislikes () {
        return this.hasDefinedDislikes;
    }

    public BaseContentMetadata setComments ( int comments ) {

        ++this.hasComments;
        ++this.hasModifiedComments;

        this.comments = comments;

        hasDefinedComments = true;

        return this;

    }

    /**
     * <p>
     * The number of comments for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: comments
     * </p>
     */
    public int getComments() {

        if ( this.constructed == false && this.hasComments == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.comments" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.comments;
    }

    /**
     * <p>
     * The number of comments for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: comments
     * </p>
     */
    public Optional<Integer> getCommentsAsOptional() {

        if ( this.constructed == false && this.hasComments == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.comments );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The number of comments for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: comments
     * </p>
     */
    public int getComments ( int _default ) {

        if ( ! hasComments() ) {
            return _default;
        }

        return getComments();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasComments () {
        return this.hasComments > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearComments () {
        this.hasComments = 0;
        this.hasModifiedComments = 0;
        this.hasDefinedComments = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedComments () {
        return this.hasModifiedComments > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedComments () {
        return this.hasDefinedComments;
    }

    public BaseContentMetadata setViews ( int views ) {

        ++this.hasViews;
        ++this.hasModifiedViews;

        this.views = views;

        hasDefinedViews = true;

        return this;

    }

    /**
     * <p>
     * The number of views for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: views
     * </p>
     */
    public int getViews() {

        if ( this.constructed == false && this.hasViews == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.views" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.views;
    }

    /**
     * <p>
     * The number of views for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: views
     * </p>
     */
    public Optional<Integer> getViewsAsOptional() {

        if ( this.constructed == false && this.hasViews == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.views );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The number of views for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: views
     * </p>
     */
    public int getViews ( int _default ) {

        if ( ! hasViews() ) {
            return _default;
        }

        return getViews();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasViews () {
        return this.hasViews > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearViews () {
        this.hasViews = 0;
        this.hasModifiedViews = 0;
        this.hasDefinedViews = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedViews () {
        return this.hasModifiedViews > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedViews () {
        return this.hasDefinedViews;
    }

    public BaseContentMetadata setMetadataScore ( int metadataScore ) {

        ++this.hasMetadataScore;
        ++this.hasModifiedMetadataScore;

        this.metadataScore = metadataScore;

        hasDefinedMetadataScore = true;

        return this;

    }

    /**
     * <p>
     * The quality of the metadata on this post. Used internally to audit the quality of Spinn3r data.  Not very applicable to customer use.
     * </p>
     *
     * <p>
     * Schema type: int , name: metadata_score
     * </p>
     */
    public int getMetadataScore() {

        if ( this.constructed == false && this.hasMetadataScore == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.metadataScore" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.metadataScore;
    }

    /**
     * <p>
     * The quality of the metadata on this post. Used internally to audit the quality of Spinn3r data.  Not very applicable to customer use.
     * </p>
     *
     * <p>
     * Schema type: int , name: metadata_score
     * </p>
     */
    public Optional<Integer> getMetadataScoreAsOptional() {

        if ( this.constructed == false && this.hasMetadataScore == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.metadataScore );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The quality of the metadata on this post. Used internally to audit the quality of Spinn3r data.  Not very applicable to customer use.
     * </p>
     *
     * <p>
     * Schema type: int , name: metadata_score
     * </p>
     */
    public int getMetadataScore ( int _default ) {

        if ( ! hasMetadataScore() ) {
            return _default;
        }

        return getMetadataScore();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMetadataScore () {
        return this.hasMetadataScore > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMetadataScore () {
        this.hasMetadataScore = 0;
        this.hasModifiedMetadataScore = 0;
        this.hasDefinedMetadataScore = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMetadataScore () {
        return this.hasModifiedMetadataScore > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMetadataScore () {
        return this.hasDefinedMetadataScore;
    }

    public BaseContentMetadata setShares ( int shares ) {

        ++this.hasShares;
        ++this.hasModifiedShares;

        this.shares = shares;

        hasDefinedShares = true;

        return this;

    }

    /**
     * <p>
     * The number of shares for this post.  For some microblogging platforms this could be a rewtweet but for others its a share.  Most platforms have this concept.
     * </p>
     *
     * <p>
     * Schema type: int , name: shares
     * </p>
     */
    public int getShares() {

        if ( this.constructed == false && this.hasShares == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.shares" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.shares;
    }

    /**
     * <p>
     * The number of shares for this post.  For some microblogging platforms this could be a rewtweet but for others its a share.  Most platforms have this concept.
     * </p>
     *
     * <p>
     * Schema type: int , name: shares
     * </p>
     */
    public Optional<Integer> getSharesAsOptional() {

        if ( this.constructed == false && this.hasShares == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.shares );

    }

    /**
     *
     * Get the value of a member and provide a default if it's not defined.
     *
     * <p>
     * The number of shares for this post.  For some microblogging platforms this could be a rewtweet but for others its a share.  Most platforms have this concept.
     * </p>
     *
     * <p>
     * Schema type: int , name: shares
     * </p>
     */
    public int getShares ( int _default ) {

        if ( ! hasShares() ) {
            return _default;
        }

        return getShares();

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasShares () {
        return this.hasShares > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearShares () {
        this.hasShares = 0;
        this.hasModifiedShares = 0;
        this.hasDefinedShares = false;
    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedShares () {
        return this.hasModifiedShares > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedShares () {
        return this.hasDefinedShares;
    }

    /**
      * Copy the fields from the given source to the current object.
      */
    public void copy( BaseContentMetadata obj ) {

        if ( obj.hasPermalink() ) {
            setPermalink( obj.getPermalink() );
        }

        if ( obj.hasPermalinkRedirect() ) {
            setPermalinkRedirect( obj.getPermalinkRedirect() );
        }

        if ( obj.hasPermalinkRedirectDomain() ) {
            setPermalinkRedirectDomain( obj.getPermalinkRedirectDomain() );
        }

        if ( obj.hasPermalinkRedirectSite() ) {
            setPermalinkRedirectSite( obj.getPermalinkRedirectSite() );
        }

        if ( obj.hasLink() ) {
            setLink( obj.getLink() );
        }

        if ( obj.hasLinkDomain() ) {
            setLinkDomain( obj.getLinkDomain() );
        }

        if ( obj.hasLinkSite() ) {
            setLinkSite( obj.getLinkSite() );
        }

        if ( obj.hasShortlink() ) {
            setShortlink( obj.getShortlink() );
        }

        if ( obj.hasCanonical() ) {
            setCanonical( obj.getCanonical() );
        }

        if ( obj.hasDomain() ) {
            setDomain( obj.getDomain() );
        }

        if ( obj.hasSite() ) {
            setSite( obj.getSite() );
        }

        if ( obj.hasMain() ) {
            setMain( obj.getMain() );
        }

        if ( obj.hasMainLength() ) {
            setMainLength( obj.getMainLength() );
        }

        if ( obj.hasMainChecksum() ) {
            setMainChecksum( obj.getMainChecksum() );
        }

        if ( obj.hasMainAuthoritative() ) {
            setMainAuthoritative( obj.getMainAuthoritative() );
        }

        if ( obj.hasMainFormat() ) {
            setMainFormat( obj.getMainFormat() );
        }

        if ( obj.hasExtract() ) {
            setExtract( obj.getExtract() );
        }

        if ( obj.hasExtractLength() ) {
            setExtractLength( obj.getExtractLength() );
        }

        if ( obj.hasExtractChecksum() ) {
            setExtractChecksum( obj.getExtractChecksum() );
        }

        if ( obj.hasSummaryText() ) {
            setSummaryText( obj.getSummaryText() );
        }

        if ( obj.hasTitle() ) {
            setTitle( obj.getTitle() );
        }

        if ( obj.hasPublisher() ) {
            setPublisher( obj.getPublisher() );
        }

        if ( obj.hasSection() ) {
            setSection( obj.getSection() );
        }

        if ( obj.hasDescription() ) {
            setDescription( obj.getDescription() );
        }

        if ( obj.hasTags() ) {
            setTags( obj.getTags() );
        }

        if ( obj.hasMentions() ) {
            setMentions( obj.getMentions() );
        }

        if ( obj.hasLinks() ) {
            setLinks( obj.getLinks() );
        }

        if ( obj.hasPublished() ) {
            setPublished( obj.getPublished() );
        }

        if ( obj.hasModified() ) {
            setModified( obj.getModified() );
        }

        if ( obj.hasPublishedPartial() ) {
            setPublishedPartial( obj.getPublishedPartial() );
        }

        if ( obj.hasModifiedPartial() ) {
            setModifiedPartial( obj.getModifiedPartial() );
        }

        if ( obj.hasAuthorName() ) {
            setAuthorName( obj.getAuthorName() );
        }

        if ( obj.hasAuthorLink() ) {
            setAuthorLink( obj.getAuthorLink() );
        }

        if ( obj.hasAuthorHandle() ) {
            setAuthorHandle( obj.getAuthorHandle() );
        }

        if ( obj.hasAuthorFollowers() ) {
            setAuthorFollowers( obj.getAuthorFollowers() );
        }

        if ( obj.hasAuthorLocation() ) {
            setAuthorLocation( obj.getAuthorLocation() );
        }

        if ( obj.hasAuthorAvatarImg() ) {
            setAuthorAvatarImg( obj.getAuthorAvatarImg() );
        }

        if ( obj.hasAuthorAvatarWidth() ) {
            setAuthorAvatarWidth( obj.getAuthorAvatarWidth() );
        }

        if ( obj.hasAuthorAvatarHeight() ) {
            setAuthorAvatarHeight( obj.getAuthorAvatarHeight() );
        }

        if ( obj.hasAuthorTwitterHandle() ) {
            setAuthorTwitterHandle( obj.getAuthorTwitterHandle() );
        }

        if ( obj.hasAuthorTwitterUserid() ) {
            setAuthorTwitterUserid( obj.getAuthorTwitterUserid() );
        }

        if ( obj.hasAuthorUserId() ) {
            setAuthorUserId( obj.getAuthorUserId() );
        }

        if ( obj.hasAuthorGender() ) {
            setAuthorGender( obj.getAuthorGender() );
        }

        if ( obj.hasGeoLocation() ) {
            setGeoLocation( obj.getGeoLocation() );
        }

        if ( obj.hasGeoLocationId() ) {
            setGeoLocationId( obj.getGeoLocationId() );
        }

        if ( obj.hasGeoFeaturename() ) {
            setGeoFeaturename( obj.getGeoFeaturename() );
        }

        if ( obj.hasGeoPoint() ) {
            setGeoPoint( obj.getGeoPoint() );
        }

        if ( obj.hasGeoBox() ) {
            setGeoBox( obj.getGeoBox() );
        }

        if ( obj.hasGeoNameId() ) {
            setGeoNameId( obj.getGeoNameId() );
        }

        if ( obj.hasGeoName() ) {
            setGeoName( obj.getGeoName() );
        }

        if ( obj.hasGeoCountry() ) {
            setGeoCountry( obj.getGeoCountry() );
        }

        if ( obj.hasGeoState() ) {
            setGeoState( obj.getGeoState() );
        }

        if ( obj.hasGeoCity() ) {
            setGeoCity( obj.getGeoCity() );
        }

        if ( obj.hasRatingValue() ) {
            setRatingValue( obj.getRatingValue() );
        }

        if ( obj.hasFaviconSrc() ) {
            setFaviconSrc( obj.getFaviconSrc() );
        }

        if ( obj.hasFaviconWidth() ) {
            setFaviconWidth( obj.getFaviconWidth() );
        }

        if ( obj.hasFaviconHeight() ) {
            setFaviconHeight( obj.getFaviconHeight() );
        }

        if ( obj.hasImageSrc() ) {
            setImageSrc( obj.getImageSrc() );
        }

        if ( obj.hasImageWidth() ) {
            setImageWidth( obj.getImageWidth() );
        }

        if ( obj.hasImageHeight() ) {
            setImageHeight( obj.getImageHeight() );
        }

        if ( obj.hasShared() ) {
            setShared( obj.getShared() );
        }

        if ( obj.hasSharedProfileLink() ) {
            setSharedProfileLink( obj.getSharedProfileLink() );
        }

        if ( obj.hasSharedProfileTitle() ) {
            setSharedProfileTitle( obj.getSharedProfileTitle() );
        }

        if ( obj.hasReplied() ) {
            setReplied( obj.getReplied() );
        }

        if ( obj.hasRepliedProfileLink() ) {
            setRepliedProfileLink( obj.getRepliedProfileLink() );
        }

        if ( obj.hasRepliedProfileTitle() ) {
            setRepliedProfileTitle( obj.getRepliedProfileTitle() );
        }

        if ( obj.hasCard() ) {
            setCard( obj.getCard() );
        }

        if ( obj.hasVideoPlayer() ) {
            setVideoPlayer( obj.getVideoPlayer() );
        }

        if ( obj.hasVideoPlayerWidth() ) {
            setVideoPlayerWidth( obj.getVideoPlayerWidth() );
        }

        if ( obj.hasVideoPlayerHeight() ) {
            setVideoPlayerHeight( obj.getVideoPlayerHeight() );
        }

        if ( obj.hasType() ) {
            setType( obj.getType() );
        }

        if ( obj.hasSentiment() ) {
            setSentiment( obj.getSentiment() );
        }

        if ( obj.hasLang() ) {
            setLang( obj.getLang() );
        }

        if ( obj.hasCategories() ) {
            setCategories( obj.getCategories() );
        }

        if ( obj.hasDuplicates() ) {
            setDuplicates( obj.getDuplicates() );
        }

        if ( obj.hasDuplicatesCount() ) {
            setDuplicatesCount( obj.getDuplicatesCount() );
        }

        if ( obj.hasClassifications() ) {
            setClassifications( obj.getClassifications() );
        }

        if ( obj.hasParentHashcode() ) {
            setParentHashcode( obj.getParentHashcode() );
        }

        if ( obj.hasParentPermalink() ) {
            setParentPermalink( obj.getParentPermalink() );
        }

        if ( obj.hasParentTitle() ) {
            setParentTitle( obj.getParentTitle() );
        }

        if ( obj.hasParentLang() ) {
            setParentLang( obj.getParentLang() );
        }

        if ( obj.hasParentResource() ) {
            setParentResource( obj.getParentResource() );
        }

        if ( obj.hasLikes() ) {
            setLikes( obj.getLikes() );
        }

        if ( obj.hasDislikes() ) {
            setDislikes( obj.getDislikes() );
        }

        if ( obj.hasComments() ) {
            setComments( obj.getComments() );
        }

        if ( obj.hasViews() ) {
            setViews( obj.getViews() );
        }

        if ( obj.hasMetadataScore() ) {
            setMetadataScore( obj.getMetadataScore() );
        }

        if ( obj.hasShares() ) {
            setShares( obj.getShares() );
        }

    }

    /**
      * Copy the fields from the given source to the current object but only if the
      * current object doesn't have those fields.
      */
    public void merge( BaseContentMetadata obj ) {

        if ( ! hasPermalink() && obj.hasPermalink() ) {
            setPermalink( obj.getPermalink() );
        }

        if ( hasPermalink() && getPermalink() == null &&
            obj.hasPermalink() && obj.getPermalink() != null ) {
            setPermalink( obj.getPermalink() );
        }

        if ( ! hasPermalinkRedirect() && obj.hasPermalinkRedirect() ) {
            setPermalinkRedirect( obj.getPermalinkRedirect() );
        }

        if ( hasPermalinkRedirect() && getPermalinkRedirect() == null &&
            obj.hasPermalinkRedirect() && obj.getPermalinkRedirect() != null ) {
            setPermalinkRedirect( obj.getPermalinkRedirect() );
        }

        if ( ! hasPermalinkRedirectDomain() && obj.hasPermalinkRedirectDomain() ) {
            setPermalinkRedirectDomain( obj.getPermalinkRedirectDomain() );
        }

        if ( hasPermalinkRedirectDomain() && getPermalinkRedirectDomain() == null &&
            obj.hasPermalinkRedirectDomain() && obj.getPermalinkRedirectDomain() != null ) {
            setPermalinkRedirectDomain( obj.getPermalinkRedirectDomain() );
        }

        if ( ! hasPermalinkRedirectSite() && obj.hasPermalinkRedirectSite() ) {
            setPermalinkRedirectSite( obj.getPermalinkRedirectSite() );
        }

        if ( hasPermalinkRedirectSite() && getPermalinkRedirectSite() == null &&
            obj.hasPermalinkRedirectSite() && obj.getPermalinkRedirectSite() != null ) {
            setPermalinkRedirectSite( obj.getPermalinkRedirectSite() );
        }

        if ( ! hasLink() && obj.hasLink() ) {
            setLink( obj.getLink() );
        }

        if ( hasLink() && getLink() == null &&
            obj.hasLink() && obj.getLink() != null ) {
            setLink( obj.getLink() );
        }

        if ( ! hasLinkDomain() && obj.hasLinkDomain() ) {
            setLinkDomain( obj.getLinkDomain() );
        }

        if ( hasLinkDomain() && getLinkDomain() == null &&
            obj.hasLinkDomain() && obj.getLinkDomain() != null ) {
            setLinkDomain( obj.getLinkDomain() );
        }

        if ( ! hasLinkSite() && obj.hasLinkSite() ) {
            setLinkSite( obj.getLinkSite() );
        }

        if ( hasLinkSite() && getLinkSite() == null &&
            obj.hasLinkSite() && obj.getLinkSite() != null ) {
            setLinkSite( obj.getLinkSite() );
        }

        if ( ! hasShortlink() && obj.hasShortlink() ) {
            setShortlink( obj.getShortlink() );
        }

        if ( hasShortlink() && getShortlink() == null &&
            obj.hasShortlink() && obj.getShortlink() != null ) {
            setShortlink( obj.getShortlink() );
        }

        if ( ! hasCanonical() && obj.hasCanonical() ) {
            setCanonical( obj.getCanonical() );
        }

        if ( hasCanonical() && getCanonical() == null &&
            obj.hasCanonical() && obj.getCanonical() != null ) {
            setCanonical( obj.getCanonical() );
        }

        if ( ! hasDomain() && obj.hasDomain() ) {
            setDomain( obj.getDomain() );
        }

        if ( hasDomain() && getDomain() == null &&
            obj.hasDomain() && obj.getDomain() != null ) {
            setDomain( obj.getDomain() );
        }

        if ( ! hasSite() && obj.hasSite() ) {
            setSite( obj.getSite() );
        }

        if ( hasSite() && getSite() == null &&
            obj.hasSite() && obj.getSite() != null ) {
            setSite( obj.getSite() );
        }

        if ( ! hasMain() && obj.hasMain() ) {
            setMain( obj.getMain() );
        }

        if ( hasMain() && getMain() == null &&
            obj.hasMain() && obj.getMain() != null ) {
            setMain( obj.getMain() );
        }

        if ( ! hasMainLength() && obj.hasMainLength() ) {
            setMainLength( obj.getMainLength() );
        }

        if ( ! hasMainChecksum() && obj.hasMainChecksum() ) {
            setMainChecksum( obj.getMainChecksum() );
        }

        if ( hasMainChecksum() && getMainChecksum() == null &&
            obj.hasMainChecksum() && obj.getMainChecksum() != null ) {
            setMainChecksum( obj.getMainChecksum() );
        }

        if ( ! hasMainAuthoritative() && obj.hasMainAuthoritative() ) {
            setMainAuthoritative( obj.getMainAuthoritative() );
        }

        if ( mainFormat == null && obj.hasMainFormat() && obj.getMainFormat() != null ) {
            setMainFormat( obj.getMainFormat() );
        }

        if ( ! hasExtract() && obj.hasExtract() ) {
            setExtract( obj.getExtract() );
        }

        if ( hasExtract() && getExtract() == null &&
            obj.hasExtract() && obj.getExtract() != null ) {
            setExtract( obj.getExtract() );
        }

        if ( ! hasExtractLength() && obj.hasExtractLength() ) {
            setExtractLength( obj.getExtractLength() );
        }

        if ( ! hasExtractChecksum() && obj.hasExtractChecksum() ) {
            setExtractChecksum( obj.getExtractChecksum() );
        }

        if ( hasExtractChecksum() && getExtractChecksum() == null &&
            obj.hasExtractChecksum() && obj.getExtractChecksum() != null ) {
            setExtractChecksum( obj.getExtractChecksum() );
        }

        if ( ! hasSummaryText() && obj.hasSummaryText() ) {
            setSummaryText( obj.getSummaryText() );
        }

        if ( hasSummaryText() && getSummaryText() == null &&
            obj.hasSummaryText() && obj.getSummaryText() != null ) {
            setSummaryText( obj.getSummaryText() );
        }

        if ( ! hasTitle() && obj.hasTitle() ) {
            setTitle( obj.getTitle() );
        }

        if ( hasTitle() && getTitle() == null &&
            obj.hasTitle() && obj.getTitle() != null ) {
            setTitle( obj.getTitle() );
        }

        if ( ! hasPublisher() && obj.hasPublisher() ) {
            setPublisher( obj.getPublisher() );
        }

        if ( hasPublisher() && getPublisher() == null &&
            obj.hasPublisher() && obj.getPublisher() != null ) {
            setPublisher( obj.getPublisher() );
        }

        if ( ! hasSection() && obj.hasSection() ) {
            setSection( obj.getSection() );
        }

        if ( hasSection() && getSection() == null &&
            obj.hasSection() && obj.getSection() != null ) {
            setSection( obj.getSection() );
        }

        if ( ! hasDescription() && obj.hasDescription() ) {
            setDescription( obj.getDescription() );
        }

        if ( hasDescription() && getDescription() == null &&
            obj.hasDescription() && obj.getDescription() != null ) {
            setDescription( obj.getDescription() );
        }

        if ( ! hasTags() && obj.hasTags() ) {
            setTags( obj.getTags() );
        }

        if ( ! hasMentions() && obj.hasMentions() ) {
            setMentions( obj.getMentions() );
        }

        if ( ! hasLinks() && obj.hasLinks() ) {
            setLinks( obj.getLinks() );
        }

        if ( ! hasPublished() && obj.hasPublished() ) {
            setPublished( obj.getPublished() );
        }

        if ( ! hasModified() && obj.hasModified() ) {
            setModified( obj.getModified() );
        }

        if ( ! hasPublishedPartial() && obj.hasPublishedPartial() ) {
            setPublishedPartial( obj.getPublishedPartial() );
        }

        if ( ! hasModifiedPartial() && obj.hasModifiedPartial() ) {
            setModifiedPartial( obj.getModifiedPartial() );
        }

        if ( ! hasAuthorName() && obj.hasAuthorName() ) {
            setAuthorName( obj.getAuthorName() );
        }

        if ( hasAuthorName() && getAuthorName() == null &&
            obj.hasAuthorName() && obj.getAuthorName() != null ) {
            setAuthorName( obj.getAuthorName() );
        }

        if ( ! hasAuthorLink() && obj.hasAuthorLink() ) {
            setAuthorLink( obj.getAuthorLink() );
        }

        if ( hasAuthorLink() && getAuthorLink() == null &&
            obj.hasAuthorLink() && obj.getAuthorLink() != null ) {
            setAuthorLink( obj.getAuthorLink() );
        }

        if ( ! hasAuthorHandle() && obj.hasAuthorHandle() ) {
            setAuthorHandle( obj.getAuthorHandle() );
        }

        if ( hasAuthorHandle() && getAuthorHandle() == null &&
            obj.hasAuthorHandle() && obj.getAuthorHandle() != null ) {
            setAuthorHandle( obj.getAuthorHandle() );
        }

        if ( ! hasAuthorFollowers() && obj.hasAuthorFollowers() ) {
            setAuthorFollowers( obj.getAuthorFollowers() );
        }

        if ( ! hasAuthorLocation() && obj.hasAuthorLocation() ) {
            setAuthorLocation( obj.getAuthorLocation() );
        }

        if ( hasAuthorLocation() && getAuthorLocation() == null &&
            obj.hasAuthorLocation() && obj.getAuthorLocation() != null ) {
            setAuthorLocation( obj.getAuthorLocation() );
        }

        if ( ! hasAuthorAvatarImg() && obj.hasAuthorAvatarImg() ) {
            setAuthorAvatarImg( obj.getAuthorAvatarImg() );
        }

        if ( hasAuthorAvatarImg() && getAuthorAvatarImg() == null &&
            obj.hasAuthorAvatarImg() && obj.getAuthorAvatarImg() != null ) {
            setAuthorAvatarImg( obj.getAuthorAvatarImg() );
        }

        if ( ! hasAuthorAvatarWidth() && obj.hasAuthorAvatarWidth() ) {
            setAuthorAvatarWidth( obj.getAuthorAvatarWidth() );
        }

        if ( ! hasAuthorAvatarHeight() && obj.hasAuthorAvatarHeight() ) {
            setAuthorAvatarHeight( obj.getAuthorAvatarHeight() );
        }

        if ( ! hasAuthorTwitterHandle() && obj.hasAuthorTwitterHandle() ) {
            setAuthorTwitterHandle( obj.getAuthorTwitterHandle() );
        }

        if ( hasAuthorTwitterHandle() && getAuthorTwitterHandle() == null &&
            obj.hasAuthorTwitterHandle() && obj.getAuthorTwitterHandle() != null ) {
            setAuthorTwitterHandle( obj.getAuthorTwitterHandle() );
        }

        if ( ! hasAuthorTwitterUserid() && obj.hasAuthorTwitterUserid() ) {
            setAuthorTwitterUserid( obj.getAuthorTwitterUserid() );
        }

        if ( hasAuthorTwitterUserid() && getAuthorTwitterUserid() == null &&
            obj.hasAuthorTwitterUserid() && obj.getAuthorTwitterUserid() != null ) {
            setAuthorTwitterUserid( obj.getAuthorTwitterUserid() );
        }

        if ( ! hasAuthorUserId() && obj.hasAuthorUserId() ) {
            setAuthorUserId( obj.getAuthorUserId() );
        }

        if ( hasAuthorUserId() && getAuthorUserId() == null &&
            obj.hasAuthorUserId() && obj.getAuthorUserId() != null ) {
            setAuthorUserId( obj.getAuthorUserId() );
        }

        if ( authorGender == null && obj.hasAuthorGender() && obj.getAuthorGender() != null ) {
            setAuthorGender( obj.getAuthorGender() );
        }

        if ( ! hasGeoLocation() && obj.hasGeoLocation() ) {
            setGeoLocation( obj.getGeoLocation() );
        }

        if ( hasGeoLocation() && getGeoLocation() == null &&
            obj.hasGeoLocation() && obj.getGeoLocation() != null ) {
            setGeoLocation( obj.getGeoLocation() );
        }

        if ( ! hasGeoLocationId() && obj.hasGeoLocationId() ) {
            setGeoLocationId( obj.getGeoLocationId() );
        }

        if ( hasGeoLocationId() && getGeoLocationId() == null &&
            obj.hasGeoLocationId() && obj.getGeoLocationId() != null ) {
            setGeoLocationId( obj.getGeoLocationId() );
        }

        if ( ! hasGeoFeaturename() && obj.hasGeoFeaturename() ) {
            setGeoFeaturename( obj.getGeoFeaturename() );
        }

        if ( hasGeoFeaturename() && getGeoFeaturename() == null &&
            obj.hasGeoFeaturename() && obj.getGeoFeaturename() != null ) {
            setGeoFeaturename( obj.getGeoFeaturename() );
        }

        if ( ! hasGeoPoint() && obj.hasGeoPoint() ) {
            setGeoPoint( obj.getGeoPoint() );
        }

        if ( hasGeoPoint() && getGeoPoint() == null &&
            obj.hasGeoPoint() && obj.getGeoPoint() != null ) {
            setGeoPoint( obj.getGeoPoint() );
        }

        if ( ! hasGeoBox() && obj.hasGeoBox() ) {
            setGeoBox( obj.getGeoBox() );
        }

        if ( hasGeoBox() && getGeoBox() == null &&
            obj.hasGeoBox() && obj.getGeoBox() != null ) {
            setGeoBox( obj.getGeoBox() );
        }

        if ( ! hasGeoNameId() && obj.hasGeoNameId() ) {
            setGeoNameId( obj.getGeoNameId() );
        }

        if ( hasGeoNameId() && getGeoNameId() == null &&
            obj.hasGeoNameId() && obj.getGeoNameId() != null ) {
            setGeoNameId( obj.getGeoNameId() );
        }

        if ( ! hasGeoName() && obj.hasGeoName() ) {
            setGeoName( obj.getGeoName() );
        }

        if ( hasGeoName() && getGeoName() == null &&
            obj.hasGeoName() && obj.getGeoName() != null ) {
            setGeoName( obj.getGeoName() );
        }

        if ( ! hasGeoCountry() && obj.hasGeoCountry() ) {
            setGeoCountry( obj.getGeoCountry() );
        }

        if ( hasGeoCountry() && getGeoCountry() == null &&
            obj.hasGeoCountry() && obj.getGeoCountry() != null ) {
            setGeoCountry( obj.getGeoCountry() );
        }

        if ( ! hasGeoState() && obj.hasGeoState() ) {
            setGeoState( obj.getGeoState() );
        }

        if ( hasGeoState() && getGeoState() == null &&
            obj.hasGeoState() && obj.getGeoState() != null ) {
            setGeoState( obj.getGeoState() );
        }

        if ( ! hasGeoCity() && obj.hasGeoCity() ) {
            setGeoCity( obj.getGeoCity() );
        }

        if ( hasGeoCity() && getGeoCity() == null &&
            obj.hasGeoCity() && obj.getGeoCity() != null ) {
            setGeoCity( obj.getGeoCity() );
        }

        if ( ! hasRatingValue() && obj.hasRatingValue() ) {
            setRatingValue( obj.getRatingValue() );
        }

        if ( hasRatingValue() && getRatingValue() == null &&
            obj.hasRatingValue() && obj.getRatingValue() != null ) {
            setRatingValue( obj.getRatingValue() );
        }

        if ( ! hasFaviconSrc() && obj.hasFaviconSrc() ) {
            setFaviconSrc( obj.getFaviconSrc() );
        }

        if ( hasFaviconSrc() && getFaviconSrc() == null &&
            obj.hasFaviconSrc() && obj.getFaviconSrc() != null ) {
            setFaviconSrc( obj.getFaviconSrc() );
        }

        if ( ! hasFaviconWidth() && obj.hasFaviconWidth() ) {
            setFaviconWidth( obj.getFaviconWidth() );
        }

        if ( ! hasFaviconHeight() && obj.hasFaviconHeight() ) {
            setFaviconHeight( obj.getFaviconHeight() );
        }

        if ( ! hasImageSrc() && obj.hasImageSrc() ) {
            setImageSrc( obj.getImageSrc() );
        }

        if ( hasImageSrc() && getImageSrc() == null &&
            obj.hasImageSrc() && obj.getImageSrc() != null ) {
            setImageSrc( obj.getImageSrc() );
        }

        if ( ! hasImageWidth() && obj.hasImageWidth() ) {
            setImageWidth( obj.getImageWidth() );
        }

        if ( ! hasImageHeight() && obj.hasImageHeight() ) {
            setImageHeight( obj.getImageHeight() );
        }

        if ( ! hasShared() && obj.hasShared() ) {
            setShared( obj.getShared() );
        }

        if ( ! hasSharedProfileLink() && obj.hasSharedProfileLink() ) {
            setSharedProfileLink( obj.getSharedProfileLink() );
        }

        if ( hasSharedProfileLink() && getSharedProfileLink() == null &&
            obj.hasSharedProfileLink() && obj.getSharedProfileLink() != null ) {
            setSharedProfileLink( obj.getSharedProfileLink() );
        }

        if ( ! hasSharedProfileTitle() && obj.hasSharedProfileTitle() ) {
            setSharedProfileTitle( obj.getSharedProfileTitle() );
        }

        if ( hasSharedProfileTitle() && getSharedProfileTitle() == null &&
            obj.hasSharedProfileTitle() && obj.getSharedProfileTitle() != null ) {
            setSharedProfileTitle( obj.getSharedProfileTitle() );
        }

        if ( ! hasReplied() && obj.hasReplied() ) {
            setReplied( obj.getReplied() );
        }

        if ( ! hasRepliedProfileLink() && obj.hasRepliedProfileLink() ) {
            setRepliedProfileLink( obj.getRepliedProfileLink() );
        }

        if ( hasRepliedProfileLink() && getRepliedProfileLink() == null &&
            obj.hasRepliedProfileLink() && obj.getRepliedProfileLink() != null ) {
            setRepliedProfileLink( obj.getRepliedProfileLink() );
        }

        if ( ! hasRepliedProfileTitle() && obj.hasRepliedProfileTitle() ) {
            setRepliedProfileTitle( obj.getRepliedProfileTitle() );
        }

        if ( hasRepliedProfileTitle() && getRepliedProfileTitle() == null &&
            obj.hasRepliedProfileTitle() && obj.getRepliedProfileTitle() != null ) {
            setRepliedProfileTitle( obj.getRepliedProfileTitle() );
        }

        if ( card == null && obj.hasCard() && obj.getCard() != null ) {
            setCard( obj.getCard() );
        }

        if ( ! hasVideoPlayer() && obj.hasVideoPlayer() ) {
            setVideoPlayer( obj.getVideoPlayer() );
        }

        if ( hasVideoPlayer() && getVideoPlayer() == null &&
            obj.hasVideoPlayer() && obj.getVideoPlayer() != null ) {
            setVideoPlayer( obj.getVideoPlayer() );
        }

        if ( ! hasVideoPlayerWidth() && obj.hasVideoPlayerWidth() ) {
            setVideoPlayerWidth( obj.getVideoPlayerWidth() );
        }

        if ( ! hasVideoPlayerHeight() && obj.hasVideoPlayerHeight() ) {
            setVideoPlayerHeight( obj.getVideoPlayerHeight() );
        }

        if ( type == null && obj.hasType() && obj.getType() != null ) {
            setType( obj.getType() );
        }

        if ( sentiment == null && obj.hasSentiment() && obj.getSentiment() != null ) {
            setSentiment( obj.getSentiment() );
        }

        if ( ! hasLang() && obj.hasLang() ) {
            setLang( obj.getLang() );
        }

        if ( hasLang() && getLang() == null &&
            obj.hasLang() && obj.getLang() != null ) {
            setLang( obj.getLang() );
        }

        if ( ! hasCategories() && obj.hasCategories() ) {
            setCategories( obj.getCategories() );
        }

        if ( ! hasDuplicates() && obj.hasDuplicates() ) {
            setDuplicates( obj.getDuplicates() );
        }

        if ( ! hasDuplicatesCount() && obj.hasDuplicatesCount() ) {
            setDuplicatesCount( obj.getDuplicatesCount() );
        }

        if ( ! hasClassifications() && obj.hasClassifications() ) {
            setClassifications( obj.getClassifications() );
        }

        if ( ! hasParentHashcode() && obj.hasParentHashcode() ) {
            setParentHashcode( obj.getParentHashcode() );
        }

        if ( hasParentHashcode() && getParentHashcode() == null &&
            obj.hasParentHashcode() && obj.getParentHashcode() != null ) {
            setParentHashcode( obj.getParentHashcode() );
        }

        if ( ! hasParentPermalink() && obj.hasParentPermalink() ) {
            setParentPermalink( obj.getParentPermalink() );
        }

        if ( hasParentPermalink() && getParentPermalink() == null &&
            obj.hasParentPermalink() && obj.getParentPermalink() != null ) {
            setParentPermalink( obj.getParentPermalink() );
        }

        if ( ! hasParentTitle() && obj.hasParentTitle() ) {
            setParentTitle( obj.getParentTitle() );
        }

        if ( hasParentTitle() && getParentTitle() == null &&
            obj.hasParentTitle() && obj.getParentTitle() != null ) {
            setParentTitle( obj.getParentTitle() );
        }

        if ( ! hasParentLang() && obj.hasParentLang() ) {
            setParentLang( obj.getParentLang() );
        }

        if ( hasParentLang() && getParentLang() == null &&
            obj.hasParentLang() && obj.getParentLang() != null ) {
            setParentLang( obj.getParentLang() );
        }

        if ( ! hasParentResource() && obj.hasParentResource() ) {
            setParentResource( obj.getParentResource() );
        }

        if ( hasParentResource() && getParentResource() == null &&
            obj.hasParentResource() && obj.getParentResource() != null ) {
            setParentResource( obj.getParentResource() );
        }

        if ( ! hasLikes() && obj.hasLikes() ) {
            setLikes( obj.getLikes() );
        }

        if ( ! hasDislikes() && obj.hasDislikes() ) {
            setDislikes( obj.getDislikes() );
        }

        if ( ! hasComments() && obj.hasComments() ) {
            setComments( obj.getComments() );
        }

        if ( ! hasViews() && obj.hasViews() ) {
            setViews( obj.getViews() );
        }

        if ( ! hasMetadataScore() && obj.hasMetadataScore() ) {
            setMetadataScore( obj.getMetadataScore() );
        }

        if ( ! hasShares() && obj.hasShares() ) {
            setShares( obj.getShares() );
        }

    }

    // go through all fields and mark them as modied.
    protected void resetModified() {

        this.hasModifiedPermalink = 0;

        this.hasModifiedPermalinkRedirect = 0;

        this.hasModifiedPermalinkRedirectDomain = 0;

        this.hasModifiedPermalinkRedirectSite = 0;

        this.hasModifiedLink = 0;

        this.hasModifiedLinkDomain = 0;

        this.hasModifiedLinkSite = 0;

        this.hasModifiedShortlink = 0;

        this.hasModifiedCanonical = 0;

        this.hasModifiedDomain = 0;

        this.hasModifiedSite = 0;

        this.hasModifiedMain = 0;

        this.hasModifiedMainLength = 0;

        this.hasModifiedMainChecksum = 0;

        this.hasModifiedMainAuthoritative = 0;

        this.hasModifiedMainFormat = 0;

        this.hasModifiedExtract = 0;

        this.hasModifiedExtractLength = 0;

        this.hasModifiedExtractChecksum = 0;

        this.hasModifiedSummaryText = 0;

        this.hasModifiedTitle = 0;

        this.hasModifiedPublisher = 0;

        this.hasModifiedSection = 0;

        this.hasModifiedDescription = 0;

        this.hasModifiedTags = 0;

        this.hasModifiedMentions = 0;

        this.hasModifiedLinks = 0;

        this.hasModifiedPublished = 0;

        this.hasModifiedModified = 0;

        this.hasModifiedPublishedPartial = 0;

        this.hasModifiedModifiedPartial = 0;

        this.hasModifiedAuthorName = 0;

        this.hasModifiedAuthorLink = 0;

        this.hasModifiedAuthorHandle = 0;

        this.hasModifiedAuthorFollowers = 0;

        this.hasModifiedAuthorLocation = 0;

        this.hasModifiedAuthorAvatarImg = 0;

        this.hasModifiedAuthorAvatarWidth = 0;

        this.hasModifiedAuthorAvatarHeight = 0;

        this.hasModifiedAuthorTwitterHandle = 0;

        this.hasModifiedAuthorTwitterUserid = 0;

        this.hasModifiedAuthorUserId = 0;

        this.hasModifiedAuthorGender = 0;

        this.hasModifiedGeoLocation = 0;

        this.hasModifiedGeoLocationId = 0;

        this.hasModifiedGeoFeaturename = 0;

        this.hasModifiedGeoPoint = 0;

        this.hasModifiedGeoBox = 0;

        this.hasModifiedGeoNameId = 0;

        this.hasModifiedGeoName = 0;

        this.hasModifiedGeoCountry = 0;

        this.hasModifiedGeoState = 0;

        this.hasModifiedGeoCity = 0;

        this.hasModifiedRatingValue = 0;

        this.hasModifiedFaviconSrc = 0;

        this.hasModifiedFaviconWidth = 0;

        this.hasModifiedFaviconHeight = 0;

        this.hasModifiedImageSrc = 0;

        this.hasModifiedImageWidth = 0;

        this.hasModifiedImageHeight = 0;

        this.hasModifiedShared = 0;

        this.hasModifiedSharedProfileLink = 0;

        this.hasModifiedSharedProfileTitle = 0;

        this.hasModifiedReplied = 0;

        this.hasModifiedRepliedProfileLink = 0;

        this.hasModifiedRepliedProfileTitle = 0;

        this.hasModifiedCard = 0;

        this.hasModifiedVideoPlayer = 0;

        this.hasModifiedVideoPlayerWidth = 0;

        this.hasModifiedVideoPlayerHeight = 0;

        this.hasModifiedType = 0;

        this.hasModifiedSentiment = 0;

        this.hasModifiedLang = 0;

        this.hasModifiedCategories = 0;

        this.hasModifiedDuplicates = 0;

        this.hasModifiedDuplicatesCount = 0;

        this.hasModifiedClassifications = 0;

        this.hasModifiedParentHashcode = 0;

        this.hasModifiedParentPermalink = 0;

        this.hasModifiedParentTitle = 0;

        this.hasModifiedParentLang = 0;

        this.hasModifiedParentResource = 0;

        this.hasModifiedLikes = 0;

        this.hasModifiedDislikes = 0;

        this.hasModifiedComments = 0;

        this.hasModifiedViews = 0;

        this.hasModifiedMetadataScore = 0;

        this.hasModifiedShares = 0;

    }

    /**
      * Return true if any field in this object has been modified.
      */
    public boolean isModified() {

        if ( this.hasModifiedPermalink() ) {
            return true;
        }

        if ( this.hasModifiedPermalinkRedirect() ) {
            return true;
        }

        if ( this.hasModifiedPermalinkRedirectDomain() ) {
            return true;
        }

        if ( this.hasModifiedPermalinkRedirectSite() ) {
            return true;
        }

        if ( this.hasModifiedLink() ) {
            return true;
        }

        if ( this.hasModifiedLinkDomain() ) {
            return true;
        }

        if ( this.hasModifiedLinkSite() ) {
            return true;
        }

        if ( this.hasModifiedShortlink() ) {
            return true;
        }

        if ( this.hasModifiedCanonical() ) {
            return true;
        }

        if ( this.hasModifiedDomain() ) {
            return true;
        }

        if ( this.hasModifiedSite() ) {
            return true;
        }

        if ( this.hasModifiedMain() ) {
            return true;
        }

        if ( this.hasModifiedMainLength() ) {
            return true;
        }

        if ( this.hasModifiedMainChecksum() ) {
            return true;
        }

        if ( this.hasModifiedMainAuthoritative() ) {
            return true;
        }

        if ( this.hasModifiedMainFormat() ) {
            return true;
        }

        if ( this.hasModifiedExtract() ) {
            return true;
        }

        if ( this.hasModifiedExtractLength() ) {
            return true;
        }

        if ( this.hasModifiedExtractChecksum() ) {
            return true;
        }

        if ( this.hasModifiedSummaryText() ) {
            return true;
        }

        if ( this.hasModifiedTitle() ) {
            return true;
        }

        if ( this.hasModifiedPublisher() ) {
            return true;
        }

        if ( this.hasModifiedSection() ) {
            return true;
        }

        if ( this.hasModifiedDescription() ) {
            return true;
        }

        if ( this.hasModifiedTags() ) {
            return true;
        }

        if ( this.hasModifiedMentions() ) {
            return true;
        }

        if ( this.hasModifiedLinks() ) {
            return true;
        }

        if ( this.hasModifiedPublished() ) {
            return true;
        }

        if ( this.hasModifiedModified() ) {
            return true;
        }

        if ( this.hasModifiedPublishedPartial() ) {
            return true;
        }

        if ( this.hasModifiedModifiedPartial() ) {
            return true;
        }

        if ( this.hasModifiedAuthorName() ) {
            return true;
        }

        if ( this.hasModifiedAuthorLink() ) {
            return true;
        }

        if ( this.hasModifiedAuthorHandle() ) {
            return true;
        }

        if ( this.hasModifiedAuthorFollowers() ) {
            return true;
        }

        if ( this.hasModifiedAuthorLocation() ) {
            return true;
        }

        if ( this.hasModifiedAuthorAvatarImg() ) {
            return true;
        }

        if ( this.hasModifiedAuthorAvatarWidth() ) {
            return true;
        }

        if ( this.hasModifiedAuthorAvatarHeight() ) {
            return true;
        }

        if ( this.hasModifiedAuthorTwitterHandle() ) {
            return true;
        }

        if ( this.hasModifiedAuthorTwitterUserid() ) {
            return true;
        }

        if ( this.hasModifiedAuthorUserId() ) {
            return true;
        }

        if ( this.hasModifiedAuthorGender() ) {
            return true;
        }

        if ( this.hasModifiedGeoLocation() ) {
            return true;
        }

        if ( this.hasModifiedGeoLocationId() ) {
            return true;
        }

        if ( this.hasModifiedGeoFeaturename() ) {
            return true;
        }

        if ( this.hasModifiedGeoPoint() ) {
            return true;
        }

        if ( this.hasModifiedGeoBox() ) {
            return true;
        }

        if ( this.hasModifiedGeoNameId() ) {
            return true;
        }

        if ( this.hasModifiedGeoName() ) {
            return true;
        }

        if ( this.hasModifiedGeoCountry() ) {
            return true;
        }

        if ( this.hasModifiedGeoState() ) {
            return true;
        }

        if ( this.hasModifiedGeoCity() ) {
            return true;
        }

        if ( this.hasModifiedRatingValue() ) {
            return true;
        }

        if ( this.hasModifiedFaviconSrc() ) {
            return true;
        }

        if ( this.hasModifiedFaviconWidth() ) {
            return true;
        }

        if ( this.hasModifiedFaviconHeight() ) {
            return true;
        }

        if ( this.hasModifiedImageSrc() ) {
            return true;
        }

        if ( this.hasModifiedImageWidth() ) {
            return true;
        }

        if ( this.hasModifiedImageHeight() ) {
            return true;
        }

        if ( this.hasModifiedShared() ) {
            return true;
        }

        if ( this.hasModifiedSharedProfileLink() ) {
            return true;
        }

        if ( this.hasModifiedSharedProfileTitle() ) {
            return true;
        }

        if ( this.hasModifiedReplied() ) {
            return true;
        }

        if ( this.hasModifiedRepliedProfileLink() ) {
            return true;
        }

        if ( this.hasModifiedRepliedProfileTitle() ) {
            return true;
        }

        if ( this.hasModifiedCard() ) {
            return true;
        }

        if ( this.hasModifiedVideoPlayer() ) {
            return true;
        }

        if ( this.hasModifiedVideoPlayerWidth() ) {
            return true;
        }

        if ( this.hasModifiedVideoPlayerHeight() ) {
            return true;
        }

        if ( this.hasModifiedType() ) {
            return true;
        }

        if ( this.hasModifiedSentiment() ) {
            return true;
        }

        if ( this.hasModifiedLang() ) {
            return true;
        }

        if ( this.hasModifiedCategories() ) {
            return true;
        }

        if ( this.hasModifiedDuplicates() ) {
            return true;
        }

        if ( this.hasModifiedDuplicatesCount() ) {
            return true;
        }

        if ( this.hasModifiedClassifications() ) {
            return true;
        }

        if ( this.hasModifiedParentHashcode() ) {
            return true;
        }

        if ( this.hasModifiedParentPermalink() ) {
            return true;
        }

        if ( this.hasModifiedParentTitle() ) {
            return true;
        }

        if ( this.hasModifiedParentLang() ) {
            return true;
        }

        if ( this.hasModifiedParentResource() ) {
            return true;
        }

        if ( this.hasModifiedLikes() ) {
            return true;
        }

        if ( this.hasModifiedDislikes() ) {
            return true;
        }

        if ( this.hasModifiedComments() ) {
            return true;
        }

        if ( this.hasModifiedViews() ) {
            return true;
        }

        if ( this.hasModifiedMetadataScore() ) {
            return true;
        }

        if ( this.hasModifiedShares() ) {
            return true;
        }

        return false;

    }

    /**
     * Mark this object as constructed so that there are no undefined fields.
     */
    public void markConstructed() {
        this.constructed = true;
    }

    @Override
    public String toString() {
        StringBuilder buff = new StringBuilder();

        buff.append( getClass().getName() );
        buff.append( ": " );

        if ( hasPermalink > 0 ) {

            buff.append( "permalink=" );
            buff.append( permalink );
            buff.append( " " );

        }

        if ( hasPermalinkRedirect > 0 ) {

            buff.append( "permalinkRedirect=" );
            buff.append( permalinkRedirect );
            buff.append( " " );

        }

        if ( hasPermalinkRedirectDomain > 0 ) {

            buff.append( "permalinkRedirectDomain=" );
            buff.append( permalinkRedirectDomain );
            buff.append( " " );

        }

        if ( hasPermalinkRedirectSite > 0 ) {

            buff.append( "permalinkRedirectSite=" );
            buff.append( permalinkRedirectSite );
            buff.append( " " );

        }

        if ( hasLink > 0 ) {

            buff.append( "link=" );
            buff.append( link );
            buff.append( " " );

        }

        if ( hasLinkDomain > 0 ) {

            buff.append( "linkDomain=" );
            buff.append( linkDomain );
            buff.append( " " );

        }

        if ( hasLinkSite > 0 ) {

            buff.append( "linkSite=" );
            buff.append( linkSite );
            buff.append( " " );

        }

        if ( hasShortlink > 0 ) {

            buff.append( "shortlink=" );
            buff.append( shortlink );
            buff.append( " " );

        }

        if ( hasCanonical > 0 ) {

            buff.append( "canonical=" );
            buff.append( canonical );
            buff.append( " " );

        }

        if ( hasDomain > 0 ) {

            buff.append( "domain=" );
            buff.append( domain );
            buff.append( " " );

        }

        if ( hasSite > 0 ) {

            buff.append( "site=" );
            buff.append( site );
            buff.append( " " );

        }

        if ( hasMain > 0 ) {

            buff.append( "main=" );
            buff.append( main );
            buff.append( " " );

        }

        if ( hasMainLength > 0 ) {

            buff.append( "mainLength=" );
            buff.append( mainLength );
            buff.append( " " );

        }

        if ( hasMainChecksum > 0 ) {

            buff.append( "mainChecksum=" );
            buff.append( mainChecksum );
            buff.append( " " );

        }

        if ( hasMainAuthoritative > 0 ) {

            buff.append( "mainAuthoritative=" );
            buff.append( mainAuthoritative );
            buff.append( " " );

        }

        if ( hasMainFormat > 0 ) {

            buff.append( "mainFormat=" );
            buff.append( mainFormat );
            buff.append( " " );

        }

        if ( hasExtract > 0 ) {

            buff.append( "extract=" );
            buff.append( extract );
            buff.append( " " );

        }

        if ( hasExtractLength > 0 ) {

            buff.append( "extractLength=" );
            buff.append( extractLength );
            buff.append( " " );

        }

        if ( hasExtractChecksum > 0 ) {

            buff.append( "extractChecksum=" );
            buff.append( extractChecksum );
            buff.append( " " );

        }

        if ( hasSummaryText > 0 ) {

            buff.append( "summaryText=" );
            buff.append( summaryText );
            buff.append( " " );

        }

        if ( hasTitle > 0 ) {

            buff.append( "title=" );
            buff.append( title );
            buff.append( " " );

        }

        if ( hasPublisher > 0 ) {

            buff.append( "publisher=" );
            buff.append( publisher );
            buff.append( " " );

        }

        if ( hasSection > 0 ) {

            buff.append( "section=" );
            buff.append( section );
            buff.append( " " );

        }

        if ( hasDescription > 0 ) {

            buff.append( "description=" );
            buff.append( description );
            buff.append( " " );

        }

        if ( hasTags > 0 ) {

            buff.append( "tags=" );
            buff.append( tags );
            buff.append( " " );

        }

        if ( hasMentions > 0 ) {

            buff.append( "mentions=" );
            buff.append( mentions );
            buff.append( " " );

        }

        if ( hasLinks > 0 ) {

            buff.append( "links=" );
            buff.append( links );
            buff.append( " " );

        }

        if ( hasPublished > 0 ) {

            buff.append( "published=" );
            if ( published != null ) {
                buff.append( toISO8601( published ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasModified > 0 ) {

            buff.append( "modified=" );
            if ( modified != null ) {
                buff.append( toISO8601( modified ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasPublishedPartial > 0 ) {

            buff.append( "publishedPartial=" );
            if ( publishedPartial != null ) {
                buff.append( toISO8601( publishedPartial ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasModifiedPartial > 0 ) {

            buff.append( "modifiedPartial=" );
            if ( modifiedPartial != null ) {
                buff.append( toISO8601( modifiedPartial ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasAuthorName > 0 ) {

            buff.append( "authorName=" );
            buff.append( authorName );
            buff.append( " " );

        }

        if ( hasAuthorLink > 0 ) {

            buff.append( "authorLink=" );
            buff.append( authorLink );
            buff.append( " " );

        }

        if ( hasAuthorHandle > 0 ) {

            buff.append( "authorHandle=" );
            buff.append( authorHandle );
            buff.append( " " );

        }

        if ( hasAuthorFollowers > 0 ) {

            buff.append( "authorFollowers=" );
            buff.append( authorFollowers );
            buff.append( " " );

        }

        if ( hasAuthorLocation > 0 ) {

            buff.append( "authorLocation=" );
            buff.append( authorLocation );
            buff.append( " " );

        }

        if ( hasAuthorAvatarImg > 0 ) {

            buff.append( "authorAvatarImg=" );
            buff.append( authorAvatarImg );
            buff.append( " " );

        }

        if ( hasAuthorAvatarWidth > 0 ) {

            buff.append( "authorAvatarWidth=" );
            buff.append( authorAvatarWidth );
            buff.append( " " );

        }

        if ( hasAuthorAvatarHeight > 0 ) {

            buff.append( "authorAvatarHeight=" );
            buff.append( authorAvatarHeight );
            buff.append( " " );

        }

        if ( hasAuthorTwitterHandle > 0 ) {

            buff.append( "authorTwitterHandle=" );
            buff.append( authorTwitterHandle );
            buff.append( " " );

        }

        if ( hasAuthorTwitterUserid > 0 ) {

            buff.append( "authorTwitterUserid=" );
            buff.append( authorTwitterUserid );
            buff.append( " " );

        }

        if ( hasAuthorUserId > 0 ) {

            buff.append( "authorUserId=" );
            buff.append( authorUserId );
            buff.append( " " );

        }

        if ( hasAuthorGender > 0 ) {

            buff.append( "authorGender=" );
            buff.append( authorGender );
            buff.append( " " );

        }

        if ( hasGeoLocation > 0 ) {

            buff.append( "geoLocation=" );
            buff.append( geoLocation );
            buff.append( " " );

        }

        if ( hasGeoLocationId > 0 ) {

            buff.append( "geoLocationId=" );
            buff.append( geoLocationId );
            buff.append( " " );

        }

        if ( hasGeoFeaturename > 0 ) {

            buff.append( "geoFeaturename=" );
            buff.append( geoFeaturename );
            buff.append( " " );

        }

        if ( hasGeoPoint > 0 ) {

            buff.append( "geoPoint=" );
            buff.append( geoPoint );
            buff.append( " " );

        }

        if ( hasGeoBox > 0 ) {

            buff.append( "geoBox=" );
            buff.append( geoBox );
            buff.append( " " );

        }

        if ( hasGeoNameId > 0 ) {

            buff.append( "geoNameId=" );
            buff.append( geoNameId );
            buff.append( " " );

        }

        if ( hasGeoName > 0 ) {

            buff.append( "geoName=" );
            buff.append( geoName );
            buff.append( " " );

        }

        if ( hasGeoCountry > 0 ) {

            buff.append( "geoCountry=" );
            buff.append( geoCountry );
            buff.append( " " );

        }

        if ( hasGeoState > 0 ) {

            buff.append( "geoState=" );
            buff.append( geoState );
            buff.append( " " );

        }

        if ( hasGeoCity > 0 ) {

            buff.append( "geoCity=" );
            buff.append( geoCity );
            buff.append( " " );

        }

        if ( hasRatingValue > 0 ) {

            buff.append( "ratingValue=" );
            buff.append( ratingValue );
            buff.append( " " );

        }

        if ( hasFaviconSrc > 0 ) {

            buff.append( "faviconSrc=" );
            buff.append( faviconSrc );
            buff.append( " " );

        }

        if ( hasFaviconWidth > 0 ) {

            buff.append( "faviconWidth=" );
            buff.append( faviconWidth );
            buff.append( " " );

        }

        if ( hasFaviconHeight > 0 ) {

            buff.append( "faviconHeight=" );
            buff.append( faviconHeight );
            buff.append( " " );

        }

        if ( hasImageSrc > 0 ) {

            buff.append( "imageSrc=" );
            buff.append( imageSrc );
            buff.append( " " );

        }

        if ( hasImageWidth > 0 ) {

            buff.append( "imageWidth=" );
            buff.append( imageWidth );
            buff.append( " " );

        }

        if ( hasImageHeight > 0 ) {

            buff.append( "imageHeight=" );
            buff.append( imageHeight );
            buff.append( " " );

        }

        if ( hasShared > 0 ) {

            buff.append( "shared=" );
            buff.append( shared );
            buff.append( " " );

        }

        if ( hasSharedProfileLink > 0 ) {

            buff.append( "sharedProfileLink=" );
            buff.append( sharedProfileLink );
            buff.append( " " );

        }

        if ( hasSharedProfileTitle > 0 ) {

            buff.append( "sharedProfileTitle=" );
            buff.append( sharedProfileTitle );
            buff.append( " " );

        }

        if ( hasReplied > 0 ) {

            buff.append( "replied=" );
            buff.append( replied );
            buff.append( " " );

        }

        if ( hasRepliedProfileLink > 0 ) {

            buff.append( "repliedProfileLink=" );
            buff.append( repliedProfileLink );
            buff.append( " " );

        }

        if ( hasRepliedProfileTitle > 0 ) {

            buff.append( "repliedProfileTitle=" );
            buff.append( repliedProfileTitle );
            buff.append( " " );

        }

        if ( hasCard > 0 ) {

            buff.append( "card=" );
            buff.append( card );
            buff.append( " " );

        }

        if ( hasVideoPlayer > 0 ) {

            buff.append( "videoPlayer=" );
            buff.append( videoPlayer );
            buff.append( " " );

        }

        if ( hasVideoPlayerWidth > 0 ) {

            buff.append( "videoPlayerWidth=" );
            buff.append( videoPlayerWidth );
            buff.append( " " );

        }

        if ( hasVideoPlayerHeight > 0 ) {

            buff.append( "videoPlayerHeight=" );
            buff.append( videoPlayerHeight );
            buff.append( " " );

        }

        if ( hasType > 0 ) {

            buff.append( "type=" );
            buff.append( type );
            buff.append( " " );

        }

        if ( hasSentiment > 0 ) {

            buff.append( "sentiment=" );
            buff.append( sentiment );
            buff.append( " " );

        }

        if ( hasLang > 0 ) {

            buff.append( "lang=" );
            buff.append( lang );
            buff.append( " " );

        }

        if ( hasCategories > 0 ) {

            buff.append( "categories=" );
            buff.append( categories );
            buff.append( " " );

        }

        if ( hasDuplicates > 0 ) {

            buff.append( "duplicates=" );
            buff.append( duplicates );
            buff.append( " " );

        }

        if ( hasDuplicatesCount > 0 ) {

            buff.append( "duplicatesCount=" );
            buff.append( duplicatesCount );
            buff.append( " " );

        }

        if ( hasClassifications > 0 ) {

            buff.append( "classifications=" );
            buff.append( classifications );
            buff.append( " " );

        }

        if ( hasParentHashcode > 0 ) {

            buff.append( "parentHashcode=" );
            buff.append( parentHashcode );
            buff.append( " " );

        }

        if ( hasParentPermalink > 0 ) {

            buff.append( "parentPermalink=" );
            buff.append( parentPermalink );
            buff.append( " " );

        }

        if ( hasParentTitle > 0 ) {

            buff.append( "parentTitle=" );
            buff.append( parentTitle );
            buff.append( " " );

        }

        if ( hasParentLang > 0 ) {

            buff.append( "parentLang=" );
            buff.append( parentLang );
            buff.append( " " );

        }

        if ( hasParentResource > 0 ) {

            buff.append( "parentResource=" );
            buff.append( parentResource );
            buff.append( " " );

        }

        if ( hasLikes > 0 ) {

            buff.append( "likes=" );
            buff.append( likes );
            buff.append( " " );

        }

        if ( hasDislikes > 0 ) {

            buff.append( "dislikes=" );
            buff.append( dislikes );
            buff.append( " " );

        }

        if ( hasComments > 0 ) {

            buff.append( "comments=" );
            buff.append( comments );
            buff.append( " " );

        }

        if ( hasViews > 0 ) {

            buff.append( "views=" );
            buff.append( views );
            buff.append( " " );

        }

        if ( hasMetadataScore > 0 ) {

            buff.append( "metadataScore=" );
            buff.append( metadataScore );
            buff.append( " " );

        }

        if ( hasShares > 0 ) {

            buff.append( "shares=" );
            buff.append( shares );
            buff.append( " " );

        }

        return buff.toString().trim();
    }

    @Override
    public boolean equals( Object obj ) {

        if ( ! ( obj instanceof BaseContentMetadata ) ) {
            return false;
        }

        // the object we're comparing to...
        BaseContentMetadata cmp = (BaseContentMetadata)obj;

        // they should either be both false or both true...
        if ( hasPermalink() != cmp.hasPermalink() ) {
            return false;
        }

        if ( ! equalsWithNull( permalink, cmp.permalink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPermalinkRedirect() != cmp.hasPermalinkRedirect() ) {
            return false;
        }

        if ( ! equalsWithNull( permalinkRedirect, cmp.permalinkRedirect ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPermalinkRedirectDomain() != cmp.hasPermalinkRedirectDomain() ) {
            return false;
        }

        if ( ! equalsWithNull( permalinkRedirectDomain, cmp.permalinkRedirectDomain ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPermalinkRedirectSite() != cmp.hasPermalinkRedirectSite() ) {
            return false;
        }

        if ( ! equalsWithNull( permalinkRedirectSite, cmp.permalinkRedirectSite ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLink() != cmp.hasLink() ) {
            return false;
        }

        if ( ! equalsWithNull( link, cmp.link ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLinkDomain() != cmp.hasLinkDomain() ) {
            return false;
        }

        if ( ! equalsWithNull( linkDomain, cmp.linkDomain ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLinkSite() != cmp.hasLinkSite() ) {
            return false;
        }

        if ( ! equalsWithNull( linkSite, cmp.linkSite ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasShortlink() != cmp.hasShortlink() ) {
            return false;
        }

        if ( ! equalsWithNull( shortlink, cmp.shortlink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasCanonical() != cmp.hasCanonical() ) {
            return false;
        }

        if ( ! equalsWithNull( canonical, cmp.canonical ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDomain() != cmp.hasDomain() ) {
            return false;
        }

        if ( ! equalsWithNull( domain, cmp.domain ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSite() != cmp.hasSite() ) {
            return false;
        }

        if ( ! equalsWithNull( site, cmp.site ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMain() != cmp.hasMain() ) {
            return false;
        }

        if ( ! equalsWithNull( main, cmp.main ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMainLength() != cmp.hasMainLength() ) {
            return false;
        }

        if ( mainLength != cmp.mainLength ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMainChecksum() != cmp.hasMainChecksum() ) {
            return false;
        }

        if ( ! equalsWithNull( mainChecksum, cmp.mainChecksum ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMainAuthoritative() != cmp.hasMainAuthoritative() ) {
            return false;
        }

        if ( mainAuthoritative != cmp.mainAuthoritative ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMainFormat() != cmp.hasMainFormat() ) {
            return false;
        }

        if ( mainFormat != cmp.mainFormat ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasExtract() != cmp.hasExtract() ) {
            return false;
        }

        if ( ! equalsWithNull( extract, cmp.extract ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasExtractLength() != cmp.hasExtractLength() ) {
            return false;
        }

        if ( extractLength != cmp.extractLength ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasExtractChecksum() != cmp.hasExtractChecksum() ) {
            return false;
        }

        if ( ! equalsWithNull( extractChecksum, cmp.extractChecksum ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSummaryText() != cmp.hasSummaryText() ) {
            return false;
        }

        if ( ! equalsWithNull( summaryText, cmp.summaryText ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasTitle() != cmp.hasTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( title, cmp.title ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPublisher() != cmp.hasPublisher() ) {
            return false;
        }

        if ( ! equalsWithNull( publisher, cmp.publisher ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSection() != cmp.hasSection() ) {
            return false;
        }

        if ( ! equalsWithNull( section, cmp.section ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDescription() != cmp.hasDescription() ) {
            return false;
        }

        if ( ! equalsWithNull( description, cmp.description ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasTags() != cmp.hasTags() ) {
            return false;
        }

        if ( ! equalsWithNull( tags, cmp.tags ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMentions() != cmp.hasMentions() ) {
            return false;
        }

        if ( ! equalsWithNull( mentions, cmp.mentions ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLinks() != cmp.hasLinks() ) {
            return false;
        }

        if ( ! equalsWithNull( links, cmp.links ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPublished() != cmp.hasPublished() ) {
            return false;
        }

        if ( ! equalsWithNull( published, cmp.published ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasModified() != cmp.hasModified() ) {
            return false;
        }

        if ( ! equalsWithNull( modified, cmp.modified ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPublishedPartial() != cmp.hasPublishedPartial() ) {
            return false;
        }

        if ( ! equalsWithNull( publishedPartial, cmp.publishedPartial ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasModifiedPartial() != cmp.hasModifiedPartial() ) {
            return false;
        }

        if ( ! equalsWithNull( modifiedPartial, cmp.modifiedPartial ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorName() != cmp.hasAuthorName() ) {
            return false;
        }

        if ( ! equalsWithNull( authorName, cmp.authorName ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorLink() != cmp.hasAuthorLink() ) {
            return false;
        }

        if ( ! equalsWithNull( authorLink, cmp.authorLink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorHandle() != cmp.hasAuthorHandle() ) {
            return false;
        }

        if ( ! equalsWithNull( authorHandle, cmp.authorHandle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorFollowers() != cmp.hasAuthorFollowers() ) {
            return false;
        }

        if ( authorFollowers != cmp.authorFollowers ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorLocation() != cmp.hasAuthorLocation() ) {
            return false;
        }

        if ( ! equalsWithNull( authorLocation, cmp.authorLocation ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorAvatarImg() != cmp.hasAuthorAvatarImg() ) {
            return false;
        }

        if ( ! equalsWithNull( authorAvatarImg, cmp.authorAvatarImg ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorAvatarWidth() != cmp.hasAuthorAvatarWidth() ) {
            return false;
        }

        if ( authorAvatarWidth != cmp.authorAvatarWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorAvatarHeight() != cmp.hasAuthorAvatarHeight() ) {
            return false;
        }

        if ( authorAvatarHeight != cmp.authorAvatarHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorTwitterHandle() != cmp.hasAuthorTwitterHandle() ) {
            return false;
        }

        if ( ! equalsWithNull( authorTwitterHandle, cmp.authorTwitterHandle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorTwitterUserid() != cmp.hasAuthorTwitterUserid() ) {
            return false;
        }

        if ( ! equalsWithNull( authorTwitterUserid, cmp.authorTwitterUserid ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorUserId() != cmp.hasAuthorUserId() ) {
            return false;
        }

        if ( ! equalsWithNull( authorUserId, cmp.authorUserId ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorGender() != cmp.hasAuthorGender() ) {
            return false;
        }

        if ( authorGender != cmp.authorGender ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoLocation() != cmp.hasGeoLocation() ) {
            return false;
        }

        if ( ! equalsWithNull( geoLocation, cmp.geoLocation ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoLocationId() != cmp.hasGeoLocationId() ) {
            return false;
        }

        if ( ! equalsWithNull( geoLocationId, cmp.geoLocationId ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoFeaturename() != cmp.hasGeoFeaturename() ) {
            return false;
        }

        if ( ! equalsWithNull( geoFeaturename, cmp.geoFeaturename ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoPoint() != cmp.hasGeoPoint() ) {
            return false;
        }

        if ( ! equalsWithNull( geoPoint, cmp.geoPoint ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoBox() != cmp.hasGeoBox() ) {
            return false;
        }

        if ( ! equalsWithNull( geoBox, cmp.geoBox ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoNameId() != cmp.hasGeoNameId() ) {
            return false;
        }

        if ( ! equalsWithNull( geoNameId, cmp.geoNameId ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoName() != cmp.hasGeoName() ) {
            return false;
        }

        if ( ! equalsWithNull( geoName, cmp.geoName ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoCountry() != cmp.hasGeoCountry() ) {
            return false;
        }

        if ( ! equalsWithNull( geoCountry, cmp.geoCountry ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoState() != cmp.hasGeoState() ) {
            return false;
        }

        if ( ! equalsWithNull( geoState, cmp.geoState ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoCity() != cmp.hasGeoCity() ) {
            return false;
        }

        if ( ! equalsWithNull( geoCity, cmp.geoCity ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasRatingValue() != cmp.hasRatingValue() ) {
            return false;
        }

        if ( ! equalsWithNull( ratingValue, cmp.ratingValue ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasFaviconSrc() != cmp.hasFaviconSrc() ) {
            return false;
        }

        if ( ! equalsWithNull( faviconSrc, cmp.faviconSrc ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasFaviconWidth() != cmp.hasFaviconWidth() ) {
            return false;
        }

        if ( faviconWidth != cmp.faviconWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasFaviconHeight() != cmp.hasFaviconHeight() ) {
            return false;
        }

        if ( faviconHeight != cmp.faviconHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasImageSrc() != cmp.hasImageSrc() ) {
            return false;
        }

        if ( ! equalsWithNull( imageSrc, cmp.imageSrc ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasImageWidth() != cmp.hasImageWidth() ) {
            return false;
        }

        if ( imageWidth != cmp.imageWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasImageHeight() != cmp.hasImageHeight() ) {
            return false;
        }

        if ( imageHeight != cmp.imageHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasShared() != cmp.hasShared() ) {
            return false;
        }

        if ( shared != cmp.shared ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedProfileLink() != cmp.hasSharedProfileLink() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedProfileLink, cmp.sharedProfileLink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedProfileTitle() != cmp.hasSharedProfileTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedProfileTitle, cmp.sharedProfileTitle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasReplied() != cmp.hasReplied() ) {
            return false;
        }

        if ( replied != cmp.replied ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasRepliedProfileLink() != cmp.hasRepliedProfileLink() ) {
            return false;
        }

        if ( ! equalsWithNull( repliedProfileLink, cmp.repliedProfileLink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasRepliedProfileTitle() != cmp.hasRepliedProfileTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( repliedProfileTitle, cmp.repliedProfileTitle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasCard() != cmp.hasCard() ) {
            return false;
        }

        if ( card != cmp.card ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasVideoPlayer() != cmp.hasVideoPlayer() ) {
            return false;
        }

        if ( ! equalsWithNull( videoPlayer, cmp.videoPlayer ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasVideoPlayerWidth() != cmp.hasVideoPlayerWidth() ) {
            return false;
        }

        if ( videoPlayerWidth != cmp.videoPlayerWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasVideoPlayerHeight() != cmp.hasVideoPlayerHeight() ) {
            return false;
        }

        if ( videoPlayerHeight != cmp.videoPlayerHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasType() != cmp.hasType() ) {
            return false;
        }

        if ( type != cmp.type ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSentiment() != cmp.hasSentiment() ) {
            return false;
        }

        if ( sentiment != cmp.sentiment ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLang() != cmp.hasLang() ) {
            return false;
        }

        if ( ! equalsWithNull( lang, cmp.lang ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasCategories() != cmp.hasCategories() ) {
            return false;
        }

        if ( ! equalsWithNull( categories, cmp.categories ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDuplicates() != cmp.hasDuplicates() ) {
            return false;
        }

        if ( ! equalsWithNull( duplicates, cmp.duplicates ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDuplicatesCount() != cmp.hasDuplicatesCount() ) {
            return false;
        }

        if ( duplicatesCount != cmp.duplicatesCount ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasClassifications() != cmp.hasClassifications() ) {
            return false;
        }

        if ( ! equalsWithNull( classifications, cmp.classifications ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentHashcode() != cmp.hasParentHashcode() ) {
            return false;
        }

        if ( ! equalsWithNull( parentHashcode, cmp.parentHashcode ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentPermalink() != cmp.hasParentPermalink() ) {
            return false;
        }

        if ( ! equalsWithNull( parentPermalink, cmp.parentPermalink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentTitle() != cmp.hasParentTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( parentTitle, cmp.parentTitle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentLang() != cmp.hasParentLang() ) {
            return false;
        }

        if ( ! equalsWithNull( parentLang, cmp.parentLang ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentResource() != cmp.hasParentResource() ) {
            return false;
        }

        if ( ! equalsWithNull( parentResource, cmp.parentResource ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLikes() != cmp.hasLikes() ) {
            return false;
        }

        if ( likes != cmp.likes ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDislikes() != cmp.hasDislikes() ) {
            return false;
        }

        if ( dislikes != cmp.dislikes ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasComments() != cmp.hasComments() ) {
            return false;
        }

        if ( comments != cmp.comments ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasViews() != cmp.hasViews() ) {
            return false;
        }

        if ( views != cmp.views ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMetadataScore() != cmp.hasMetadataScore() ) {
            return false;
        }

        if ( metadataScore != cmp.metadataScore ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasShares() != cmp.hasShares() ) {
            return false;
        }

        if ( shares != cmp.shares ) {
            return false;
        }

        // if we have reached this point then they are equal.
        return true;

    }

    public static boolean equalsWithNull( Date d0, Date d1 ) {

        // either one is null
        if ( d0 == null && d1 != null )
            return false;

        // either one is null
        if ( d0 != null && d1 == null )
            return false;

        // they're both null
        if ( d0 == null && d1 == null )
            return true;

        long t0 = d0.getTime();
        long t1 = d1.getTime();

        // ok, they're both non-null
        return t0 == t1;

    }

    /** compare two objects factoring in nulls */
    public static boolean equalsWithNull( Object obj0, Object obj1 ) {

        // either one is null
        if ( obj0 == null && obj1 != null )
            return false;

        // either one is null
        if ( obj0 != null && obj1 == null )
            return false;

        // they're both null
        if ( obj0 == null && obj1 == null )
            return true;

        // ok, they're both non-null
        return obj0.equals( obj1 );

    }

    public void toJSON( boolean prettyPrint, OutputStream out ) {

        asJSON()
          .withPrettyPrint( prettyPrint )
          .withOutputStream( out )
          .toOutputStream();

    }

    @Override
    public String toJSON() {
        return toJSON( false );
    }

    public String toJSON( boolean prettyPrint ) {

        return asJSON()
            .withPrettyPrint( true )
            .toJSON()
            ;

    }

    public JSONBuilder asJSON() {
        return new JSONBuilder();
    }

    public class JSONBuilder {

        protected boolean prettyPrint = true;

        protected OutputStream out = null;

        protected Writer writer = null;

        protected boolean camelCaseNames = UNDERSCORE == false;

        protected boolean enableBinaryFields = false;

        public JSONBuilder withPrettyPrint( boolean prettyPrint ) {
            this.prettyPrint = prettyPrint;
            return this;
        }

        public JSONBuilder withOutputStream( OutputStream out ) {
            this.out = out;
            return this;
        }

        public JSONBuilder withWriter( Writer writer ) {
            this.writer = writer;
            return this;
        }

        /**
         * Set whether to use camel case names or not.  This is probably best
         * left set as the default.
         */
        public JSONBuilder withCamelCaseName( boolean camelCaseNames ) {
            this.camelCaseNames = camelCaseNames;
            return this;
        }

        /**
         * When true, we enable writing binary fields in the response JSON.
         */
        public JSONBuilder withEnableBinaryFields( boolean enableBinaryFields ) {
            this.enableBinaryFields = enableBinaryFields;
            return this;
        }

        /**
         * Peform the conversion to JSON with the given options.
         *
         * @return
         */
        public String toJSON() {

            try( FastByteArrayOutputStream out = new FastByteArrayOutputStream(); ) {

                withOutputStream( out );
                toOutputStream();

                // TODO: this is not a fast way of converting to a string.  The
                // preferred way to do this is to work with the raw byte[] and
                // pass the byte, offset, length, and Charset to String but
                // ByteArrayOutputStream won't allow us to do this directly.

                return out.toString( UTF_8 );

            } catch( IOException e ) {
                throw new RuntimeException( e );
            }

        }

        /**
         * Write the JSON to the output stream given.
         */
        public void toOutputStream() {
            BaseContentMetadata.this.toJSON( this );
        }

        public JsonGenerator createGenerator(JsonFactory jsonFactory) throws IOException {

            if ( writer != null ) {
                return jsonFactory.createGenerator( writer );
            } else if ( out != null ) {
                return jsonFactory.createGenerator( out, JsonEncoding.UTF8 );
            } else {
                throw new RuntimeException( "No writer or output stream specified." );
            }

        }

    }

    public void toJSON( JSONBuilder builder ) {
        toJSON( JSON_FACTORY, builder );
    }

    public void toJSON( JsonFactory jsonFactory, JSONBuilder builder ) {

        try ( JsonGenerator generator = builder.createGenerator( jsonFactory ) ) {

            if ( builder.prettyPrint ) {
                generator.useDefaultPrettyPrinter();
            }

            generator.disable( JsonGenerator.Feature.AUTO_CLOSE_TARGET );

            generator.writeStartObject();

            String __name = null;

            // ***** json encode member permalink from String

            __name = "permalink";

            if ( ! builder.camelCaseNames ) {
                __name = "permalink";
            }

            if ( this.hasPermalink > 0 ) {

                if ( permalink != null ) {
                    generator.writeStringField( __name, permalink );
                }

            }

            // ***** json encode member permalink_redirect from String

            __name = "permalinkRedirect";

            if ( ! builder.camelCaseNames ) {
                __name = "permalink_redirect";
            }

            if ( this.hasPermalinkRedirect > 0 ) {

                if ( permalinkRedirect != null ) {
                    generator.writeStringField( __name, permalinkRedirect );
                }

            }

            // ***** json encode member permalink_redirect_domain from String

            __name = "permalinkRedirectDomain";

            if ( ! builder.camelCaseNames ) {
                __name = "permalink_redirect_domain";
            }

            if ( this.hasPermalinkRedirectDomain > 0 ) {

                if ( permalinkRedirectDomain != null ) {
                    generator.writeStringField( __name, permalinkRedirectDomain );
                }

            }

            // ***** json encode member permalink_redirect_site from String

            __name = "permalinkRedirectSite";

            if ( ! builder.camelCaseNames ) {
                __name = "permalink_redirect_site";
            }

            if ( this.hasPermalinkRedirectSite > 0 ) {

                if ( permalinkRedirectSite != null ) {
                    generator.writeStringField( __name, permalinkRedirectSite );
                }

            }

            // ***** json encode member link from String

            __name = "link";

            if ( ! builder.camelCaseNames ) {
                __name = "link";
            }

            if ( this.hasLink > 0 ) {

                if ( link != null ) {
                    generator.writeStringField( __name, link );
                }

            }

            // ***** json encode member link_domain from String

            __name = "linkDomain";

            if ( ! builder.camelCaseNames ) {
                __name = "link_domain";
            }

            if ( this.hasLinkDomain > 0 ) {

                if ( linkDomain != null ) {
                    generator.writeStringField( __name, linkDomain );
                }

            }

            // ***** json encode member link_site from String

            __name = "linkSite";

            if ( ! builder.camelCaseNames ) {
                __name = "link_site";
            }

            if ( this.hasLinkSite > 0 ) {

                if ( linkSite != null ) {
                    generator.writeStringField( __name, linkSite );
                }

            }

            // ***** json encode member shortlink from String

            __name = "shortlink";

            if ( ! builder.camelCaseNames ) {
                __name = "shortlink";
            }

            if ( this.hasShortlink > 0 ) {

                if ( shortlink != null ) {
                    generator.writeStringField( __name, shortlink );
                }

            }

            // ***** json encode member canonical from String

            __name = "canonical";

            if ( ! builder.camelCaseNames ) {
                __name = "canonical";
            }

            if ( this.hasCanonical > 0 ) {

                if ( canonical != null ) {
                    generator.writeStringField( __name, canonical );
                }

            }

            // ***** json encode member domain from String

            __name = "domain";

            if ( ! builder.camelCaseNames ) {
                __name = "domain";
            }

            if ( this.hasDomain > 0 ) {

                if ( domain != null ) {
                    generator.writeStringField( __name, domain );
                }

            }

            // ***** json encode member site from String

            __name = "site";

            if ( ! builder.camelCaseNames ) {
                __name = "site";
            }

            if ( this.hasSite > 0 ) {

                if ( site != null ) {
                    generator.writeStringField( __name, site );
                }

            }

            // ***** json encode member main from String

            __name = "main";

            if ( ! builder.camelCaseNames ) {
                __name = "main";
            }

            if ( this.hasMain > 0 ) {

                if ( main != null ) {
                    generator.writeStringField( __name, main );
                }

            }

            // ***** json encode member main_length from int

            __name = "mainLength";

            if ( ! builder.camelCaseNames ) {
                __name = "main_length";
            }

            if ( this.hasMainLength > 0 ) {

                if ( hasDefinedMainLength )
                    generator.writeNumberField( __name, mainLength );

            }

            // ***** json encode member main_checksum from String

            __name = "mainChecksum";

            if ( ! builder.camelCaseNames ) {
                __name = "main_checksum";
            }

            if ( this.hasMainChecksum > 0 ) {

                if ( mainChecksum != null ) {
                    generator.writeStringField( __name, mainChecksum );
                }

            }

            // ***** json encode member main_authoritative from boolean

            __name = "mainAuthoritative";

            if ( ! builder.camelCaseNames ) {
                __name = "main_authoritative";
            }

            if ( this.hasMainAuthoritative > 0 ) {

                if ( hasDefinedMainAuthoritative )
                    generator.writeBooleanField( __name, mainAuthoritative );

            }

            // ***** json encode member main_format from int

            __name = "mainFormat";

            if ( ! builder.camelCaseNames ) {
                __name = "main_format";
            }

            if ( this.hasMainFormat > 0 ) {

                if ( mainFormat != null )
                    generator.writeStringField( __name, mainFormat.toString() );

            }

            // ***** json encode member extract from String

            __name = "extract";

            if ( ! builder.camelCaseNames ) {
                __name = "extract";
            }

            if ( this.hasExtract > 0 ) {

                if ( extract != null ) {
                    generator.writeStringField( __name, extract );
                }

            }

            // ***** json encode member extract_length from int

            __name = "extractLength";

            if ( ! builder.camelCaseNames ) {
                __name = "extract_length";
            }

            if ( this.hasExtractLength > 0 ) {

                if ( hasDefinedExtractLength )
                    generator.writeNumberField( __name, extractLength );

            }

            // ***** json encode member extract_checksum from String

            __name = "extractChecksum";

            if ( ! builder.camelCaseNames ) {
                __name = "extract_checksum";
            }

            if ( this.hasExtractChecksum > 0 ) {

                if ( extractChecksum != null ) {
                    generator.writeStringField( __name, extractChecksum );
                }

            }

            // ***** json encode member summary_text from String

            __name = "summaryText";

            if ( ! builder.camelCaseNames ) {
                __name = "summary_text";
            }

            if ( this.hasSummaryText > 0 ) {

                if ( summaryText != null ) {
                    generator.writeStringField( __name, summaryText );
                }

            }

            // ***** json encode member title from String

            __name = "title";

            if ( ! builder.camelCaseNames ) {
                __name = "title";
            }

            if ( this.hasTitle > 0 ) {

                if ( title != null ) {
                    generator.writeStringField( __name, title );
                }

            }

            // ***** json encode member publisher from String

            __name = "publisher";

            if ( ! builder.camelCaseNames ) {
                __name = "publisher";
            }

            if ( this.hasPublisher > 0 ) {

                if ( publisher != null ) {
                    generator.writeStringField( __name, publisher );
                }

            }

            // ***** json encode member section from String

            __name = "section";

            if ( ! builder.camelCaseNames ) {
                __name = "section";
            }

            if ( this.hasSection > 0 ) {

                if ( section != null ) {
                    generator.writeStringField( __name, section );
                }

            }

            // ***** json encode member description from String

            __name = "description";

            if ( ! builder.camelCaseNames ) {
                __name = "description";
            }

            if ( this.hasDescription > 0 ) {

                if ( description != null ) {
                    generator.writeStringField( __name, description );
                }

            }

            // ***** json encode member tags from Set<String>

            __name = "tags";

            if ( ! builder.camelCaseNames ) {
                __name = "tags";
            }

            if ( this.hasTags > 0 ) {

                if ( tags != null ) {

                    JSON.writeStringSet( generator, __name, tags );

                }

            }

            // ***** json encode member mentions from Set<String>

            __name = "mentions";

            if ( ! builder.camelCaseNames ) {
                __name = "mentions";
            }

            if ( this.hasMentions > 0 ) {

                if ( mentions != null ) {

                    JSON.writeStringSet( generator, __name, mentions );

                }

            }

            // ***** json encode member links from Set<String>

            __name = "links";

            if ( ! builder.camelCaseNames ) {
                __name = "links";
            }

            if ( this.hasLinks > 0 ) {

                if ( links != null ) {

                    JSON.writeStringSet( generator, __name, links );

                }

            }

            // ***** json encode member published from Date

            __name = "published";

            if ( ! builder.camelCaseNames ) {
                __name = "published";
            }

            if ( this.hasPublished > 0 ) {

                if ( published != null )
                    generator.writeStringField( __name, toISO8601( published ) );

            }

            // ***** json encode member modified from Date

            __name = "modified";

            if ( ! builder.camelCaseNames ) {
                __name = "modified";
            }

            if ( this.hasModified > 0 ) {

                if ( modified != null )
                    generator.writeStringField( __name, toISO8601( modified ) );

            }

            // ***** json encode member published_partial from Date

            __name = "publishedPartial";

            if ( ! builder.camelCaseNames ) {
                __name = "published_partial";
            }

            if ( this.hasPublishedPartial > 0 ) {

                if ( publishedPartial != null )
                    generator.writeStringField( __name, toISO8601( publishedPartial ) );

            }

            // ***** json encode member modified_partial from Date

            __name = "modifiedPartial";

            if ( ! builder.camelCaseNames ) {
                __name = "modified_partial";
            }

            if ( this.hasModifiedPartial > 0 ) {

                if ( modifiedPartial != null )
                    generator.writeStringField( __name, toISO8601( modifiedPartial ) );

            }

            // ***** json encode member author_name from String

            __name = "authorName";

            if ( ! builder.camelCaseNames ) {
                __name = "author_name";
            }

            if ( this.hasAuthorName > 0 ) {

                if ( authorName != null ) {
                    generator.writeStringField( __name, authorName );
                }

            }

            // ***** json encode member author_link from String

            __name = "authorLink";

            if ( ! builder.camelCaseNames ) {
                __name = "author_link";
            }

            if ( this.hasAuthorLink > 0 ) {

                if ( authorLink != null ) {
                    generator.writeStringField( __name, authorLink );
                }

            }

            // ***** json encode member author_handle from String

            __name = "authorHandle";

            if ( ! builder.camelCaseNames ) {
                __name = "author_handle";
            }

            if ( this.hasAuthorHandle > 0 ) {

                if ( authorHandle != null ) {
                    generator.writeStringField( __name, authorHandle );
                }

            }

            // ***** json encode member author_followers from int

            __name = "authorFollowers";

            if ( ! builder.camelCaseNames ) {
                __name = "author_followers";
            }

            if ( this.hasAuthorFollowers > 0 ) {

                if ( hasDefinedAuthorFollowers )
                    generator.writeNumberField( __name, authorFollowers );

            }

            // ***** json encode member author_location from String

            __name = "authorLocation";

            if ( ! builder.camelCaseNames ) {
                __name = "author_location";
            }

            if ( this.hasAuthorLocation > 0 ) {

                if ( authorLocation != null ) {
                    generator.writeStringField( __name, authorLocation );
                }

            }

            // ***** json encode member author_avatar_img from String

            __name = "authorAvatarImg";

            if ( ! builder.camelCaseNames ) {
                __name = "author_avatar_img";
            }

            if ( this.hasAuthorAvatarImg > 0 ) {

                if ( authorAvatarImg != null ) {
                    generator.writeStringField( __name, authorAvatarImg );
                }

            }

            // ***** json encode member author_avatar_width from int

            __name = "authorAvatarWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "author_avatar_width";
            }

            if ( this.hasAuthorAvatarWidth > 0 ) {

                if ( hasDefinedAuthorAvatarWidth )
                    generator.writeNumberField( __name, authorAvatarWidth );

            }

            // ***** json encode member author_avatar_height from int

            __name = "authorAvatarHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "author_avatar_height";
            }

            if ( this.hasAuthorAvatarHeight > 0 ) {

                if ( hasDefinedAuthorAvatarHeight )
                    generator.writeNumberField( __name, authorAvatarHeight );

            }

            // ***** json encode member author_twitter_handle from String

            __name = "authorTwitterHandle";

            if ( ! builder.camelCaseNames ) {
                __name = "author_twitter_handle";
            }

            if ( this.hasAuthorTwitterHandle > 0 ) {

                if ( authorTwitterHandle != null ) {
                    generator.writeStringField( __name, authorTwitterHandle );
                }

            }

            // ***** json encode member author_twitter_userid from String

            __name = "authorTwitterUserid";

            if ( ! builder.camelCaseNames ) {
                __name = "author_twitter_userid";
            }

            if ( this.hasAuthorTwitterUserid > 0 ) {

                if ( authorTwitterUserid != null ) {
                    generator.writeStringField( __name, authorTwitterUserid );
                }

            }

            // ***** json encode member author_user_id from String

            __name = "authorUserId";

            if ( ! builder.camelCaseNames ) {
                __name = "author_user_id";
            }

            if ( this.hasAuthorUserId > 0 ) {

                if ( authorUserId != null ) {
                    generator.writeStringField( __name, authorUserId );
                }

            }

            // ***** json encode member author_gender from int

            __name = "authorGender";

            if ( ! builder.camelCaseNames ) {
                __name = "author_gender";
            }

            if ( this.hasAuthorGender > 0 ) {

                if ( authorGender != null )
                    generator.writeStringField( __name, authorGender.toString() );

            }

            // ***** json encode member geo_location from String

            __name = "geoLocation";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_location";
            }

            if ( this.hasGeoLocation > 0 ) {

                if ( geoLocation != null ) {
                    generator.writeStringField( __name, geoLocation );
                }

            }

            // ***** json encode member geo_location_id from String

            __name = "geoLocationId";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_location_id";
            }

            if ( this.hasGeoLocationId > 0 ) {

                if ( geoLocationId != null ) {
                    generator.writeStringField( __name, geoLocationId );
                }

            }

            // ***** json encode member geo_featurename from String

            __name = "geoFeaturename";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_featurename";
            }

            if ( this.hasGeoFeaturename > 0 ) {

                if ( geoFeaturename != null ) {
                    generator.writeStringField( __name, geoFeaturename );
                }

            }

            // ***** json encode member geo_point from String

            __name = "geoPoint";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_point";
            }

            if ( this.hasGeoPoint > 0 ) {

                if ( geoPoint != null ) {
                    generator.writeStringField( __name, geoPoint );
                }

            }

            // ***** json encode member geo_box from String

            __name = "geoBox";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_box";
            }

            if ( this.hasGeoBox > 0 ) {

                if ( geoBox != null ) {
                    generator.writeStringField( __name, geoBox );
                }

            }

            // ***** json encode member geo_name_id from String

            __name = "geoNameId";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_name_id";
            }

            if ( this.hasGeoNameId > 0 ) {

                if ( geoNameId != null ) {
                    generator.writeStringField( __name, geoNameId );
                }

            }

            // ***** json encode member geo_name from String

            __name = "geoName";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_name";
            }

            if ( this.hasGeoName > 0 ) {

                if ( geoName != null ) {
                    generator.writeStringField( __name, geoName );
                }

            }

            // ***** json encode member geo_country from String

            __name = "geoCountry";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_country";
            }

            if ( this.hasGeoCountry > 0 ) {

                if ( geoCountry != null ) {
                    generator.writeStringField( __name, geoCountry );
                }

            }

            // ***** json encode member geo_state from String

            __name = "geoState";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_state";
            }

            if ( this.hasGeoState > 0 ) {

                if ( geoState != null ) {
                    generator.writeStringField( __name, geoState );
                }

            }

            // ***** json encode member geo_city from String

            __name = "geoCity";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_city";
            }

            if ( this.hasGeoCity > 0 ) {

                if ( geoCity != null ) {
                    generator.writeStringField( __name, geoCity );
                }

            }

            // ***** json encode member rating_value from String

            __name = "ratingValue";

            if ( ! builder.camelCaseNames ) {
                __name = "rating_value";
            }

            if ( this.hasRatingValue > 0 ) {

                if ( ratingValue != null ) {
                    generator.writeStringField( __name, ratingValue );
                }

            }

            // ***** json encode member favicon_src from String

            __name = "faviconSrc";

            if ( ! builder.camelCaseNames ) {
                __name = "favicon_src";
            }

            if ( this.hasFaviconSrc > 0 ) {

                if ( faviconSrc != null ) {
                    generator.writeStringField( __name, faviconSrc );
                }

            }

            // ***** json encode member favicon_width from int

            __name = "faviconWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "favicon_width";
            }

            if ( this.hasFaviconWidth > 0 ) {

                if ( hasDefinedFaviconWidth )
                    generator.writeNumberField( __name, faviconWidth );

            }

            // ***** json encode member favicon_height from int

            __name = "faviconHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "favicon_height";
            }

            if ( this.hasFaviconHeight > 0 ) {

                if ( hasDefinedFaviconHeight )
                    generator.writeNumberField( __name, faviconHeight );

            }

            // ***** json encode member image_src from String

            __name = "imageSrc";

            if ( ! builder.camelCaseNames ) {
                __name = "image_src";
            }

            if ( this.hasImageSrc > 0 ) {

                if ( imageSrc != null ) {
                    generator.writeStringField( __name, imageSrc );
                }

            }

            // ***** json encode member image_width from int

            __name = "imageWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "image_width";
            }

            if ( this.hasImageWidth > 0 ) {

                if ( hasDefinedImageWidth )
                    generator.writeNumberField( __name, imageWidth );

            }

            // ***** json encode member image_height from int

            __name = "imageHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "image_height";
            }

            if ( this.hasImageHeight > 0 ) {

                if ( hasDefinedImageHeight )
                    generator.writeNumberField( __name, imageHeight );

            }

            // ***** json encode member shared from boolean

            __name = "shared";

            if ( ! builder.camelCaseNames ) {
                __name = "shared";
            }

            if ( this.hasShared > 0 ) {

                if ( hasDefinedShared )
                    generator.writeBooleanField( __name, shared );

            }

            // ***** json encode member shared_profile_link from String

            __name = "sharedProfileLink";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_profile_link";
            }

            if ( this.hasSharedProfileLink > 0 ) {

                if ( sharedProfileLink != null ) {
                    generator.writeStringField( __name, sharedProfileLink );
                }

            }

            // ***** json encode member shared_profile_title from String

            __name = "sharedProfileTitle";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_profile_title";
            }

            if ( this.hasSharedProfileTitle > 0 ) {

                if ( sharedProfileTitle != null ) {
                    generator.writeStringField( __name, sharedProfileTitle );
                }

            }

            // ***** json encode member replied from boolean

            __name = "replied";

            if ( ! builder.camelCaseNames ) {
                __name = "replied";
            }

            if ( this.hasReplied > 0 ) {

                if ( hasDefinedReplied )
                    generator.writeBooleanField( __name, replied );

            }

            // ***** json encode member replied_profile_link from String

            __name = "repliedProfileLink";

            if ( ! builder.camelCaseNames ) {
                __name = "replied_profile_link";
            }

            if ( this.hasRepliedProfileLink > 0 ) {

                if ( repliedProfileLink != null ) {
                    generator.writeStringField( __name, repliedProfileLink );
                }

            }

            // ***** json encode member replied_profile_title from String

            __name = "repliedProfileTitle";

            if ( ! builder.camelCaseNames ) {
                __name = "replied_profile_title";
            }

            if ( this.hasRepliedProfileTitle > 0 ) {

                if ( repliedProfileTitle != null ) {
                    generator.writeStringField( __name, repliedProfileTitle );
                }

            }

            // ***** json encode member card from int

            __name = "card";

            if ( ! builder.camelCaseNames ) {
                __name = "card";
            }

            if ( this.hasCard > 0 ) {

                if ( card != null )
                    generator.writeStringField( __name, card.toString() );

            }

            // ***** json encode member video_player from String

            __name = "videoPlayer";

            if ( ! builder.camelCaseNames ) {
                __name = "video_player";
            }

            if ( this.hasVideoPlayer > 0 ) {

                if ( videoPlayer != null ) {
                    generator.writeStringField( __name, videoPlayer );
                }

            }

            // ***** json encode member video_player_width from int

            __name = "videoPlayerWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "video_player_width";
            }

            if ( this.hasVideoPlayerWidth > 0 ) {

                if ( hasDefinedVideoPlayerWidth )
                    generator.writeNumberField( __name, videoPlayerWidth );

            }

            // ***** json encode member video_player_height from int

            __name = "videoPlayerHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "video_player_height";
            }

            if ( this.hasVideoPlayerHeight > 0 ) {

                if ( hasDefinedVideoPlayerHeight )
                    generator.writeNumberField( __name, videoPlayerHeight );

            }

            // ***** json encode member type from int

            __name = "type";

            if ( ! builder.camelCaseNames ) {
                __name = "type";
            }

            if ( this.hasType > 0 ) {

                if ( type != null )
                    generator.writeStringField( __name, type.toString() );

            }

            // ***** json encode member sentiment from int

            __name = "sentiment";

            if ( ! builder.camelCaseNames ) {
                __name = "sentiment";
            }

            if ( this.hasSentiment > 0 ) {

                if ( sentiment != null )
                    generator.writeStringField( __name, sentiment.toString() );

            }

            // ***** json encode member lang from String

            __name = "lang";

            if ( ! builder.camelCaseNames ) {
                __name = "lang";
            }

            if ( this.hasLang > 0 ) {

                if ( lang != null ) {
                    generator.writeStringField( __name, lang );
                }

            }

            // ***** json encode member categories from Map<String,Double>

            __name = "categories";

            if ( ! builder.camelCaseNames ) {
                __name = "categories";
            }

            if ( this.hasCategories > 0 ) {

                if ( categories != null ) {

                    JSON.writeStringMap( generator, __name, categories );

                }

            }

            // ***** json encode member duplicates from Map<Long,Double>

            __name = "duplicates";

            if ( ! builder.camelCaseNames ) {
                __name = "duplicates";
            }

            if ( this.hasDuplicates > 0 ) {

                if ( duplicates != null ) {

                    JSON.writeLongMap( generator, __name, duplicates );

                }

            }

            // ***** json encode member duplicates_count from int

            __name = "duplicatesCount";

            if ( ! builder.camelCaseNames ) {
                __name = "duplicates_count";
            }

            if ( this.hasDuplicatesCount > 0 ) {

                if ( hasDefinedDuplicatesCount )
                    generator.writeNumberField( __name, duplicatesCount );

            }

            // ***** json encode member classifications from Map<String,Double>

            __name = "classifications";

            if ( ! builder.camelCaseNames ) {
                __name = "classifications";
            }

            if ( this.hasClassifications > 0 ) {

                if ( classifications != null ) {

                    JSON.writeStringMap( generator, __name, classifications );

                }

            }

            // ***** json encode member parent_hashcode from String

            __name = "parentHashcode";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_hashcode";
            }

            if ( this.hasParentHashcode > 0 ) {

                if ( parentHashcode != null ) {
                    generator.writeStringField( __name, parentHashcode );
                }

            }

            // ***** json encode member parent_permalink from String

            __name = "parentPermalink";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_permalink";
            }

            if ( this.hasParentPermalink > 0 ) {

                if ( parentPermalink != null ) {
                    generator.writeStringField( __name, parentPermalink );
                }

            }

            // ***** json encode member parent_title from String

            __name = "parentTitle";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_title";
            }

            if ( this.hasParentTitle > 0 ) {

                if ( parentTitle != null ) {
                    generator.writeStringField( __name, parentTitle );
                }

            }

            // ***** json encode member parent_lang from String

            __name = "parentLang";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_lang";
            }

            if ( this.hasParentLang > 0 ) {

                if ( parentLang != null ) {
                    generator.writeStringField( __name, parentLang );
                }

            }

            // ***** json encode member parent_resource from String

            __name = "parentResource";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_resource";
            }

            if ( this.hasParentResource > 0 ) {

                if ( parentResource != null ) {
                    generator.writeStringField( __name, parentResource );
                }

            }

            // ***** json encode member likes from int

            __name = "likes";

            if ( ! builder.camelCaseNames ) {
                __name = "likes";
            }

            if ( this.hasLikes > 0 ) {

                if ( hasDefinedLikes )
                    generator.writeNumberField( __name, likes );

            }

            // ***** json encode member dislikes from int

            __name = "dislikes";

            if ( ! builder.camelCaseNames ) {
                __name = "dislikes";
            }

            if ( this.hasDislikes > 0 ) {

                if ( hasDefinedDislikes )
                    generator.writeNumberField( __name, dislikes );

            }

            // ***** json encode member comments from int

            __name = "comments";

            if ( ! builder.camelCaseNames ) {
                __name = "comments";
            }

            if ( this.hasComments > 0 ) {

                if ( hasDefinedComments )
                    generator.writeNumberField( __name, comments );

            }

            // ***** json encode member views from int

            __name = "views";

            if ( ! builder.camelCaseNames ) {
                __name = "views";
            }

            if ( this.hasViews > 0 ) {

                if ( hasDefinedViews )
                    generator.writeNumberField( __name, views );

            }

            // ***** json encode member metadata_score from int

            __name = "metadataScore";

            if ( ! builder.camelCaseNames ) {
                __name = "metadata_score";
            }

            if ( this.hasMetadataScore > 0 ) {

                if ( hasDefinedMetadataScore )
                    generator.writeNumberField( __name, metadataScore );

            }

            // ***** json encode member shares from int

            __name = "shares";

            if ( ! builder.camelCaseNames ) {
                __name = "shares";
            }

            if ( this.hasShares > 0 ) {

                if ( hasDefinedShares )
                    generator.writeNumberField( __name, shares );

            }

            generator.writeEndObject();
            generator.close();

        } catch( IOException e ) {
            throw new RuntimeException( e );
        }
    }

    public void fromJSON( JsonFactory jsonFactory, InputStream inputStream ) throws IOException, JsonParseException {

        try (JsonParser jParser = jsonFactory.createParser( inputStream )) {
            fromJSON( jParser );
        }

    }

    public void fromJSON( JsonFactory jsonFactory, String json ) throws IOException, JsonParseException {

        try (JsonParser jParser = jsonFactory.createParser( json )) {
            fromJSON( jParser );
        }

    }

    public void fromJSON( JsonParser jParser ) throws IOException, JsonParseException {

        while (jParser.nextToken() != JsonToken.END_OBJECT) {

            String tokenName = jParser.getCurrentName();

            if ( tokenName == null ) {
                // this is null for array values and root level
                continue;
            }

            // Java 7/8 optimizes switches so this is an efficient way
            // to dispatch token names.
            switch( tokenName ) {

                // FIXME: handle camelCase and under_score
                // ***** json decode member permalink from String

                case "permalink":

                    jParser.nextToken();
                    setPermalink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member permalink_redirect from String

                case "permalink_redirect":

                    jParser.nextToken();
                    setPermalinkRedirect( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member permalink_redirect_domain from String

                case "permalink_redirect_domain":

                    jParser.nextToken();
                    setPermalinkRedirectDomain( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member permalink_redirect_site from String

                case "permalink_redirect_site":

                    jParser.nextToken();
                    setPermalinkRedirectSite( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member link from String

                case "link":

                    jParser.nextToken();
                    setLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member link_domain from String

                case "link_domain":

                    jParser.nextToken();
                    setLinkDomain( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member link_site from String

                case "link_site":

                    jParser.nextToken();
                    setLinkSite( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shortlink from String

                case "shortlink":

                    jParser.nextToken();
                    setShortlink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member canonical from String

                case "canonical":

                    jParser.nextToken();
                    setCanonical( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member domain from String

                case "domain":

                    jParser.nextToken();
                    setDomain( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member site from String

                case "site":

                    jParser.nextToken();
                    setSite( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main from String

                case "main":

                    jParser.nextToken();
                    setMain( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main_length from int

                case "main_length":

                    jParser.nextToken();
                    setMainLength( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main_checksum from String

                case "main_checksum":

                    jParser.nextToken();
                    setMainChecksum( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main_authoritative from boolean

                case "main_authoritative":

                    jParser.nextToken();
                    setMainAuthoritative( jParser.getBooleanValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main_format from int

                case "main_format":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member extract from String

                case "extract":

                    jParser.nextToken();
                    setExtract( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member extract_length from int

                case "extract_length":

                    jParser.nextToken();
                    setExtractLength( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member extract_checksum from String

                case "extract_checksum":

                    jParser.nextToken();
                    setExtractChecksum( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member summary_text from String

                case "summary_text":

                    jParser.nextToken();
                    setSummaryText( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member title from String

                case "title":

                    jParser.nextToken();
                    setTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member publisher from String

                case "publisher":

                    jParser.nextToken();
                    setPublisher( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member section from String

                case "section":

                    jParser.nextToken();
                    setSection( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member description from String

                case "description":

                    jParser.nextToken();
                    setDescription( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member tags from Set<String>

                case "tags":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member mentions from Set<String>

                case "mentions":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member links from Set<String>

                case "links":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member published from Date

                case "published":

                    try {
                        jParser.nextToken();
                        setPublished( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: published", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member modified from Date

                case "modified":

                    try {
                        jParser.nextToken();
                        setModified( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: modified", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member published_partial from Date

                case "published_partial":

                    try {
                        jParser.nextToken();
                        setPublishedPartial( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: published_partial", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member modified_partial from Date

                case "modified_partial":

                    try {
                        jParser.nextToken();
                        setModifiedPartial( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: modified_partial", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_name from String

                case "author_name":

                    jParser.nextToken();
                    setAuthorName( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_link from String

                case "author_link":

                    jParser.nextToken();
                    setAuthorLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_handle from String

                case "author_handle":

                    jParser.nextToken();
                    setAuthorHandle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_followers from int

                case "author_followers":

                    jParser.nextToken();
                    setAuthorFollowers( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_location from String

                case "author_location":

                    jParser.nextToken();
                    setAuthorLocation( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_avatar_img from String

                case "author_avatar_img":

                    jParser.nextToken();
                    setAuthorAvatarImg( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_avatar_width from int

                case "author_avatar_width":

                    jParser.nextToken();
                    setAuthorAvatarWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_avatar_height from int

                case "author_avatar_height":

                    jParser.nextToken();
                    setAuthorAvatarHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_twitter_handle from String

                case "author_twitter_handle":

                    jParser.nextToken();
                    setAuthorTwitterHandle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_twitter_userid from String

                case "author_twitter_userid":

                    jParser.nextToken();
                    setAuthorTwitterUserid( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_user_id from String

                case "author_user_id":

                    jParser.nextToken();
                    setAuthorUserId( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_gender from int

                case "author_gender":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_location from String

                case "geo_location":

                    jParser.nextToken();
                    setGeoLocation( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_location_id from String

                case "geo_location_id":

                    jParser.nextToken();
                    setGeoLocationId( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_featurename from String

                case "geo_featurename":

                    jParser.nextToken();
                    setGeoFeaturename( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_point from String

                case "geo_point":

                    jParser.nextToken();
                    setGeoPoint( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_box from String

                case "geo_box":

                    jParser.nextToken();
                    setGeoBox( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_name_id from String

                case "geo_name_id":

                    jParser.nextToken();
                    setGeoNameId( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_name from String

                case "geo_name":

                    jParser.nextToken();
                    setGeoName( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_country from String

                case "geo_country":

                    jParser.nextToken();
                    setGeoCountry( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_state from String

                case "geo_state":

                    jParser.nextToken();
                    setGeoState( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_city from String

                case "geo_city":

                    jParser.nextToken();
                    setGeoCity( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member rating_value from String

                case "rating_value":

                    jParser.nextToken();
                    setRatingValue( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member favicon_src from String

                case "favicon_src":

                    jParser.nextToken();
                    setFaviconSrc( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member favicon_width from int

                case "favicon_width":

                    jParser.nextToken();
                    setFaviconWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member favicon_height from int

                case "favicon_height":

                    jParser.nextToken();
                    setFaviconHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member image_src from String

                case "image_src":

                    jParser.nextToken();
                    setImageSrc( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member image_width from int

                case "image_width":

                    jParser.nextToken();
                    setImageWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member image_height from int

                case "image_height":

                    jParser.nextToken();
                    setImageHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared from boolean

                case "shared":

                    jParser.nextToken();
                    setShared( jParser.getBooleanValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_profile_link from String

                case "shared_profile_link":

                    jParser.nextToken();
                    setSharedProfileLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_profile_title from String

                case "shared_profile_title":

                    jParser.nextToken();
                    setSharedProfileTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member replied from boolean

                case "replied":

                    jParser.nextToken();
                    setReplied( jParser.getBooleanValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member replied_profile_link from String

                case "replied_profile_link":

                    jParser.nextToken();
                    setRepliedProfileLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member replied_profile_title from String

                case "replied_profile_title":

                    jParser.nextToken();
                    setRepliedProfileTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member card from int

                case "card":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member video_player from String

                case "video_player":

                    jParser.nextToken();
                    setVideoPlayer( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member video_player_width from int

                case "video_player_width":

                    jParser.nextToken();
                    setVideoPlayerWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member video_player_height from int

                case "video_player_height":

                    jParser.nextToken();
                    setVideoPlayerHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member type from int

                case "type":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member sentiment from int

                case "sentiment":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member lang from String

                case "lang":

                    jParser.nextToken();
                    setLang( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member categories from Map<String,Double>

                case "categories":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member duplicates from Map<Long,Double>

                case "duplicates":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member duplicates_count from int

                case "duplicates_count":

                    jParser.nextToken();
                    setDuplicatesCount( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member classifications from Map<String,Double>

                case "classifications":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_hashcode from String

                case "parent_hashcode":

                    jParser.nextToken();
                    setParentHashcode( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_permalink from String

                case "parent_permalink":

                    jParser.nextToken();
                    setParentPermalink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_title from String

                case "parent_title":

                    jParser.nextToken();
                    setParentTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_lang from String

                case "parent_lang":

                    jParser.nextToken();
                    setParentLang( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_resource from String

                case "parent_resource":

                    jParser.nextToken();
                    setParentResource( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member likes from int

                case "likes":

                    jParser.nextToken();
                    setLikes( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member dislikes from int

                case "dislikes":

                    jParser.nextToken();
                    setDislikes( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member comments from int

                case "comments":

                    jParser.nextToken();
                    setComments( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member views from int

                case "views":

                    jParser.nextToken();
                    setViews( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member metadata_score from int

                case "metadata_score":

                    jParser.nextToken();
                    setMetadataScore( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shares from int

                case "shares":

                    jParser.nextToken();
                    setShares( jParser.getIntValue() );

                    break;

            }

        }

    }

    private static String toISO8601( Date date ) {

        // NOTE: Simple Date Format is NOT thread safe.
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        df.setTimeZone( UTC );
        return df.format( date );

    }

    public static ContentMetadata fromJSON( String value ) {

        try {

            ContentMetadata result = MAPPER.readValue( value, ContentMetadata.class );
            result.resetModified();
            result.constructed = false;

            return result;

        } catch ( IOException e ) {
            throw new RuntimeException( e );
        }

    }

    public static ContentMetadata fromJSON( Map<String,Object> map ) {

        ContentMetadata result = MAPPER.convertValue( map, ContentMetadata.class );
        result.resetModified();
        result.constructed = false;

        return result;

    }

    public static ContentMetadata fromJSON( ByteBuffer byteBuffer ) {

        try {
            return fromJSON( ByteBufferInputStreams.toInputStream( byteBuffer ) );
        } catch ( IOException e ) {
            throw new RuntimeException( "Could not parse byte buffer: ", e );
        }

    }

    public static ContentMetadata fromJSON( InputStream inputStream ) throws IOException {

        ContentMetadata result = MAPPER.readValue( inputStream, ContentMetadata.class );
        result.resetModified();
        result.constructed = false;

        return result;

    }

}