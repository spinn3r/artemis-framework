package com.spinn3r.artemis.client.json;

import javax.annotation.Generated;
import javax.xml.bind.DataBindingException;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.impl.SimpleBeanPropertyFilter;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;

import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonToken;

import java.nio.charset.Charset;
import java.nio.ByteBuffer;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;

import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.*;

import java.time.ZonedDateTime;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.spinn3r.artemis.util.io.FastByteArrayOutputStream;
import com.spinn3r.artemis.util.io.utf8.*;

import com.spinn3r.artemis.schema.core.JSON;

import com.spinn3r.artemis.json.Msg;
import com.spinn3r.artemis.schema.core.ByteArray;
import com.spinn3r.artemis.schema.core.BlobSet;
import com.spinn3r.artemis.schema.core.NoNullSet;
import com.spinn3r.artemis.schema.core.NoNullMap;
import com.spinn3r.artemis.schema.core.ObjectMapperFactory;
import com.spinn3r.artemis.schema.core.ISO8601;
import com.spinn3r.artemis.schema.core.ByteBufferInputStreams;

/**
 * <p>
 * Stores content in our index including the full HTML as well  as the metadata we were able to extract.  Some of these  fields are HTML which are cleaned of any unsafe elements which might cause cross scripting attacks or other vulnerabilities are removed.  Additionally, All URLs are fully expanded. Encoding is UTF-8.   We may reference external objects, such as the Source metadata which is then fully denormalized with a source_ prefix.
 * </p>
 *
 *
 *
 * <p>
 * THIS FILE IS AUTOGENERATED.  DO NOT EDIT.
 * </p>
 */
@JsonIgnoreProperties(ignoreUnknown=true)
@JsonInclude(JsonInclude.Include.NON_NULL)
@Generated(value="generated")
@SuppressWarnings("unusedImports")
public abstract class BaseContent
    implements Msg

    {

    private static final Charset UTF_8 = Charset.forName("UTF-8");

    private static TimeZone UTC = TimeZone.getTimeZone("UTC");

    public static final boolean UNDERSCORE = true;

    // JsonFactory: all JsonParser and JsonGenerator instances used for
    // Streaming API and Data Binding are constructed by JsonFactory. And
    // heavy-weight objects like symbol tables are reused by these factories. As
    // such it is beneficial to reuse these factories. (NOTE: ObjectMapper's
    // hold their own references to JsonFactory instances)

    private static final JsonFactory JSON_FACTORY = new JsonFactory();

    private static final ObjectMapper MAPPER = ObjectMapperFactory.newObjectMapper( UNDERSCORE );

    public enum IndexMethod {

        /**
         * Content indexed by the permalink task.
         */
        PERMALINK_TASK( 1 ) ,

        /**
         * Content indexed by the source task.
         */
        SOURCE_TASK( 2 ) ,

        /**
         * Content indexed by pubsubhubbub hub push.
         */
        PSHB( 3 ) ,

        /**
         * Content indexed by the source task for a composite post.
         */
        SOURCE_TASK_COMPOSITE( 4 ) ,

        /**
         * Content indexed by the feed task.
         */
        FEED_TASK( 5 ) ,

        /**
         * Content indexed by the twitter task.
         */
        TWITTER_TASK( 6 ) ,

        ;

        IndexMethod( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static IndexMethod fromValue( int value ) {

            switch( value ) {

                case 1:
                    return PERMALINK_TASK;

                case 2:
                    return SOURCE_TASK;

                case 3:
                    return PSHB;

                case 4:
                    return SOURCE_TASK_COMPOSITE;

                case 5:
                    return FEED_TASK;

                case 6:
                    return TWITTER_TASK;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static IndexMethod fromValue( String value ) {

            switch( value ) {

                case "PERMALINK_TASK":
                    return PERMALINK_TASK;

                case "SOURCE_TASK":
                    return SOURCE_TASK;

                case "PSHB":
                    return PSHB;

                case "SOURCE_TASK_COMPOSITE":
                    return SOURCE_TASK_COMPOSITE;

                case "FEED_TASK":
                    return FEED_TASK;

                case "TWITTER_TASK":
                    return TWITTER_TASK;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum DetectionMethod {

        /**
         * Found via the source.
         */
        SOURCE( 1 ) ,

        /**
         * Found via the feed.
         */
        FEED( 2 ) ,

        ;

        DetectionMethod( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static DetectionMethod fromValue( int value ) {

            switch( value ) {

                case 1:
                    return SOURCE;

                case 2:
                    return FEED;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static DetectionMethod fromValue( String value ) {

            switch( value ) {

                case "SOURCE":
                    return SOURCE;

                case "FEED":
                    return FEED;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum SourcePublisherType {

        /**
         * Unknown publisher type.
         */
        UNKNOWN( 0 ) ,

        /**
         * Weblog.  Defined as a smaller site, usually owned by an individual.
         */
        WEBLOG( 4096 ) ,

        /**
         * Mainstream news source.  Generally owned by a corporation with multiple paid writers.
         */
        MAINSTREAM_NEWS( 8192 ) ,

        /**
         * Classified site.  Craigslist, Backpage, etc.
         */
        CLASSIFIED( 16384 ) ,

        /**
         * Forum sites like phpBB, phorum, vbulletin, etc
         */
        FORUM( 32768 ) ,

        /**
         * Review site.  Like epinions, amazon reviews, etc.
         */
        REVIEW( 65536 ) ,

        /**
         * Memetracker like reddit, digg, techmeme, google news, etc
         */
        MEMETRACKER( 131072 ) ,

        /**
         * Microblog content such as Twitter, identi.ca, etc.
         */
        MICROBLOG( 262144 ) ,

        /**
         * Social media sites (facebook, instagram, etc).
         */
        SOCIAL_MEDIA( 524288 ) ,

        /**
         * Video hosting site like Youtube, Vimeo, etc.
         */
        VIDEO( 600000 ) ,

        /**
         * Photo sharing site like instagram, flickr, etc.  
         */
        PHOTO( 610000 ) ,

        ;

        SourcePublisherType( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static SourcePublisherType fromValue( int value ) {

            switch( value ) {

                case 0:
                    return UNKNOWN;

                case 4096:
                    return WEBLOG;

                case 8192:
                    return MAINSTREAM_NEWS;

                case 16384:
                    return CLASSIFIED;

                case 32768:
                    return FORUM;

                case 65536:
                    return REVIEW;

                case 131072:
                    return MEMETRACKER;

                case 262144:
                    return MICROBLOG;

                case 524288:
                    return SOCIAL_MEDIA;

                case 600000:
                    return VIDEO;

                case 610000:
                    return PHOTO;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static SourcePublisherType fromValue( String value ) {

            switch( value ) {

                case "UNKNOWN":
                    return UNKNOWN;

                case "WEBLOG":
                    return WEBLOG;

                case "MAINSTREAM_NEWS":
                    return MAINSTREAM_NEWS;

                case "CLASSIFIED":
                    return CLASSIFIED;

                case "FORUM":
                    return FORUM;

                case "REVIEW":
                    return REVIEW;

                case "MEMETRACKER":
                    return MEMETRACKER;

                case "MICROBLOG":
                    return MICROBLOG;

                case "SOCIAL_MEDIA":
                    return SOCIAL_MEDIA;

                case "VIDEO":
                    return VIDEO;

                case "PHOTO":
                    return PHOTO;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum SourceSettingUpdateStrategy {

        /**
         * Default update strategy.  Essentially just update the source at a regular rate.
         */
        CYCLICAL( 0 ) ,

        /**
         * Adapt the update interval based on the posting frequency of the source.  This way we update sources less frequently if they post once per month compared to sources that update once per hour.
         */
        ADAPTIVE( 1 ) ,

        /**
         * The source content is pushed to us directly via push (pshb)
         */
        PUSH( 2 ) ,

        /**
         * The source is updated only from a search feed.  It's not updated directly but a parent source updates it.
         */
        SEARCH( 3 ) ,

        /**
         * We receive a ping via an external update mechanism.  This is a notice that the blog has been updated.  Then we launch a task to fetch the content.
         */
        PING( 4 ) ,

        /**
         * This source is NOT updated directly but rather is updated indirectly via another source. Usually a search feed.
         */
        INDIRECT( 5 ) ,

        /**
         * The source is updated via an RSS / Atom feed.  We don't index it directly.
         */
        FEED( 6 ) ,

        /**
         * The source is not updated.
         */
        NONE( 7 ) ,

        /**
         * This source is using the scheduled setting based on cron.
         */
        SCHEDULED( 8 ) ,

        ;

        SourceSettingUpdateStrategy( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static SourceSettingUpdateStrategy fromValue( int value ) {

            switch( value ) {

                case 0:
                    return CYCLICAL;

                case 1:
                    return ADAPTIVE;

                case 2:
                    return PUSH;

                case 3:
                    return SEARCH;

                case 4:
                    return PING;

                case 5:
                    return INDIRECT;

                case 6:
                    return FEED;

                case 7:
                    return NONE;

                case 8:
                    return SCHEDULED;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static SourceSettingUpdateStrategy fromValue( String value ) {

            switch( value ) {

                case "CYCLICAL":
                    return CYCLICAL;

                case "ADAPTIVE":
                    return ADAPTIVE;

                case "PUSH":
                    return PUSH;

                case "SEARCH":
                    return SEARCH;

                case "PING":
                    return PING;

                case "INDIRECT":
                    return INDIRECT;

                case "FEED":
                    return FEED;

                case "NONE":
                    return NONE;

                case "SCHEDULED":
                    return SCHEDULED;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum SourceSettingIndexStrategy {

        /**
         * Default index strategy.  Just a normal source.  No special or fancy strategy. 
         */
        DEFAULT( 0 ) ,

        /**
         * This source is a search source driven by keywords.
         */
        SEARCH_KEYWORD( 1 ) ,

        /**
         * This source is a search source driven by ranked usernames.
         */
        SEARCH_USERNAME( 2 ) ,

        /**
         * This source is a search source driven by keywords but we include the city as well.
         */
        SEARCH_KEYWORD_AND_CITY( 3 ) ,

        ;

        SourceSettingIndexStrategy( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static SourceSettingIndexStrategy fromValue( int value ) {

            switch( value ) {

                case 0:
                    return DEFAULT;

                case 1:
                    return SEARCH_KEYWORD;

                case 2:
                    return SEARCH_USERNAME;

                case 3:
                    return SEARCH_KEYWORD_AND_CITY;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static SourceSettingIndexStrategy fromValue( String value ) {

            switch( value ) {

                case "DEFAULT":
                    return DEFAULT;

                case "SEARCH_KEYWORD":
                    return SEARCH_KEYWORD;

                case "SEARCH_USERNAME":
                    return SEARCH_USERNAME;

                case "SEARCH_KEYWORD_AND_CITY":
                    return SEARCH_KEYWORD_AND_CITY;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum SourceSettingAuthorPolicy {

        /**
         * Default author policy.  Which is essentially take no special action.
         */
        DEFAULT( 0 ) ,

        /**
         * This is a composite source.  At this point we create a new source or update an existing source for each author.
         */
        COMPOSITE( 1 ) ,

        ;

        SourceSettingAuthorPolicy( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static SourceSettingAuthorPolicy fromValue( int value ) {

            switch( value ) {

                case 0:
                    return DEFAULT;

                case 1:
                    return COMPOSITE;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static SourceSettingAuthorPolicy fromValue( String value ) {

            switch( value ) {

                case "DEFAULT":
                    return DEFAULT;

                case "COMPOSITE":
                    return COMPOSITE;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum SourceFeedFormat {

        /**
         * Unknown feed format
         */
        UNKNOWN( 0 ) ,

        /**
         * Atom feed format
         */
        ATOM( 1 ) ,

        /**
         * RSS feed format
         */
        RSS( 2 ) ,

        ;

        SourceFeedFormat( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static SourceFeedFormat fromValue( int value ) {

            switch( value ) {

                case 0:
                    return UNKNOWN;

                case 1:
                    return ATOM;

                case 2:
                    return RSS;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static SourceFeedFormat fromValue( String value ) {

            switch( value ) {

                case "UNKNOWN":
                    return UNKNOWN;

                case "ATOM":
                    return ATOM;

                case "RSS":
                    return RSS;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum MainFormat {

        /**
         * HTML form of the content.  This is the default for the vast majority of the content we index.
         */
        HTML( 0 ) ,

        /**
         * The content is formatted as plain text.  Which is primarily used for Twitter and other microblogging services.
         */
        TEXT( 1 ) ,

        ;

        MainFormat( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static MainFormat fromValue( int value ) {

            switch( value ) {

                case 0:
                    return HTML;

                case 1:
                    return TEXT;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static MainFormat fromValue( String value ) {

            switch( value ) {

                case "HTML":
                    return HTML;

                case "TEXT":
                    return TEXT;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum AuthorGender {

        /**
         * Male
         */
        MALE( 0 ) ,

        /**
         * Female
         */
        FEMALE( 1 ) ,

        /**
         * Unknown
         */
        UNKNOWN( 2 ) ,

        ;

        AuthorGender( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static AuthorGender fromValue( int value ) {

            switch( value ) {

                case 0:
                    return MALE;

                case 1:
                    return FEMALE;

                case 2:
                    return UNKNOWN;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static AuthorGender fromValue( String value ) {

            switch( value ) {

                case "MALE":
                    return MALE;

                case "FEMALE":
                    return FEMALE;

                case "UNKNOWN":
                    return UNKNOWN;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum GeoMethod {

        /**
         * The default strategy was used which is the location specified in the content.
         */
        DEFAULT( 0 ) ,

        /**
         * The location of the source was used to compute the geo data.
         */
        SOURCE_LOCATION( 1 ) ,

        ;

        GeoMethod( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static GeoMethod fromValue( int value ) {

            switch( value ) {

                case 0:
                    return DEFAULT;

                case 1:
                    return SOURCE_LOCATION;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static GeoMethod fromValue( String value ) {

            switch( value ) {

                case "DEFAULT":
                    return DEFAULT;

                case "SOURCE_LOCATION":
                    return SOURCE_LOCATION;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum SharedType {

        /**
         * This is not shared
         */
        NONE( 1 ) ,

        /**
         * This is shared content but no additional text has been given. IE it is raw.
         */
        RAW( 2 ) ,

        /**
         * Shared content but the user has added additional content/text.
         */
        REPLY( 3 ) ,

        ;

        SharedType( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static SharedType fromValue( int value ) {

            switch( value ) {

                case 1:
                    return NONE;

                case 2:
                    return RAW;

                case 3:
                    return REPLY;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static SharedType fromValue( String value ) {

            switch( value ) {

                case "NONE":
                    return NONE;

                case "RAW":
                    return RAW;

                case "REPLY":
                    return REPLY;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum Card {

        /**
         * Basic summary of the content.
         */
        SUMMARY( 0 ) ,

        /**
         * Basic summary of the content using a large image
         */
        SUMMARY_LARGE_IMAGE( 1 ) ,

        /**
         * The content is a photo
         */
        PHOTO( 2 ) ,

        /**
         * The content is a photo gallery with multiple images
         */
        GALLERY( 3 ) ,

        /**
         * The content is an embedded video player
         */
        PLAYER( 4 ) ,

        ;

        Card( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static Card fromValue( int value ) {

            switch( value ) {

                case 0:
                    return SUMMARY;

                case 1:
                    return SUMMARY_LARGE_IMAGE;

                case 2:
                    return PHOTO;

                case 3:
                    return GALLERY;

                case 4:
                    return PLAYER;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static Card fromValue( String value ) {

            switch( value ) {

                case "SUMMARY":
                    return SUMMARY;

                case "SUMMARY_LARGE_IMAGE":
                    return SUMMARY_LARGE_IMAGE;

                case "PHOTO":
                    return PHOTO;

                case "GALLERY":
                    return GALLERY;

                case "PLAYER":
                    return PLAYER;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum Type {

        /**
         * A blog post, mainstream news article, tweet, etc.
         */
        POST( 0 ) ,

        /**
         * A reply to a post inline, usually by members of the community.
         */
        COMMENT( 1 ) ,

        ;

        Type( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static Type fromValue( int value ) {

            switch( value ) {

                case 0:
                    return POST;

                case 1:
                    return COMMENT;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static Type fromValue( String value ) {

            switch( value ) {

                case "POST":
                    return POST;

                case "COMMENT":
                    return COMMENT;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    public enum Sentiment {

        /**
         * Positive sentiment
         */
        POSITIVE( 0 ) ,

        /**
         * Negative sentiment
         */
        NEGATIVE( 1 ) ,

        /**
         * Neutral sentiment (neither positive nor negative)
         */
        NEUTRAL( 2 ) ,

        ;

        Sentiment( int value ) {
            this.value = value;
        }

        private int value;

        public int getValue() {
            return value;
        }

        public static Sentiment fromValue( int value ) {

            switch( value ) {

                case 0:
                    return POSITIVE;

                case 1:
                    return NEGATIVE;

                case 2:
                    return NEUTRAL;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

        public static Sentiment fromValue( String value ) {

            switch( value ) {

                case "POSITIVE":
                    return POSITIVE;

                case "NEGATIVE":
                    return NEGATIVE;

                case "NEUTRAL":
                    return NEUTRAL;

                default:
                    throw new RuntimeException( "No enum for value: " + value );
            }

        }

    }

    // true when we've manually created this object by call
    protected boolean constructed = false;

    public BaseContent() {
        this.constructed = true;
    }

    // **** members for this POJO

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasBucket = 0;

    public int hasModifiedBucket = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedBucket = false;

    protected long bucket;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSequence = 0;

    public int hasModifiedSequence = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSequence = false;

    protected long sequence;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSequenceRange = 0;

    public int hasModifiedSequenceRange = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSequenceRange = false;

    protected long sequenceRange;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasHashcode = 0;

    public int hasModifiedHashcode = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedHashcode = false;

    protected String hashcode;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasResource = 0;

    public int hasModifiedResource = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedResource = false;

    protected String resource;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDateFound = 0;

    public int hasModifiedDateFound = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDateFound = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date dateFound;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasIndexMethod = 0;

    public int hasModifiedIndexMethod = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedIndexMethod = false;

    protected IndexMethod indexMethod;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDetectionMethod = 0;

    public int hasModifiedDetectionMethod = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDetectionMethod = false;

    protected DetectionMethod detectionMethod;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasHtml = 0;

    public int hasModifiedHtml = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedHtml = false;

    protected String html;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasHtmlLength = 0;

    public int hasModifiedHtmlLength = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedHtmlLength = false;

    protected int htmlLength;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasHtmlChecksum = 0;

    public int hasModifiedHtmlChecksum = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedHtmlChecksum = false;

    protected String htmlChecksum;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasHtmlBlob = 0;

    public int hasModifiedHtmlBlob = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedHtmlBlob = false;

    protected byte[] htmlBlob;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasHtmlBlobLength = 0;

    public int hasModifiedHtmlBlobLength = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedHtmlBlobLength = false;

    protected int htmlBlobLength;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasHtmlBlobChecksum = 0;

    public int hasModifiedHtmlBlobChecksum = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedHtmlBlobChecksum = false;

    protected String htmlBlobChecksum;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasExtractBlob = 0;

    public int hasModifiedExtractBlob = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedExtractBlob = false;

    protected byte[] extractBlob;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasVersion = 0;

    public int hasModifiedVersion = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedVersion = false;

    protected String version;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLastUpdated = 0;

    public int hasModifiedLastUpdated = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLastUpdated = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date lastUpdated;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceHashcode = 0;

    public int hasModifiedSourceHashcode = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceHashcode = false;

    protected String sourceHashcode;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceResource = 0;

    public int hasModifiedSourceResource = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceResource = false;

    protected String sourceResource;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceLink = 0;

    public int hasModifiedSourceLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceLink = false;

    protected String sourceLink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourcePublisherType = 0;

    public int hasModifiedSourcePublisherType = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourcePublisherType = false;

    protected SourcePublisherType sourcePublisherType;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourcePublisherSubtype = 0;

    public int hasModifiedSourcePublisherSubtype = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourcePublisherSubtype = false;

    protected String sourcePublisherSubtype;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceDateFound = 0;

    public int hasModifiedSourceDateFound = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceDateFound = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date sourceDateFound;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceLastUpdated = 0;

    public int hasModifiedSourceLastUpdated = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceLastUpdated = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date sourceLastUpdated;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceLastPublished = 0;

    public int hasModifiedSourceLastPublished = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceLastPublished = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date sourceLastPublished;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceLastPosted = 0;

    public int hasModifiedSourceLastPosted = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceLastPosted = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date sourceLastPosted;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceUpdateInterval = 0;

    public int hasModifiedSourceUpdateInterval = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceUpdateInterval = false;

    protected long sourceUpdateInterval;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceHttpStatus = 0;

    public int hasModifiedSourceHttpStatus = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceHttpStatus = false;

    protected int sourceHttpStatus;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceSpamProbability = 0;

    public int hasModifiedSourceSpamProbability = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceSpamProbability = false;

    protected float sourceSpamProbability;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceContentLength = 0;

    public int hasModifiedSourceContentLength = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceContentLength = false;

    protected int sourceContentLength;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceContentChecksum = 0;

    public int hasModifiedSourceContentChecksum = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceContentChecksum = false;

    protected String sourceContentChecksum;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceAssignedTags = 0;

    public int hasModifiedSourceAssignedTags = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceAssignedTags = false;

    protected Set<String> sourceAssignedTags;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceSettingUpdateStrategy = 0;

    public int hasModifiedSourceSettingUpdateStrategy = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceSettingUpdateStrategy = false;

    protected SourceSettingUpdateStrategy sourceSettingUpdateStrategy;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceSettingIndexStrategy = 0;

    public int hasModifiedSourceSettingIndexStrategy = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceSettingIndexStrategy = false;

    protected SourceSettingIndexStrategy sourceSettingIndexStrategy;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceSettingAuthorPolicy = 0;

    public int hasModifiedSourceSettingAuthorPolicy = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceSettingAuthorPolicy = false;

    protected SourceSettingAuthorPolicy sourceSettingAuthorPolicy;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourcePshbHub = 0;

    public int hasModifiedSourcePshbHub = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourcePshbHub = false;

    protected String sourcePshbHub;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourcePshbTopic = 0;

    public int hasModifiedSourcePshbTopic = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourcePshbTopic = false;

    protected String sourcePshbTopic;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourcePshbLastPosted = 0;

    public int hasModifiedSourcePshbLastPosted = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourcePshbLastPosted = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date sourcePshbLastPosted;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourcePshbLeaseExpires = 0;

    public int hasModifiedSourcePshbLeaseExpires = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourcePshbLeaseExpires = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date sourcePshbLeaseExpires;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceUserInteractions = 0;

    public int hasModifiedSourceUserInteractions = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceUserInteractions = false;

    protected long sourceUserInteractions;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceSettingMinimumContentMetadataScore = 0;

    public int hasModifiedSourceSettingMinimumContentMetadataScore = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceSettingMinimumContentMetadataScore = false;

    protected int sourceSettingMinimumContentMetadataScore;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceNextUpdate = 0;

    public int hasModifiedSourceNextUpdate = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceNextUpdate = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date sourceNextUpdate;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceTitle = 0;

    public int hasModifiedSourceTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceTitle = false;

    protected String sourceTitle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceDescription = 0;

    public int hasModifiedSourceDescription = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceDescription = false;

    protected String sourceDescription;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceHandle = 0;

    public int hasModifiedSourceHandle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceHandle = false;

    protected String sourceHandle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceFavorites = 0;

    public int hasModifiedSourceFavorites = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceFavorites = false;

    protected int sourceFavorites;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceFollowers = 0;

    public int hasModifiedSourceFollowers = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceFollowers = false;

    protected int sourceFollowers;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceFollowing = 0;

    public int hasModifiedSourceFollowing = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceFollowing = false;

    protected int sourceFollowing;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceVerified = 0;

    public int hasModifiedSourceVerified = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceVerified = false;

    protected boolean sourceVerified;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceProfiles = 0;

    public int hasModifiedSourceProfiles = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceProfiles = false;

    protected Set<String> sourceProfiles;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceLocation = 0;

    public int hasModifiedSourceLocation = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceLocation = false;

    protected String sourceLocation;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceImageSrc = 0;

    public int hasModifiedSourceImageSrc = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceImageSrc = false;

    protected String sourceImageSrc;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceImageWidth = 0;

    public int hasModifiedSourceImageWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceImageWidth = false;

    protected int sourceImageWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceImageHeight = 0;

    public int hasModifiedSourceImageHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceImageHeight = false;

    protected int sourceImageHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceTelephone = 0;

    public int hasModifiedSourceTelephone = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceTelephone = false;

    protected String sourceTelephone;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceTags = 0;

    public int hasModifiedSourceTags = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceTags = false;

    protected Set<String> sourceTags;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceRatingValue = 0;

    public int hasModifiedSourceRatingValue = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceRatingValue = false;

    protected String sourceRatingValue;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceFaviconSrc = 0;

    public int hasModifiedSourceFaviconSrc = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceFaviconSrc = false;

    protected String sourceFaviconSrc;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceFaviconWidth = 0;

    public int hasModifiedSourceFaviconWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceFaviconWidth = false;

    protected int sourceFaviconWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceFaviconHeight = 0;

    public int hasModifiedSourceFaviconHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceFaviconHeight = false;

    protected int sourceFaviconHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceCreated = 0;

    public int hasModifiedSourceCreated = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceCreated = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date sourceCreated;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceLikes = 0;

    public int hasModifiedSourceLikes = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceLikes = false;

    protected int sourceLikes;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceRelatedTags = 0;

    public int hasModifiedSourceRelatedTags = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceRelatedTags = false;

    protected Set<String> sourceRelatedTags;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceParsedPosts = 0;

    public int hasModifiedSourceParsedPosts = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceParsedPosts = false;

    protected int sourceParsedPosts;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceParsedPostsMax = 0;

    public int hasModifiedSourceParsedPostsMax = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceParsedPostsMax = false;

    protected int sourceParsedPostsMax;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceFeedHref = 0;

    public int hasModifiedSourceFeedHref = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceFeedHref = false;

    protected String sourceFeedHref;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceFeedTitle = 0;

    public int hasModifiedSourceFeedTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceFeedTitle = false;

    protected String sourceFeedTitle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSourceFeedFormat = 0;

    public int hasModifiedSourceFeedFormat = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSourceFeedFormat = false;

    protected SourceFeedFormat sourceFeedFormat;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPermalink = 0;

    public int hasModifiedPermalink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPermalink = false;

    protected String permalink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasIdentifier = 0;

    public int hasModifiedIdentifier = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedIdentifier = false;

    protected String identifier;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPermalinkRedirect = 0;

    public int hasModifiedPermalinkRedirect = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPermalinkRedirect = false;

    protected String permalinkRedirect;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPermalinkRedirectDomain = 0;

    public int hasModifiedPermalinkRedirectDomain = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPermalinkRedirectDomain = false;

    protected String permalinkRedirectDomain;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPermalinkRedirectSite = 0;

    public int hasModifiedPermalinkRedirectSite = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPermalinkRedirectSite = false;

    protected String permalinkRedirectSite;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLink = 0;

    public int hasModifiedLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLink = false;

    protected String link;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLinkDomain = 0;

    public int hasModifiedLinkDomain = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLinkDomain = false;

    protected String linkDomain;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLinkSite = 0;

    public int hasModifiedLinkSite = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLinkSite = false;

    protected String linkSite;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasShortlink = 0;

    public int hasModifiedShortlink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedShortlink = false;

    protected String shortlink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasCanonical = 0;

    public int hasModifiedCanonical = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedCanonical = false;

    protected String canonical;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDomain = 0;

    public int hasModifiedDomain = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDomain = false;

    protected String domain;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSite = 0;

    public int hasModifiedSite = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSite = false;

    protected String site;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMain = 0;

    public int hasModifiedMain = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMain = false;

    protected String main;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMainLength = 0;

    public int hasModifiedMainLength = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMainLength = false;

    protected int mainLength;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMainChecksum = 0;

    public int hasModifiedMainChecksum = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMainChecksum = false;

    protected String mainChecksum;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMainAuthoritative = 0;

    public int hasModifiedMainAuthoritative = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMainAuthoritative = false;

    protected boolean mainAuthoritative;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMainFormat = 0;

    public int hasModifiedMainFormat = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMainFormat = false;

    protected MainFormat mainFormat;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasExtract = 0;

    public int hasModifiedExtract = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedExtract = false;

    protected String extract;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasExtractLength = 0;

    public int hasModifiedExtractLength = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedExtractLength = false;

    protected int extractLength;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasExtractChecksum = 0;

    public int hasModifiedExtractChecksum = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedExtractChecksum = false;

    protected String extractChecksum;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSummaryText = 0;

    public int hasModifiedSummaryText = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSummaryText = false;

    protected String summaryText;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasTitle = 0;

    public int hasModifiedTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedTitle = false;

    protected String title;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPublisher = 0;

    public int hasModifiedPublisher = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPublisher = false;

    protected String publisher;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSection = 0;

    public int hasModifiedSection = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSection = false;

    protected String section;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDescription = 0;

    public int hasModifiedDescription = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDescription = false;

    protected String description;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasTags = 0;

    public int hasModifiedTags = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedTags = false;

    protected Set<String> tags;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMentions = 0;

    public int hasModifiedMentions = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMentions = false;

    protected Set<String> mentions;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLinks = 0;

    public int hasModifiedLinks = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLinks = false;

    protected Set<String> links;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPublished = 0;

    public int hasModifiedPublished = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPublished = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date published;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasModified = 0;

    public int hasModifiedModified = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedModified = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date modified;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPublishedPartial = 0;

    public int hasModifiedPublishedPartial = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPublishedPartial = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date publishedPartial;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasModifiedPartial = 0;

    public int hasModifiedModifiedPartial = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedModifiedPartial = false;

    @JsonFormat(shape=JsonFormat.Shape.STRING, pattern="yyyy-MM-dd'T'HH:mm:ss'Z'", timezone="UTC", locale="en_US")

    protected Date modifiedPartial;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorName = 0;

    public int hasModifiedAuthorName = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorName = false;

    protected String authorName;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorLink = 0;

    public int hasModifiedAuthorLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorLink = false;

    protected String authorLink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorHandle = 0;

    public int hasModifiedAuthorHandle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorHandle = false;

    protected String authorHandle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorFollowers = 0;

    public int hasModifiedAuthorFollowers = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorFollowers = false;

    protected int authorFollowers;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorLocation = 0;

    public int hasModifiedAuthorLocation = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorLocation = false;

    protected String authorLocation;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorAvatarImg = 0;

    public int hasModifiedAuthorAvatarImg = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorAvatarImg = false;

    protected String authorAvatarImg;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorAvatarWidth = 0;

    public int hasModifiedAuthorAvatarWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorAvatarWidth = false;

    protected int authorAvatarWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorAvatarHeight = 0;

    public int hasModifiedAuthorAvatarHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorAvatarHeight = false;

    protected int authorAvatarHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorTwitterHandle = 0;

    public int hasModifiedAuthorTwitterHandle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorTwitterHandle = false;

    protected String authorTwitterHandle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorTwitterUserid = 0;

    public int hasModifiedAuthorTwitterUserid = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorTwitterUserid = false;

    protected String authorTwitterUserid;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorUserId = 0;

    public int hasModifiedAuthorUserId = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorUserId = false;

    protected String authorUserId;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasAuthorGender = 0;

    public int hasModifiedAuthorGender = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedAuthorGender = false;

    protected AuthorGender authorGender;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoLocation = 0;

    public int hasModifiedGeoLocation = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoLocation = false;

    protected String geoLocation;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoLocationId = 0;

    public int hasModifiedGeoLocationId = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoLocationId = false;

    protected String geoLocationId;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoFeaturename = 0;

    public int hasModifiedGeoFeaturename = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoFeaturename = false;

    protected String geoFeaturename;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoPoint = 0;

    public int hasModifiedGeoPoint = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoPoint = false;

    protected String geoPoint;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoBox = 0;

    public int hasModifiedGeoBox = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoBox = false;

    protected String geoBox;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoNameId = 0;

    public int hasModifiedGeoNameId = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoNameId = false;

    protected String geoNameId;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoName = 0;

    public int hasModifiedGeoName = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoName = false;

    protected String geoName;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoCountry = 0;

    public int hasModifiedGeoCountry = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoCountry = false;

    protected String geoCountry;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoState = 0;

    public int hasModifiedGeoState = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoState = false;

    protected String geoState;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoCity = 0;

    public int hasModifiedGeoCity = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoCity = false;

    protected String geoCity;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasGeoMethod = 0;

    public int hasModifiedGeoMethod = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedGeoMethod = false;

    protected GeoMethod geoMethod;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasRatingValue = 0;

    public int hasModifiedRatingValue = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedRatingValue = false;

    protected String ratingValue;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasFaviconSrc = 0;

    public int hasModifiedFaviconSrc = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedFaviconSrc = false;

    protected String faviconSrc;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasFaviconWidth = 0;

    public int hasModifiedFaviconWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedFaviconWidth = false;

    protected int faviconWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasFaviconHeight = 0;

    public int hasModifiedFaviconHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedFaviconHeight = false;

    protected int faviconHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasImageSrc = 0;

    public int hasModifiedImageSrc = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedImageSrc = false;

    protected String imageSrc;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasImageWidth = 0;

    public int hasModifiedImageWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedImageWidth = false;

    protected int imageWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasImageHeight = 0;

    public int hasModifiedImageHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedImageHeight = false;

    protected int imageHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasShared = 0;

    public int hasModifiedShared = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedShared = false;

    protected boolean shared;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedType = 0;

    public int hasModifiedSharedType = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedType = false;

    protected SharedType sharedType;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedProfileLink = 0;

    public int hasModifiedSharedProfileLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedProfileLink = false;

    protected String sharedProfileLink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedProfileTitle = 0;

    public int hasModifiedSharedProfileTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedProfileTitle = false;

    protected String sharedProfileTitle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedAuthorLink = 0;

    public int hasModifiedSharedAuthorLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedAuthorLink = false;

    protected String sharedAuthorLink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedAuthorName = 0;

    public int hasModifiedSharedAuthorName = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedAuthorName = false;

    protected String sharedAuthorName;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedAuthorUserId = 0;

    public int hasModifiedSharedAuthorUserId = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedAuthorUserId = false;

    protected String sharedAuthorUserId;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedIdentifier = 0;

    public int hasModifiedSharedIdentifier = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedIdentifier = false;

    protected String sharedIdentifier;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedPermalink = 0;

    public int hasModifiedSharedPermalink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedPermalink = false;

    protected String sharedPermalink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSharedAuthorHandle = 0;

    public int hasModifiedSharedAuthorHandle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSharedAuthorHandle = false;

    protected String sharedAuthorHandle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasReplied = 0;

    public int hasModifiedReplied = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedReplied = false;

    protected boolean replied;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasRepliedProfileLink = 0;

    public int hasModifiedRepliedProfileLink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedRepliedProfileLink = false;

    protected String repliedProfileLink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasRepliedProfileTitle = 0;

    public int hasModifiedRepliedProfileTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedRepliedProfileTitle = false;

    protected String repliedProfileTitle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasCard = 0;

    public int hasModifiedCard = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedCard = false;

    protected Card card;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasVideoPlayer = 0;

    public int hasModifiedVideoPlayer = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedVideoPlayer = false;

    protected String videoPlayer;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasVideoPlayerWidth = 0;

    public int hasModifiedVideoPlayerWidth = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedVideoPlayerWidth = false;

    protected int videoPlayerWidth;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasVideoPlayerHeight = 0;

    public int hasModifiedVideoPlayerHeight = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedVideoPlayerHeight = false;

    protected int videoPlayerHeight;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasType = 0;

    public int hasModifiedType = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedType = false;

    protected Type type;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasSentiment = 0;

    public int hasModifiedSentiment = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedSentiment = false;

    protected Sentiment sentiment;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLang = 0;

    public int hasModifiedLang = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLang = false;

    protected String lang;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasCategories = 0;

    public int hasModifiedCategories = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedCategories = false;

    protected Map<String,Double> categories;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDuplicates = 0;

    public int hasModifiedDuplicates = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDuplicates = false;

    protected Map<Long,Double> duplicates;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDuplicatesCount = 0;

    public int hasModifiedDuplicatesCount = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDuplicatesCount = false;

    protected int duplicatesCount;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasClassifications = 0;

    public int hasModifiedClassifications = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedClassifications = false;

    protected Map<String,Double> classifications;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentHashcode = 0;

    public int hasModifiedParentHashcode = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentHashcode = false;

    protected String parentHashcode;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentPermalink = 0;

    public int hasModifiedParentPermalink = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentPermalink = false;

    protected String parentPermalink;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentTitle = 0;

    public int hasModifiedParentTitle = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentTitle = false;

    protected String parentTitle;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentLang = 0;

    public int hasModifiedParentLang = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentLang = false;

    protected String parentLang;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasParentResource = 0;

    public int hasModifiedParentResource = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedParentResource = false;

    protected String parentResource;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasLikes = 0;

    public int hasModifiedLikes = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedLikes = false;

    protected int likes;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasDislikes = 0;

    public int hasModifiedDislikes = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedDislikes = false;

    protected int dislikes;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasComments = 0;

    public int hasModifiedComments = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedComments = false;

    protected int comments;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasViews = 0;

    public int hasModifiedViews = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedViews = false;

    protected int views;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMetadataScore = 0;

    public int hasModifiedMetadataScore = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMetadataScore = false;

    protected int metadataScore;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasShares = 0;

    public int hasModifiedShares = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedShares = false;

    protected int shares;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasMetadataUpdates = 0;

    public int hasModifiedMetadataUpdates = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedMetadataUpdates = false;

    protected int metadataUpdates;

    // if a value is modified, it means that we've called setX after the object
    // has been created.

    public int hasPinned = 0;

    public int hasModifiedPinned = 0;

    /**
     * True when this field is defined and present in the database or set on the
     * object.  This is used for JSON serialization because we skip undefined
     * values.
     */
    public boolean hasDefinedPinned = false;

    protected boolean pinned;

    // **** methods for this POJO

    public BaseContent setBucket ( long bucket ) {

        ++this.hasBucket;
        ++this.hasModifiedBucket;

        this.bucket = bucket;

        hasDefinedBucket = true;

        return this;

    }

    /**
     * <p>
     * The bucket to write this content (timestamp prefix and suffix valued from 0-99).  This allows us to use the random partitioner and still get decent parallel client read performance.
     * </p>
     *
     * <p>
     * Schema type: bigint , name: bucket
     * </p>
     */
    public long getBucket() {

        if ( this.constructed == false && this.hasBucket == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.bucket" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.bucket;
    }

    /**
     * <p>
     * The bucket to write this content (timestamp prefix and suffix valued from 0-99).  This allows us to use the random partitioner and still get decent parallel client read performance.
     * </p>
     *
     * <p>
     * Schema type: bigint , name: bucket
     * </p>
     */
    public Optional<Long> getBucketAsOptional() {

        if ( this.constructed == false && this.hasBucket == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.bucket );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasBucket () {
        return this.hasBucket > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearBucket () {

        this.hasBucket = 0;
        this.hasModifiedBucket = 0;
        this.hasDefinedBucket = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedBucket () {
        return this.hasModifiedBucket > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedBucket () {
        return this.hasDefinedBucket;
    }

    public BaseContent setSequence ( long sequence ) {

        ++this.hasSequence;
        ++this.hasModifiedSequence;

        this.sequence = sequence;

        hasDefinedSequence = true;

        return this;

    }

    /**
     * <p>
     * The time our robot saw the post and wrote it to the database.  This is a sequence timestamp and supports distributed write.  This can be used as an external primary key as it's gauranteed to always be unique.  The value is opaque and not designed to be readable by humans and the format can change at any time.
     * </p>
     *
     * <p>
     * Schema type: bigint , name: sequence
     * </p>
     */
    public long getSequence() {

        if ( this.constructed == false && this.hasSequence == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sequence" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sequence;
    }

    /**
     * <p>
     * The time our robot saw the post and wrote it to the database.  This is a sequence timestamp and supports distributed write.  This can be used as an external primary key as it's gauranteed to always be unique.  The value is opaque and not designed to be readable by humans and the format can change at any time.
     * </p>
     *
     * <p>
     * Schema type: bigint , name: sequence
     * </p>
     */
    public Optional<Long> getSequenceAsOptional() {

        if ( this.constructed == false && this.hasSequence == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sequence );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSequence () {
        return this.hasSequence > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSequence () {

        this.hasSequence = 0;
        this.hasModifiedSequence = 0;
        this.hasDefinedSequence = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSequence () {
        return this.hasModifiedSequence > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSequence () {
        return this.hasDefinedSequence;
    }

    public BaseContent setSequenceRange ( long sequenceRange ) {

        ++this.hasSequenceRange;
        ++this.hasModifiedSequenceRange;

        this.sequenceRange = sequenceRange;

        hasDefinedSequenceRange = true;

        return this;

    }

    /**
     * <p>
     * The sequence as a range of values between 0 and 999,999 (sequence % 100000).  This allows you to filter values by range to accept just a sample of values.
     * </p>
     *
     * <p>
     * Schema type: bigint , name: sequence_range
     * </p>
     */
    public long getSequenceRange() {

        if ( this.constructed == false && this.hasSequenceRange == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sequenceRange" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sequenceRange;
    }

    /**
     * <p>
     * The sequence as a range of values between 0 and 999,999 (sequence % 100000).  This allows you to filter values by range to accept just a sample of values.
     * </p>
     *
     * <p>
     * Schema type: bigint , name: sequence_range
     * </p>
     */
    public Optional<Long> getSequenceRangeAsOptional() {

        if ( this.constructed == false && this.hasSequenceRange == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sequenceRange );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSequenceRange () {
        return this.hasSequenceRange > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSequenceRange () {

        this.hasSequenceRange = 0;
        this.hasModifiedSequenceRange = 0;
        this.hasDefinedSequenceRange = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSequenceRange () {
        return this.hasModifiedSequenceRange > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSequenceRange () {
        return this.hasDefinedSequenceRange;
    }

    public BaseContent setHashcode ( String hashcode ) {

        ++this.hasHashcode;
        ++this.hasModifiedHashcode;

        this.hashcode = hashcode;

        hasDefinedHashcode = true;

        return this;

    }

    /**
     * <p>
     * base64filesafe(sha1(resource)) ... Essentially the base 64 (filesafe) encoding of the sha1 of the tokenized permalink/url
     * </p>
     *
     * <p>
     * Schema type: ascii , name: hashcode
     * </p>
     */
    public String getHashcode() {

        if ( this.constructed == false && this.hasHashcode == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.hashcode" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.hashcode;
    }

    /**
     * <p>
     * base64filesafe(sha1(resource)) ... Essentially the base 64 (filesafe) encoding of the sha1 of the tokenized permalink/url
     * </p>
     *
     * <p>
     * Schema type: ascii , name: hashcode
     * </p>
     */
    public Optional<String> getHashcodeAsOptional() {

        if ( this.constructed == false && this.hasHashcode == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.hashcode );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasHashcode () {
        return this.hasHashcode > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearHashcode () {

        this.hasHashcode = 0;
        this.hasModifiedHashcode = 0;
        this.hasDefinedHashcode = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedHashcode () {
        return this.hasModifiedHashcode > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedHashcode () {
        return this.hasDefinedHashcode;
    }

    public BaseContent setResource ( String resource ) {

        ++this.hasResource;
        ++this.hasModifiedResource;

        this.resource = resource;

        hasDefinedResource = true;

        return this;

    }

    /**
     * <p>
     * Tokenized form of the permalink.
     * </p>
     *
     * <p>
     * Schema type: text , name: resource
     * </p>
     */
    public String getResource() {

        if ( this.constructed == false && this.hasResource == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.resource" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.resource;
    }

    /**
     * <p>
     * Tokenized form of the permalink.
     * </p>
     *
     * <p>
     * Schema type: text , name: resource
     * </p>
     */
    public Optional<String> getResourceAsOptional() {

        if ( this.constructed == false && this.hasResource == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.resource );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasResource () {
        return this.hasResource > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearResource () {

        this.hasResource = 0;
        this.hasModifiedResource = 0;
        this.hasDefinedResource = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedResource () {
        return this.hasModifiedResource > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedResource () {
        return this.hasDefinedResource;
    }

    public BaseContent setDateFound ( Date dateFound ) {

        ++this.hasDateFound;
        ++this.hasModifiedDateFound;

        this.dateFound = dateFound;

        hasDefinedDateFound = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setDateFoundAsZonedDateTime ( ZonedDateTime dateFound ) {

        if (dateFound != null) {
            setDateFound(Date.from(dateFound.toInstant()));
        } else {
            Date _dateFound = null;
            setDateFound(_dateFound);
        }

        return this;
    }

    /**
     * <p>
     * The time we fetched and added this content to our index.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: date_found
     * </p>
     */
    public Date getDateFound() {

        if ( this.constructed == false && this.hasDateFound == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.dateFound" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.dateFound;
    }

    /**
     * <p>
     * The time we fetched and added this content to our index.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: date_found
     * </p>
     */
    public Optional<Date> getDateFoundAsOptional() {

        if ( this.constructed == false && this.hasDateFound == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.dateFound );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDateFound () {
        return this.hasDateFound > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDateFound () {

        this.hasDateFound = 0;
        this.hasModifiedDateFound = 0;
        this.hasDefinedDateFound = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDateFound () {
        return this.hasModifiedDateFound > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDateFound () {
        return this.hasDefinedDateFound;
    }

    public BaseContent setIndexMethod ( IndexMethod indexMethod ) {

        ++this.hasIndexMethod;
        ++this.hasModifiedIndexMethod;

        this.indexMethod = indexMethod;

        hasDefinedIndexMethod = true;

        return this;

    }

    /**
     * <p>
     * The method that we used to discovery and index the content.  We have various algorithms to discover content and this lets the algorithm tag the content.
     * </p>
     *
     * <p>
     * Schema type: enum , name: index_method
     * </p>
     */
    public IndexMethod getIndexMethod() {

        if ( this.constructed == false && this.hasIndexMethod == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.indexMethod" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.indexMethod;
    }

    /**
     * <p>
     * The method that we used to discovery and index the content.  We have various algorithms to discover content and this lets the algorithm tag the content.
     * </p>
     *
     * <p>
     * Schema type: enum , name: index_method
     * </p>
     */
    public Optional<IndexMethod> getIndexMethodAsOptional() {

        if ( this.constructed == false && this.hasIndexMethod == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.indexMethod );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasIndexMethod () {
        return this.hasIndexMethod > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearIndexMethod () {

        this.hasIndexMethod = 0;
        this.hasModifiedIndexMethod = 0;
        this.hasDefinedIndexMethod = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedIndexMethod () {
        return this.hasModifiedIndexMethod > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedIndexMethod () {
        return this.hasDefinedIndexMethod;
    }

    public BaseContent setDetectionMethod ( DetectionMethod detectionMethod ) {

        ++this.hasDetectionMethod;
        ++this.hasModifiedDetectionMethod;

        this.detectionMethod = detectionMethod;

        hasDefinedDetectionMethod = true;

        return this;

    }

    /**
     * <p>
     * The method we used to detect this URL was new and recently published. 
     * </p>
     *
     * <p>
     * Schema type: enum , name: detection_method
     * </p>
     */
    public DetectionMethod getDetectionMethod() {

        if ( this.constructed == false && this.hasDetectionMethod == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.detectionMethod" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.detectionMethod;
    }

    /**
     * <p>
     * The method we used to detect this URL was new and recently published. 
     * </p>
     *
     * <p>
     * Schema type: enum , name: detection_method
     * </p>
     */
    public Optional<DetectionMethod> getDetectionMethodAsOptional() {

        if ( this.constructed == false && this.hasDetectionMethod == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.detectionMethod );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDetectionMethod () {
        return this.hasDetectionMethod > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDetectionMethod () {

        this.hasDetectionMethod = 0;
        this.hasModifiedDetectionMethod = 0;
        this.hasDefinedDetectionMethod = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDetectionMethod () {
        return this.hasModifiedDetectionMethod > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDetectionMethod () {
        return this.hasDefinedDetectionMethod;
    }

    public BaseContent setHtml ( String html ) {

        ++this.hasHtml;
        ++this.hasModifiedHtml;

        this.html = html;

        hasDefinedHtml = true;

        return this;

    }

    /**
     * <p>
     * The HTML content of this permalink as fetched by our robot.  Note that this is RAW content.  No cleanup is done.  Javascript is present, etc.  If you want to work with this content you must make sure to clean/sanitize it yourself.  See the 'body' field for a clean version of the document.  In some situations it's possible to not have any html.  An example is when we're using an API or firehose where the original full-html isn't present or not would just be wasteful.
     * </p>
     *
     * <p>
     * Schema type: text , name: html
     * </p>
     */
    public String getHtml() {

        if ( this.constructed == false && this.hasHtml == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.html" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.html;
    }

    /**
     * <p>
     * The HTML content of this permalink as fetched by our robot.  Note that this is RAW content.  No cleanup is done.  Javascript is present, etc.  If you want to work with this content you must make sure to clean/sanitize it yourself.  See the 'body' field for a clean version of the document.  In some situations it's possible to not have any html.  An example is when we're using an API or firehose where the original full-html isn't present or not would just be wasteful.
     * </p>
     *
     * <p>
     * Schema type: text , name: html
     * </p>
     */
    public Optional<String> getHtmlAsOptional() {

        if ( this.constructed == false && this.hasHtml == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.html );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasHtml () {
        return this.hasHtml > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearHtml () {

        this.hasHtml = 0;
        this.hasModifiedHtml = 0;
        this.hasDefinedHtml = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedHtml () {
        return this.hasModifiedHtml > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedHtml () {
        return this.hasDefinedHtml;
    }

    public BaseContent setHtmlLength ( int htmlLength ) {

        ++this.hasHtmlLength;
        ++this.hasModifiedHtmlLength;

        this.htmlLength = htmlLength;

        hasDefinedHtmlLength = true;

        return this;

    }

    /**
     * <p>
     * The length of the HTML
     * </p>
     *
     * <p>
     * Schema type: varint , name: html_length
     * </p>
     */
    public int getHtmlLength() {

        if ( this.constructed == false && this.hasHtmlLength == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.htmlLength" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.htmlLength;
    }

    /**
     * <p>
     * The length of the HTML
     * </p>
     *
     * <p>
     * Schema type: varint , name: html_length
     * </p>
     */
    public Optional<Integer> getHtmlLengthAsOptional() {

        if ( this.constructed == false && this.hasHtmlLength == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.htmlLength );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasHtmlLength () {
        return this.hasHtmlLength > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearHtmlLength () {

        this.hasHtmlLength = 0;
        this.hasModifiedHtmlLength = 0;
        this.hasDefinedHtmlLength = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedHtmlLength () {
        return this.hasModifiedHtmlLength > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedHtmlLength () {
        return this.hasDefinedHtmlLength;
    }

    public BaseContent setHtmlChecksum ( String htmlChecksum ) {

        ++this.hasHtmlChecksum;
        ++this.hasModifiedHtmlChecksum;

        this.htmlChecksum = htmlChecksum;

        hasDefinedHtmlChecksum = true;

        return this;

    }

    /**
     * <p>
     * The SHA1 checksum of the HTML.
     * </p>
     *
     * <p>
     * Schema type: text , name: html_checksum
     * </p>
     */
    public String getHtmlChecksum() {

        if ( this.constructed == false && this.hasHtmlChecksum == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.htmlChecksum" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.htmlChecksum;
    }

    /**
     * <p>
     * The SHA1 checksum of the HTML.
     * </p>
     *
     * <p>
     * Schema type: text , name: html_checksum
     * </p>
     */
    public Optional<String> getHtmlChecksumAsOptional() {

        if ( this.constructed == false && this.hasHtmlChecksum == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.htmlChecksum );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasHtmlChecksum () {
        return this.hasHtmlChecksum > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearHtmlChecksum () {

        this.hasHtmlChecksum = 0;
        this.hasModifiedHtmlChecksum = 0;
        this.hasDefinedHtmlChecksum = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedHtmlChecksum () {
        return this.hasModifiedHtmlChecksum > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedHtmlChecksum () {
        return this.hasDefinedHtmlChecksum;
    }

    public BaseContent setHtmlBlob ( byte[] htmlBlob ) {

        ++this.hasHtmlBlob;
        ++this.hasModifiedHtmlBlob;

        this.htmlBlob = htmlBlob;

        hasDefinedHtmlBlob = true;

        return this;

    }

    /**
     * <p>
     * zlib compressed HTML content from our crawler.  Used for legacy customers who need full HTML. 
     * </p>
     *
     * <p>
     * Schema type: blob , name: html_blob
     * </p>
     */
    public byte[] getHtmlBlob() {

        if ( this.constructed == false && this.hasHtmlBlob == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.htmlBlob" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.htmlBlob;
    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasHtmlBlob () {
        return this.hasHtmlBlob > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearHtmlBlob () {

        this.hasHtmlBlob = 0;
        this.hasModifiedHtmlBlob = 0;
        this.hasDefinedHtmlBlob = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedHtmlBlob () {
        return this.hasModifiedHtmlBlob > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedHtmlBlob () {
        return this.hasDefinedHtmlBlob;
    }

    public BaseContent setHtmlBlobLength ( int htmlBlobLength ) {

        ++this.hasHtmlBlobLength;
        ++this.hasModifiedHtmlBlobLength;

        this.htmlBlobLength = htmlBlobLength;

        hasDefinedHtmlBlobLength = true;

        return this;

    }

    /**
     * <p>
     * The length of the HTML
     * </p>
     *
     * <p>
     * Schema type: varint , name: html_blob_length
     * </p>
     */
    public int getHtmlBlobLength() {

        if ( this.constructed == false && this.hasHtmlBlobLength == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.htmlBlobLength" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.htmlBlobLength;
    }

    /**
     * <p>
     * The length of the HTML
     * </p>
     *
     * <p>
     * Schema type: varint , name: html_blob_length
     * </p>
     */
    public Optional<Integer> getHtmlBlobLengthAsOptional() {

        if ( this.constructed == false && this.hasHtmlBlobLength == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.htmlBlobLength );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasHtmlBlobLength () {
        return this.hasHtmlBlobLength > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearHtmlBlobLength () {

        this.hasHtmlBlobLength = 0;
        this.hasModifiedHtmlBlobLength = 0;
        this.hasDefinedHtmlBlobLength = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedHtmlBlobLength () {
        return this.hasModifiedHtmlBlobLength > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedHtmlBlobLength () {
        return this.hasDefinedHtmlBlobLength;
    }

    public BaseContent setHtmlBlobChecksum ( String htmlBlobChecksum ) {

        ++this.hasHtmlBlobChecksum;
        ++this.hasModifiedHtmlBlobChecksum;

        this.htmlBlobChecksum = htmlBlobChecksum;

        hasDefinedHtmlBlobChecksum = true;

        return this;

    }

    /**
     * <p>
     * The SHA1 checksum of the HTML.
     * </p>
     *
     * <p>
     * Schema type: text , name: html_blob_checksum
     * </p>
     */
    public String getHtmlBlobChecksum() {

        if ( this.constructed == false && this.hasHtmlBlobChecksum == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.htmlBlobChecksum" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.htmlBlobChecksum;
    }

    /**
     * <p>
     * The SHA1 checksum of the HTML.
     * </p>
     *
     * <p>
     * Schema type: text , name: html_blob_checksum
     * </p>
     */
    public Optional<String> getHtmlBlobChecksumAsOptional() {

        if ( this.constructed == false && this.hasHtmlBlobChecksum == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.htmlBlobChecksum );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasHtmlBlobChecksum () {
        return this.hasHtmlBlobChecksum > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearHtmlBlobChecksum () {

        this.hasHtmlBlobChecksum = 0;
        this.hasModifiedHtmlBlobChecksum = 0;
        this.hasDefinedHtmlBlobChecksum = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedHtmlBlobChecksum () {
        return this.hasModifiedHtmlBlobChecksum > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedHtmlBlobChecksum () {
        return this.hasDefinedHtmlBlobChecksum;
    }

    public BaseContent setExtractBlob ( byte[] extractBlob ) {

        ++this.hasExtractBlob;
        ++this.hasModifiedExtractBlob;

        this.extractBlob = extractBlob;

        hasDefinedExtractBlob = true;

        return this;

    }

    /**
     * <p>
     * $member.description
     * </p>
     *
     * <p>
     * Schema type: blob , name: extract_blob
     * </p>
     */
    public byte[] getExtractBlob() {

        if ( this.constructed == false && this.hasExtractBlob == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.extractBlob" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.extractBlob;
    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasExtractBlob () {
        return this.hasExtractBlob > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearExtractBlob () {

        this.hasExtractBlob = 0;
        this.hasModifiedExtractBlob = 0;
        this.hasDefinedExtractBlob = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedExtractBlob () {
        return this.hasModifiedExtractBlob > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedExtractBlob () {
        return this.hasDefinedExtractBlob;
    }

    public BaseContent setVersion ( String version ) {

        ++this.hasVersion;
        ++this.hasModifiedVersion;

        this.version = version;

        hasDefinedVersion = true;

        return this;

    }

    /**
     * <p>
     * The version of Spinn3r used to write this content.  
     * </p>
     *
     * <p>
     * Schema type: ascii , name: version
     * </p>
     */
    public String getVersion() {

        if ( this.constructed == false && this.hasVersion == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.version" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.version;
    }

    /**
     * <p>
     * The version of Spinn3r used to write this content.  
     * </p>
     *
     * <p>
     * Schema type: ascii , name: version
     * </p>
     */
    public Optional<String> getVersionAsOptional() {

        if ( this.constructed == false && this.hasVersion == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.version );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasVersion () {
        return this.hasVersion > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearVersion () {

        this.hasVersion = 0;
        this.hasModifiedVersion = 0;
        this.hasDefinedVersion = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedVersion () {
        return this.hasModifiedVersion > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedVersion () {
        return this.hasDefinedVersion;
    }

    public BaseContent setLastUpdated ( Date lastUpdated ) {

        ++this.hasLastUpdated;
        ++this.hasModifiedLastUpdated;

        this.lastUpdated = lastUpdated;

        hasDefinedLastUpdated = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setLastUpdatedAsZonedDateTime ( ZonedDateTime lastUpdated ) {

        if (lastUpdated != null) {
            setLastUpdated(Date.from(lastUpdated.toInstant()));
        } else {
            Date _lastUpdated = null;
            setLastUpdated(_lastUpdated);
        }

        return this;
    }

    /**
     * <p>
     * The last time we updated the metadata on this content.  On initial record creation last_updated and date_found will be identical but last_updated will change over time as we update metadata.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: last_updated
     * </p>
     */
    public Date getLastUpdated() {

        if ( this.constructed == false && this.hasLastUpdated == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.lastUpdated" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.lastUpdated;
    }

    /**
     * <p>
     * The last time we updated the metadata on this content.  On initial record creation last_updated and date_found will be identical but last_updated will change over time as we update metadata.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: last_updated
     * </p>
     */
    public Optional<Date> getLastUpdatedAsOptional() {

        if ( this.constructed == false && this.hasLastUpdated == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.lastUpdated );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLastUpdated () {
        return this.hasLastUpdated > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLastUpdated () {

        this.hasLastUpdated = 0;
        this.hasModifiedLastUpdated = 0;
        this.hasDefinedLastUpdated = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLastUpdated () {
        return this.hasModifiedLastUpdated > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLastUpdated () {
        return this.hasDefinedLastUpdated;
    }

    public BaseContent setSourceHashcode ( String sourceHashcode ) {

        ++this.hasSourceHashcode;
        ++this.hasModifiedSourceHashcode;

        this.sourceHashcode = sourceHashcode;

        hasDefinedSourceHashcode = true;

        return this;

    }

    /**
     * <p>
     * base64filesafe(sha1(resource)) of the source.  Essentially the base 64 (filesafe) encoding of the sha1 of the tokenized permalink/url of the source.
     * </p>
     *
     * <p>
     * Schema type: ascii , name: source_hashcode
     * </p>
     */
    public String getSourceHashcode() {

        if ( this.constructed == false && this.hasSourceHashcode == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceHashcode" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceHashcode;
    }

    /**
     * <p>
     * base64filesafe(sha1(resource)) of the source.  Essentially the base 64 (filesafe) encoding of the sha1 of the tokenized permalink/url of the source.
     * </p>
     *
     * <p>
     * Schema type: ascii , name: source_hashcode
     * </p>
     */
    public Optional<String> getSourceHashcodeAsOptional() {

        if ( this.constructed == false && this.hasSourceHashcode == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceHashcode );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceHashcode () {
        return this.hasSourceHashcode > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceHashcode () {

        this.hasSourceHashcode = 0;
        this.hasModifiedSourceHashcode = 0;
        this.hasDefinedSourceHashcode = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceHashcode () {
        return this.hasModifiedSourceHashcode > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceHashcode () {
        return this.hasDefinedSourceHashcode;
    }

    public BaseContent setSourceResource ( String sourceResource ) {

        ++this.hasSourceResource;
        ++this.hasModifiedSourceResource;

        this.sourceResource = sourceResource;

        hasDefinedSourceResource = true;

        return this;

    }

    /**
     * <p>
     * The tokenized URL for this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_resource
     * </p>
     */
    public String getSourceResource() {

        if ( this.constructed == false && this.hasSourceResource == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceResource" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceResource;
    }

    /**
     * <p>
     * The tokenized URL for this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_resource
     * </p>
     */
    public Optional<String> getSourceResourceAsOptional() {

        if ( this.constructed == false && this.hasSourceResource == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceResource );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceResource () {
        return this.hasSourceResource > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceResource () {

        this.hasSourceResource = 0;
        this.hasModifiedSourceResource = 0;
        this.hasDefinedSourceResource = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceResource () {
        return this.hasModifiedSourceResource > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceResource () {
        return this.hasDefinedSourceResource;
    }

    public BaseContent setSourceLink ( String sourceLink ) {

        ++this.hasSourceLink;
        ++this.hasModifiedSourceLink;

        this.sourceLink = sourceLink;

        hasDefinedSourceLink = true;

        return this;

    }

    /**
     * <p>
     * The non-tokenized URL for this source.  Use this URL if you would like to fetch this source via HTTP.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_link
     * </p>
     */
    public String getSourceLink() {

        if ( this.constructed == false && this.hasSourceLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceLink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceLink;
    }

    /**
     * <p>
     * The non-tokenized URL for this source.  Use this URL if you would like to fetch this source via HTTP.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_link
     * </p>
     */
    public Optional<String> getSourceLinkAsOptional() {

        if ( this.constructed == false && this.hasSourceLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceLink );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceLink () {
        return this.hasSourceLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceLink () {

        this.hasSourceLink = 0;
        this.hasModifiedSourceLink = 0;
        this.hasDefinedSourceLink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceLink () {
        return this.hasModifiedSourceLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceLink () {
        return this.hasDefinedSourceLink;
    }

    public BaseContent setSourcePublisherType ( SourcePublisherType sourcePublisherType ) {

        ++this.hasSourcePublisherType;
        ++this.hasModifiedSourcePublisherType;

        this.sourcePublisherType = sourcePublisherType;

        hasDefinedSourcePublisherType = true;

        return this;

    }

    /**
     * <p>
     * The publisher type (mainstream news, weblog, forum, etc) of this source encoded as an int.
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_publisher_type
     * </p>
     */
    public SourcePublisherType getSourcePublisherType() {

        if ( this.constructed == false && this.hasSourcePublisherType == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourcePublisherType" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourcePublisherType;
    }

    /**
     * <p>
     * The publisher type (mainstream news, weblog, forum, etc) of this source encoded as an int.
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_publisher_type
     * </p>
     */
    public Optional<SourcePublisherType> getSourcePublisherTypeAsOptional() {

        if ( this.constructed == false && this.hasSourcePublisherType == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourcePublisherType );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourcePublisherType () {
        return this.hasSourcePublisherType > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourcePublisherType () {

        this.hasSourcePublisherType = 0;
        this.hasModifiedSourcePublisherType = 0;
        this.hasDefinedSourcePublisherType = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourcePublisherType () {
        return this.hasModifiedSourcePublisherType > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourcePublisherType () {
        return this.hasDefinedSourcePublisherType;
    }

    public BaseContent setSourcePublisherSubtype ( String sourcePublisherSubtype ) {

        ++this.hasSourcePublisherSubtype;
        ++this.hasModifiedSourcePublisherSubtype;

        this.sourcePublisherSubtype = sourcePublisherSubtype;

        hasDefinedSourcePublisherSubtype = true;

        return this;

    }

    /**
     * <p>
     * A string representing the publisher sub type which is more specific than the publisher type.  The publisher subtype is usually the name of the social network hosting the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_publisher_subtype
     * </p>
     */
    public String getSourcePublisherSubtype() {

        if ( this.constructed == false && this.hasSourcePublisherSubtype == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourcePublisherSubtype" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourcePublisherSubtype;
    }

    /**
     * <p>
     * A string representing the publisher sub type which is more specific than the publisher type.  The publisher subtype is usually the name of the social network hosting the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_publisher_subtype
     * </p>
     */
    public Optional<String> getSourcePublisherSubtypeAsOptional() {

        if ( this.constructed == false && this.hasSourcePublisherSubtype == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourcePublisherSubtype );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourcePublisherSubtype () {
        return this.hasSourcePublisherSubtype > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourcePublisherSubtype () {

        this.hasSourcePublisherSubtype = 0;
        this.hasModifiedSourcePublisherSubtype = 0;
        this.hasDefinedSourcePublisherSubtype = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourcePublisherSubtype () {
        return this.hasModifiedSourcePublisherSubtype > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourcePublisherSubtype () {
        return this.hasDefinedSourcePublisherSubtype;
    }

    public BaseContent setSourceDateFound ( Date sourceDateFound ) {

        ++this.hasSourceDateFound;
        ++this.hasModifiedSourceDateFound;

        this.sourceDateFound = sourceDateFound;

        hasDefinedSourceDateFound = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setSourceDateFoundAsZonedDateTime ( ZonedDateTime sourceDateFound ) {

        if (sourceDateFound != null) {
            setSourceDateFound(Date.from(sourceDateFound.toInstant()));
        } else {
            Date _sourceDateFound = null;
            setSourceDateFound(_sourceDateFound);
        }

        return this;
    }

    /**
     * <p>
     * The time we added this source to our index.  This is the time we found the source not when it was created.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_date_found
     * </p>
     */
    public Date getSourceDateFound() {

        if ( this.constructed == false && this.hasSourceDateFound == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceDateFound" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceDateFound;
    }

    /**
     * <p>
     * The time we added this source to our index.  This is the time we found the source not when it was created.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_date_found
     * </p>
     */
    public Optional<Date> getSourceDateFoundAsOptional() {

        if ( this.constructed == false && this.hasSourceDateFound == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceDateFound );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceDateFound () {
        return this.hasSourceDateFound > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceDateFound () {

        this.hasSourceDateFound = 0;
        this.hasModifiedSourceDateFound = 0;
        this.hasDefinedSourceDateFound = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceDateFound () {
        return this.hasModifiedSourceDateFound > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceDateFound () {
        return this.hasDefinedSourceDateFound;
    }

    public BaseContent setSourceLastUpdated ( Date sourceLastUpdated ) {

        ++this.hasSourceLastUpdated;
        ++this.hasModifiedSourceLastUpdated;

        this.sourceLastUpdated = sourceLastUpdated;

        hasDefinedSourceLastUpdated = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setSourceLastUpdatedAsZonedDateTime ( ZonedDateTime sourceLastUpdated ) {

        if (sourceLastUpdated != null) {
            setSourceLastUpdated(Date.from(sourceLastUpdated.toInstant()));
        } else {
            Date _sourceLastUpdated = null;
            setSourceLastUpdated(_sourceLastUpdated);
        }

        return this;
    }

    /**
     * <p>
     * The last time our crawler visited the source and processed it with a task.  This is always incremented even if the site isn't updated or even if the site is HTTP 500 or other network/transient errors.  This may not be updated if we aren't fetching the source via HTTP.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_last_updated
     * </p>
     */
    public Date getSourceLastUpdated() {

        if ( this.constructed == false && this.hasSourceLastUpdated == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceLastUpdated" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceLastUpdated;
    }

    /**
     * <p>
     * The last time our crawler visited the source and processed it with a task.  This is always incremented even if the site isn't updated or even if the site is HTTP 500 or other network/transient errors.  This may not be updated if we aren't fetching the source via HTTP.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_last_updated
     * </p>
     */
    public Optional<Date> getSourceLastUpdatedAsOptional() {

        if ( this.constructed == false && this.hasSourceLastUpdated == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceLastUpdated );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceLastUpdated () {
        return this.hasSourceLastUpdated > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceLastUpdated () {

        this.hasSourceLastUpdated = 0;
        this.hasModifiedSourceLastUpdated = 0;
        this.hasDefinedSourceLastUpdated = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceLastUpdated () {
        return this.hasModifiedSourceLastUpdated > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceLastUpdated () {
        return this.hasDefinedSourceLastUpdated;
    }

    public BaseContent setSourceLastPublished ( Date sourceLastPublished ) {

        ++this.hasSourceLastPublished;
        ++this.hasModifiedSourceLastPublished;

        this.sourceLastPublished = sourceLastPublished;

        hasDefinedSourceLastPublished = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setSourceLastPublishedAsZonedDateTime ( ZonedDateTime sourceLastPublished ) {

        if (sourceLastPublished != null) {
            setSourceLastPublished(Date.from(sourceLastPublished.toInstant()));
        } else {
            Date _sourceLastPublished = null;
            setSourceLastPublished(_sourceLastPublished);
        }

        return this;
    }

    /**
     * <p>
     * The last time this source published a new HTML file (as measured by content_sha1).  This may not be updated if we aren't fetching the source via HTTP.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_last_published
     * </p>
     */
    public Date getSourceLastPublished() {

        if ( this.constructed == false && this.hasSourceLastPublished == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceLastPublished" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceLastPublished;
    }

    /**
     * <p>
     * The last time this source published a new HTML file (as measured by content_sha1).  This may not be updated if we aren't fetching the source via HTTP.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_last_published
     * </p>
     */
    public Optional<Date> getSourceLastPublishedAsOptional() {

        if ( this.constructed == false && this.hasSourceLastPublished == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceLastPublished );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceLastPublished () {
        return this.hasSourceLastPublished > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceLastPublished () {

        this.hasSourceLastPublished = 0;
        this.hasModifiedSourceLastPublished = 0;
        this.hasDefinedSourceLastPublished = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceLastPublished () {
        return this.hasModifiedSourceLastPublished > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceLastPublished () {
        return this.hasDefinedSourceLastPublished;
    }

    public BaseContent setSourceLastPosted ( Date sourceLastPosted ) {

        ++this.hasSourceLastPosted;
        ++this.hasModifiedSourceLastPosted;

        this.sourceLastPosted = sourceLastPosted;

        hasDefinedSourceLastPosted = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setSourceLastPostedAsZonedDateTime ( ZonedDateTime sourceLastPosted ) {

        if (sourceLastPosted != null) {
            setSourceLastPosted(Date.from(sourceLastPosted.toInstant()));
        } else {
            Date _sourceLastPosted = null;
            setSourceLastPosted(_sourceLastPosted);
        }

        return this;
    }

    /**
     * <p>
     * The last time this source posted a new piece of content
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_last_posted
     * </p>
     */
    public Date getSourceLastPosted() {

        if ( this.constructed == false && this.hasSourceLastPosted == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceLastPosted" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceLastPosted;
    }

    /**
     * <p>
     * The last time this source posted a new piece of content
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_last_posted
     * </p>
     */
    public Optional<Date> getSourceLastPostedAsOptional() {

        if ( this.constructed == false && this.hasSourceLastPosted == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceLastPosted );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceLastPosted () {
        return this.hasSourceLastPosted > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceLastPosted () {

        this.hasSourceLastPosted = 0;
        this.hasModifiedSourceLastPosted = 0;
        this.hasDefinedSourceLastPosted = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceLastPosted () {
        return this.hasModifiedSourceLastPosted > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceLastPosted () {
        return this.hasDefinedSourceLastPosted;
    }

    public BaseContent setSourceUpdateInterval ( long sourceUpdateInterval ) {

        ++this.hasSourceUpdateInterval;
        ++this.hasModifiedSourceUpdateInterval;

        this.sourceUpdateInterval = sourceUpdateInterval;

        hasDefinedSourceUpdateInterval = true;

        return this;

    }

    /**
     * <p>
     * The number of milliseconds between updates to re-fetch this source.  This is used to for cyclical updates of sources and usually depends on how often the source posts updates.
     * </p>
     *
     * <p>
     * Schema type: varint , name: source_update_interval
     * </p>
     */
    public long getSourceUpdateInterval() {

        if ( this.constructed == false && this.hasSourceUpdateInterval == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceUpdateInterval" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceUpdateInterval;
    }

    /**
     * <p>
     * The number of milliseconds between updates to re-fetch this source.  This is used to for cyclical updates of sources and usually depends on how often the source posts updates.
     * </p>
     *
     * <p>
     * Schema type: varint , name: source_update_interval
     * </p>
     */
    public Optional<Long> getSourceUpdateIntervalAsOptional() {

        if ( this.constructed == false && this.hasSourceUpdateInterval == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceUpdateInterval );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceUpdateInterval () {
        return this.hasSourceUpdateInterval > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceUpdateInterval () {

        this.hasSourceUpdateInterval = 0;
        this.hasModifiedSourceUpdateInterval = 0;
        this.hasDefinedSourceUpdateInterval = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceUpdateInterval () {
        return this.hasModifiedSourceUpdateInterval > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceUpdateInterval () {
        return this.hasDefinedSourceUpdateInterval;
    }

    public BaseContent setSourceHttpStatus ( int sourceHttpStatus ) {

        ++this.hasSourceHttpStatus;
        ++this.hasModifiedSourceHttpStatus;

        this.sourceHttpStatus = sourceHttpStatus;

        hasDefinedSourceHttpStatus = true;

        return this;

    }

    /**
     * <p>
     * The HTTP status code of the last request to this source.
     * </p>
     *
     * <p>
     * Schema type: varint , name: source_http_status
     * </p>
     */
    public int getSourceHttpStatus() {

        if ( this.constructed == false && this.hasSourceHttpStatus == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceHttpStatus" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceHttpStatus;
    }

    /**
     * <p>
     * The HTTP status code of the last request to this source.
     * </p>
     *
     * <p>
     * Schema type: varint , name: source_http_status
     * </p>
     */
    public Optional<Integer> getSourceHttpStatusAsOptional() {

        if ( this.constructed == false && this.hasSourceHttpStatus == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceHttpStatus );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceHttpStatus () {
        return this.hasSourceHttpStatus > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceHttpStatus () {

        this.hasSourceHttpStatus = 0;
        this.hasModifiedSourceHttpStatus = 0;
        this.hasDefinedSourceHttpStatus = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceHttpStatus () {
        return this.hasModifiedSourceHttpStatus > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceHttpStatus () {
        return this.hasDefinedSourceHttpStatus;
    }

    public BaseContent setSourceSpamProbability ( float sourceSpamProbability ) {

        ++this.hasSourceSpamProbability;
        ++this.hasModifiedSourceSpamProbability;

        this.sourceSpamProbability = sourceSpamProbability;

        hasDefinedSourceSpamProbability = true;

        return this;

    }

    /**
     * <p>
     * The probability, between 0 and 1, that this source is a spam source.  -1.0 if we have not yet classified it.
     * </p>
     *
     * <p>
     * Schema type: float , name: source_spam_probability
     * </p>
     */
    public float getSourceSpamProbability() {

        if ( this.constructed == false && this.hasSourceSpamProbability == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceSpamProbability" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceSpamProbability;
    }

    /**
     * <p>
     * The probability, between 0 and 1, that this source is a spam source.  -1.0 if we have not yet classified it.
     * </p>
     *
     * <p>
     * Schema type: float , name: source_spam_probability
     * </p>
     */
    public Optional<Float> getSourceSpamProbabilityAsOptional() {

        if ( this.constructed == false && this.hasSourceSpamProbability == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceSpamProbability );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceSpamProbability () {
        return this.hasSourceSpamProbability > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceSpamProbability () {

        this.hasSourceSpamProbability = 0;
        this.hasModifiedSourceSpamProbability = 0;
        this.hasDefinedSourceSpamProbability = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceSpamProbability () {
        return this.hasModifiedSourceSpamProbability > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceSpamProbability () {
        return this.hasDefinedSourceSpamProbability;
    }

    public BaseContent setSourceContentLength ( int sourceContentLength ) {

        ++this.hasSourceContentLength;
        ++this.hasModifiedSourceContentLength;

        this.sourceContentLength = sourceContentLength;

        hasDefinedSourceContentLength = true;

        return this;

    }

    /**
     * <p>
     * The length, in bytes, of this HTML from the last time we fetched the page.
     * </p>
     *
     * <p>
     * Schema type: varint , name: source_content_length
     * </p>
     */
    public int getSourceContentLength() {

        if ( this.constructed == false && this.hasSourceContentLength == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceContentLength" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceContentLength;
    }

    /**
     * <p>
     * The length, in bytes, of this HTML from the last time we fetched the page.
     * </p>
     *
     * <p>
     * Schema type: varint , name: source_content_length
     * </p>
     */
    public Optional<Integer> getSourceContentLengthAsOptional() {

        if ( this.constructed == false && this.hasSourceContentLength == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceContentLength );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceContentLength () {
        return this.hasSourceContentLength > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceContentLength () {

        this.hasSourceContentLength = 0;
        this.hasModifiedSourceContentLength = 0;
        this.hasDefinedSourceContentLength = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceContentLength () {
        return this.hasModifiedSourceContentLength > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceContentLength () {
        return this.hasDefinedSourceContentLength;
    }

    public BaseContent setSourceContentChecksum ( String sourceContentChecksum ) {

        ++this.hasSourceContentChecksum;
        ++this.hasModifiedSourceContentChecksum;

        this.sourceContentChecksum = sourceContentChecksum;

        hasDefinedSourceContentChecksum = true;

        return this;

    }

    /**
     * <p>
     * The SHA1 checksum of the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_content_checksum
     * </p>
     */
    public String getSourceContentChecksum() {

        if ( this.constructed == false && this.hasSourceContentChecksum == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceContentChecksum" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceContentChecksum;
    }

    /**
     * <p>
     * The SHA1 checksum of the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_content_checksum
     * </p>
     */
    public Optional<String> getSourceContentChecksumAsOptional() {

        if ( this.constructed == false && this.hasSourceContentChecksum == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceContentChecksum );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceContentChecksum () {
        return this.hasSourceContentChecksum > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceContentChecksum () {

        this.hasSourceContentChecksum = 0;
        this.hasModifiedSourceContentChecksum = 0;
        this.hasDefinedSourceContentChecksum = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceContentChecksum () {
        return this.hasModifiedSourceContentChecksum > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceContentChecksum () {
        return this.hasDefinedSourceContentChecksum;
    }

    public BaseContent setSourceAssignedTags ( Set<String> sourceAssignedTags ) {

        NoNullSet.validate( sourceAssignedTags );

        ++this.hasSourceAssignedTags;
        ++this.hasModifiedSourceAssignedTags;

        this.sourceAssignedTags = sourceAssignedTags;

        hasDefinedSourceAssignedTags = true;

        return this;

    }

    /**
     * <p>
     * The set of tags assigned to this source by the either customers or spinn3r (globally).  This is used so that your client can filter by assigned tags or search by them as well.  This is not to be confused with the tags field which are assigned by the site.  These tags are opaque strings and not human readable to avoid giving away any customer information in the API.  Any sources you manually register are assigned tags with your vendor auth code.  This will allow you to register sources, and then filter / search over them.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: source_assigned_tags
     * </p>
     */
    public Set<String> getSourceAssignedTags() {

        if ( this.constructed == false && this.hasSourceAssignedTags == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceAssignedTags" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceAssignedTags;
    }

    /**
     * <p>
     * The set of tags assigned to this source by the either customers or spinn3r (globally).  This is used so that your client can filter by assigned tags or search by them as well.  This is not to be confused with the tags field which are assigned by the site.  These tags are opaque strings and not human readable to avoid giving away any customer information in the API.  Any sources you manually register are assigned tags with your vendor auth code.  This will allow you to register sources, and then filter / search over them.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: source_assigned_tags
     * </p>
     */
    public Optional<Set<String>> getSourceAssignedTagsAsOptional() {

        if ( this.constructed == false && this.hasSourceAssignedTags == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceAssignedTags );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceAssignedTags () {
        return this.hasSourceAssignedTags > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceAssignedTags () {

        this.hasSourceAssignedTags = 0;
        this.hasModifiedSourceAssignedTags = 0;
        this.hasDefinedSourceAssignedTags = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceAssignedTags () {
        return this.hasModifiedSourceAssignedTags > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceAssignedTags () {
        return this.hasDefinedSourceAssignedTags;
    }

    public BaseContent setSourceSettingUpdateStrategy ( SourceSettingUpdateStrategy sourceSettingUpdateStrategy ) {

        ++this.hasSourceSettingUpdateStrategy;
        ++this.hasModifiedSourceSettingUpdateStrategy;

        this.sourceSettingUpdateStrategy = sourceSettingUpdateStrategy;

        hasDefinedSourceSettingUpdateStrategy = true;

        return this;

    }

    /**
     * <p>
     * The update strategy for computing the update interval.
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_setting_update_strategy
     * </p>
     */
    public SourceSettingUpdateStrategy getSourceSettingUpdateStrategy() {

        if ( this.constructed == false && this.hasSourceSettingUpdateStrategy == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceSettingUpdateStrategy" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceSettingUpdateStrategy;
    }

    /**
     * <p>
     * The update strategy for computing the update interval.
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_setting_update_strategy
     * </p>
     */
    public Optional<SourceSettingUpdateStrategy> getSourceSettingUpdateStrategyAsOptional() {

        if ( this.constructed == false && this.hasSourceSettingUpdateStrategy == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceSettingUpdateStrategy );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceSettingUpdateStrategy () {
        return this.hasSourceSettingUpdateStrategy > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceSettingUpdateStrategy () {

        this.hasSourceSettingUpdateStrategy = 0;
        this.hasModifiedSourceSettingUpdateStrategy = 0;
        this.hasDefinedSourceSettingUpdateStrategy = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceSettingUpdateStrategy () {
        return this.hasModifiedSourceSettingUpdateStrategy > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceSettingUpdateStrategy () {
        return this.hasDefinedSourceSettingUpdateStrategy;
    }

    public BaseContent setSourceSettingIndexStrategy ( SourceSettingIndexStrategy sourceSettingIndexStrategy ) {

        ++this.hasSourceSettingIndexStrategy;
        ++this.hasModifiedSourceSettingIndexStrategy;

        this.sourceSettingIndexStrategy = sourceSettingIndexStrategy;

        hasDefinedSourceSettingIndexStrategy = true;

        return this;

    }

    /**
     * <p>
     * The update stratey for computing the update interval.
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_setting_index_strategy
     * </p>
     */
    public SourceSettingIndexStrategy getSourceSettingIndexStrategy() {

        if ( this.constructed == false && this.hasSourceSettingIndexStrategy == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceSettingIndexStrategy" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceSettingIndexStrategy;
    }

    /**
     * <p>
     * The update stratey for computing the update interval.
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_setting_index_strategy
     * </p>
     */
    public Optional<SourceSettingIndexStrategy> getSourceSettingIndexStrategyAsOptional() {

        if ( this.constructed == false && this.hasSourceSettingIndexStrategy == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceSettingIndexStrategy );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceSettingIndexStrategy () {
        return this.hasSourceSettingIndexStrategy > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceSettingIndexStrategy () {

        this.hasSourceSettingIndexStrategy = 0;
        this.hasModifiedSourceSettingIndexStrategy = 0;
        this.hasDefinedSourceSettingIndexStrategy = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceSettingIndexStrategy () {
        return this.hasModifiedSourceSettingIndexStrategy > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceSettingIndexStrategy () {
        return this.hasDefinedSourceSettingIndexStrategy;
    }

    public BaseContent setSourceSettingAuthorPolicy ( SourceSettingAuthorPolicy sourceSettingAuthorPolicy ) {

        ++this.hasSourceSettingAuthorPolicy;
        ++this.hasModifiedSourceSettingAuthorPolicy;

        this.sourceSettingAuthorPolicy = sourceSettingAuthorPolicy;

        hasDefinedSourceSettingAuthorPolicy = true;

        return this;

    }

    /**
     * <p>
     * Policy on handling author metadata. 
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_setting_author_policy
     * </p>
     */
    public SourceSettingAuthorPolicy getSourceSettingAuthorPolicy() {

        if ( this.constructed == false && this.hasSourceSettingAuthorPolicy == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceSettingAuthorPolicy" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceSettingAuthorPolicy;
    }

    /**
     * <p>
     * Policy on handling author metadata. 
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_setting_author_policy
     * </p>
     */
    public Optional<SourceSettingAuthorPolicy> getSourceSettingAuthorPolicyAsOptional() {

        if ( this.constructed == false && this.hasSourceSettingAuthorPolicy == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceSettingAuthorPolicy );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceSettingAuthorPolicy () {
        return this.hasSourceSettingAuthorPolicy > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceSettingAuthorPolicy () {

        this.hasSourceSettingAuthorPolicy = 0;
        this.hasModifiedSourceSettingAuthorPolicy = 0;
        this.hasDefinedSourceSettingAuthorPolicy = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceSettingAuthorPolicy () {
        return this.hasModifiedSourceSettingAuthorPolicy > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceSettingAuthorPolicy () {
        return this.hasDefinedSourceSettingAuthorPolicy;
    }

    public BaseContent setSourcePshbHub ( String sourcePshbHub ) {

        ++this.hasSourcePshbHub;
        ++this.hasModifiedSourcePshbHub;

        this.sourcePshbHub = sourcePshbHub;

        hasDefinedSourcePshbHub = true;

        return this;

    }

    /**
     * <p>
     * The PSHB hub this source is using.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_pshb_hub
     * </p>
     */
    public String getSourcePshbHub() {

        if ( this.constructed == false && this.hasSourcePshbHub == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourcePshbHub" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourcePshbHub;
    }

    /**
     * <p>
     * The PSHB hub this source is using.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_pshb_hub
     * </p>
     */
    public Optional<String> getSourcePshbHubAsOptional() {

        if ( this.constructed == false && this.hasSourcePshbHub == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourcePshbHub );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourcePshbHub () {
        return this.hasSourcePshbHub > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourcePshbHub () {

        this.hasSourcePshbHub = 0;
        this.hasModifiedSourcePshbHub = 0;
        this.hasDefinedSourcePshbHub = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourcePshbHub () {
        return this.hasModifiedSourcePshbHub > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourcePshbHub () {
        return this.hasDefinedSourcePshbHub;
    }

    public BaseContent setSourcePshbTopic ( String sourcePshbTopic ) {

        ++this.hasSourcePshbTopic;
        ++this.hasModifiedSourcePshbTopic;

        this.sourcePshbTopic = sourcePshbTopic;

        hasDefinedSourcePshbTopic = true;

        return this;

    }

    /**
     * <p>
     * The PSHB topic this source is using.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_pshb_topic
     * </p>
     */
    public String getSourcePshbTopic() {

        if ( this.constructed == false && this.hasSourcePshbTopic == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourcePshbTopic" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourcePshbTopic;
    }

    /**
     * <p>
     * The PSHB topic this source is using.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_pshb_topic
     * </p>
     */
    public Optional<String> getSourcePshbTopicAsOptional() {

        if ( this.constructed == false && this.hasSourcePshbTopic == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourcePshbTopic );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourcePshbTopic () {
        return this.hasSourcePshbTopic > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourcePshbTopic () {

        this.hasSourcePshbTopic = 0;
        this.hasModifiedSourcePshbTopic = 0;
        this.hasDefinedSourcePshbTopic = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourcePshbTopic () {
        return this.hasModifiedSourcePshbTopic > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourcePshbTopic () {
        return this.hasDefinedSourcePshbTopic;
    }

    public BaseContent setSourcePshbLastPosted ( Date sourcePshbLastPosted ) {

        ++this.hasSourcePshbLastPosted;
        ++this.hasModifiedSourcePshbLastPosted;

        this.sourcePshbLastPosted = sourcePshbLastPosted;

        hasDefinedSourcePshbLastPosted = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setSourcePshbLastPostedAsZonedDateTime ( ZonedDateTime sourcePshbLastPosted ) {

        if (sourcePshbLastPosted != null) {
            setSourcePshbLastPosted(Date.from(sourcePshbLastPosted.toInstant()));
        } else {
            Date _sourcePshbLastPosted = null;
            setSourcePshbLastPosted(_sourcePshbLastPosted);
        }

        return this;
    }

    /**
     * <p>
     * The last time this source posted and sent a message to the PSHB endpoint.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_pshb_last_posted
     * </p>
     */
    public Date getSourcePshbLastPosted() {

        if ( this.constructed == false && this.hasSourcePshbLastPosted == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourcePshbLastPosted" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourcePshbLastPosted;
    }

    /**
     * <p>
     * The last time this source posted and sent a message to the PSHB endpoint.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_pshb_last_posted
     * </p>
     */
    public Optional<Date> getSourcePshbLastPostedAsOptional() {

        if ( this.constructed == false && this.hasSourcePshbLastPosted == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourcePshbLastPosted );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourcePshbLastPosted () {
        return this.hasSourcePshbLastPosted > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourcePshbLastPosted () {

        this.hasSourcePshbLastPosted = 0;
        this.hasModifiedSourcePshbLastPosted = 0;
        this.hasDefinedSourcePshbLastPosted = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourcePshbLastPosted () {
        return this.hasModifiedSourcePshbLastPosted > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourcePshbLastPosted () {
        return this.hasDefinedSourcePshbLastPosted;
    }

    public BaseContent setSourcePshbLeaseExpires ( Date sourcePshbLeaseExpires ) {

        ++this.hasSourcePshbLeaseExpires;
        ++this.hasModifiedSourcePshbLeaseExpires;

        this.sourcePshbLeaseExpires = sourcePshbLeaseExpires;

        hasDefinedSourcePshbLeaseExpires = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setSourcePshbLeaseExpiresAsZonedDateTime ( ZonedDateTime sourcePshbLeaseExpires ) {

        if (sourcePshbLeaseExpires != null) {
            setSourcePshbLeaseExpires(Date.from(sourcePshbLeaseExpires.toInstant()));
        } else {
            Date _sourcePshbLeaseExpires = null;
            setSourcePshbLeaseExpires(_sourcePshbLeaseExpires);
        }

        return this;
    }

    /**
     * <p>
     * The time this PSHB lease expires.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_pshb_lease_expires
     * </p>
     */
    public Date getSourcePshbLeaseExpires() {

        if ( this.constructed == false && this.hasSourcePshbLeaseExpires == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourcePshbLeaseExpires" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourcePshbLeaseExpires;
    }

    /**
     * <p>
     * The time this PSHB lease expires.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_pshb_lease_expires
     * </p>
     */
    public Optional<Date> getSourcePshbLeaseExpiresAsOptional() {

        if ( this.constructed == false && this.hasSourcePshbLeaseExpires == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourcePshbLeaseExpires );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourcePshbLeaseExpires () {
        return this.hasSourcePshbLeaseExpires > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourcePshbLeaseExpires () {

        this.hasSourcePshbLeaseExpires = 0;
        this.hasModifiedSourcePshbLeaseExpires = 0;
        this.hasDefinedSourcePshbLeaseExpires = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourcePshbLeaseExpires () {
        return this.hasModifiedSourcePshbLeaseExpires > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourcePshbLeaseExpires () {
        return this.hasDefinedSourcePshbLeaseExpires;
    }

    public BaseContent setSourceUserInteractions ( long sourceUserInteractions ) {

        ++this.hasSourceUserInteractions;
        ++this.hasModifiedSourceUserInteractions;

        this.sourceUserInteractions = sourceUserInteractions;

        hasDefinedSourceUserInteractions = true;

        return this;

    }

    /**
     * <p>
     * The number of user interactions from other sources on this social network computed from the graph as we index content.  This is periodically computed and loaded into our source index.  This could be the number of at mentions, comment replies, etc.
     * </p>
     *
     * <p>
     * Schema type: bigint , name: source_user_interactions
     * </p>
     */
    public long getSourceUserInteractions() {

        if ( this.constructed == false && this.hasSourceUserInteractions == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceUserInteractions" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceUserInteractions;
    }

    /**
     * <p>
     * The number of user interactions from other sources on this social network computed from the graph as we index content.  This is periodically computed and loaded into our source index.  This could be the number of at mentions, comment replies, etc.
     * </p>
     *
     * <p>
     * Schema type: bigint , name: source_user_interactions
     * </p>
     */
    public Optional<Long> getSourceUserInteractionsAsOptional() {

        if ( this.constructed == false && this.hasSourceUserInteractions == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceUserInteractions );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceUserInteractions () {
        return this.hasSourceUserInteractions > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceUserInteractions () {

        this.hasSourceUserInteractions = 0;
        this.hasModifiedSourceUserInteractions = 0;
        this.hasDefinedSourceUserInteractions = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceUserInteractions () {
        return this.hasModifiedSourceUserInteractions > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceUserInteractions () {
        return this.hasDefinedSourceUserInteractions;
    }

    public BaseContent setSourceSettingMinimumContentMetadataScore ( int sourceSettingMinimumContentMetadataScore ) {

        ++this.hasSourceSettingMinimumContentMetadataScore;
        ++this.hasModifiedSourceSettingMinimumContentMetadataScore;

        this.sourceSettingMinimumContentMetadataScore = sourceSettingMinimumContentMetadataScore;

        hasDefinedSourceSettingMinimumContentMetadataScore = true;

        return this;

    }

    /**
     * <p>
     * The minimum metadata score before we can persist content
     * </p>
     *
     * <p>
     * Schema type: int , name: source_setting_minimum_content_metadata_score
     * </p>
     */
    public int getSourceSettingMinimumContentMetadataScore() {

        if ( this.constructed == false && this.hasSourceSettingMinimumContentMetadataScore == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceSettingMinimumContentMetadataScore" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceSettingMinimumContentMetadataScore;
    }

    /**
     * <p>
     * The minimum metadata score before we can persist content
     * </p>
     *
     * <p>
     * Schema type: int , name: source_setting_minimum_content_metadata_score
     * </p>
     */
    public Optional<Integer> getSourceSettingMinimumContentMetadataScoreAsOptional() {

        if ( this.constructed == false && this.hasSourceSettingMinimumContentMetadataScore == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceSettingMinimumContentMetadataScore );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceSettingMinimumContentMetadataScore () {
        return this.hasSourceSettingMinimumContentMetadataScore > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceSettingMinimumContentMetadataScore () {

        this.hasSourceSettingMinimumContentMetadataScore = 0;
        this.hasModifiedSourceSettingMinimumContentMetadataScore = 0;
        this.hasDefinedSourceSettingMinimumContentMetadataScore = false;

        sourceSettingMinimumContentMetadataScore = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceSettingMinimumContentMetadataScore () {
        return this.hasModifiedSourceSettingMinimumContentMetadataScore > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceSettingMinimumContentMetadataScore () {
        return this.hasDefinedSourceSettingMinimumContentMetadataScore;
    }

    public BaseContent setSourceNextUpdate ( Date sourceNextUpdate ) {

        ++this.hasSourceNextUpdate;
        ++this.hasModifiedSourceNextUpdate;

        this.sourceNextUpdate = sourceNextUpdate;

        hasDefinedSourceNextUpdate = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setSourceNextUpdateAsZonedDateTime ( ZonedDateTime sourceNextUpdate ) {

        if (sourceNextUpdate != null) {
            setSourceNextUpdate(Date.from(sourceNextUpdate.toInstant()));
        } else {
            Date _sourceNextUpdate = null;
            setSourceNextUpdate(_sourceNextUpdate);
        }

        return this;
    }

    /**
     * <p>
     * The next time we've scheduled the source to update
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_next_update
     * </p>
     */
    public Date getSourceNextUpdate() {

        if ( this.constructed == false && this.hasSourceNextUpdate == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceNextUpdate" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceNextUpdate;
    }

    /**
     * <p>
     * The next time we've scheduled the source to update
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_next_update
     * </p>
     */
    public Optional<Date> getSourceNextUpdateAsOptional() {

        if ( this.constructed == false && this.hasSourceNextUpdate == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceNextUpdate );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceNextUpdate () {
        return this.hasSourceNextUpdate > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceNextUpdate () {

        this.hasSourceNextUpdate = 0;
        this.hasModifiedSourceNextUpdate = 0;
        this.hasDefinedSourceNextUpdate = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceNextUpdate () {
        return this.hasModifiedSourceNextUpdate > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceNextUpdate () {
        return this.hasDefinedSourceNextUpdate;
    }

    public BaseContent setSourceTitle ( String sourceTitle ) {

        ++this.hasSourceTitle;
        ++this.hasModifiedSourceTitle;

        this.sourceTitle = sourceTitle;

        hasDefinedSourceTitle = true;

        return this;

    }

    /**
     * <p>
     * The title of the source. 
     * </p>
     *
     * <p>
     * Schema type: text , name: source_title
     * </p>
     */
    public String getSourceTitle() {

        if ( this.constructed == false && this.hasSourceTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceTitle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceTitle;
    }

    /**
     * <p>
     * The title of the source. 
     * </p>
     *
     * <p>
     * Schema type: text , name: source_title
     * </p>
     */
    public Optional<String> getSourceTitleAsOptional() {

        if ( this.constructed == false && this.hasSourceTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceTitle );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceTitle () {
        return this.hasSourceTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceTitle () {

        this.hasSourceTitle = 0;
        this.hasModifiedSourceTitle = 0;
        this.hasDefinedSourceTitle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceTitle () {
        return this.hasModifiedSourceTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceTitle () {
        return this.hasDefinedSourceTitle;
    }

    public BaseContent setSourceDescription ( String sourceDescription ) {

        ++this.hasSourceDescription;
        ++this.hasModifiedSourceDescription;

        this.sourceDescription = sourceDescription;

        hasDefinedSourceDescription = true;

        return this;

    }

    /**
     * <p>
     * A short description of the source.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_description
     * </p>
     */
    public String getSourceDescription() {

        if ( this.constructed == false && this.hasSourceDescription == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceDescription" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceDescription;
    }

    /**
     * <p>
     * A short description of the source.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_description
     * </p>
     */
    public Optional<String> getSourceDescriptionAsOptional() {

        if ( this.constructed == false && this.hasSourceDescription == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceDescription );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceDescription () {
        return this.hasSourceDescription > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceDescription () {

        this.hasSourceDescription = 0;
        this.hasModifiedSourceDescription = 0;
        this.hasDefinedSourceDescription = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceDescription () {
        return this.hasModifiedSourceDescription > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceDescription () {
        return this.hasDefinedSourceDescription;
    }

    public BaseContent setSourceHandle ( String sourceHandle ) {

        ++this.hasSourceHandle;
        ++this.hasModifiedSourceHandle;

        this.sourceHandle = sourceHandle;

        hasDefinedSourceHandle = true;

        return this;

    }

    /**
     * <p>
     * Unique handle for this source across the entire social media property.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_handle
     * </p>
     */
    public String getSourceHandle() {

        if ( this.constructed == false && this.hasSourceHandle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceHandle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceHandle;
    }

    /**
     * <p>
     * Unique handle for this source across the entire social media property.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_handle
     * </p>
     */
    public Optional<String> getSourceHandleAsOptional() {

        if ( this.constructed == false && this.hasSourceHandle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceHandle );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceHandle () {
        return this.hasSourceHandle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceHandle () {

        this.hasSourceHandle = 0;
        this.hasModifiedSourceHandle = 0;
        this.hasDefinedSourceHandle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceHandle () {
        return this.hasModifiedSourceHandle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceHandle () {
        return this.hasDefinedSourceHandle;
    }

    public BaseContent setSourceFavorites ( int sourceFavorites ) {

        ++this.hasSourceFavorites;
        ++this.hasModifiedSourceFavorites;

        this.sourceFavorites = sourceFavorites;

        hasDefinedSourceFavorites = true;

        return this;

    }

    /**
     * <p>
     * The number of favorites this source has according to the website or social network.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_favorites
     * </p>
     */
    public int getSourceFavorites() {

        if ( this.constructed == false && this.hasSourceFavorites == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceFavorites" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceFavorites;
    }

    /**
     * <p>
     * The number of favorites this source has according to the website or social network.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_favorites
     * </p>
     */
    public Optional<Integer> getSourceFavoritesAsOptional() {

        if ( this.constructed == false && this.hasSourceFavorites == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceFavorites );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceFavorites () {
        return this.hasSourceFavorites > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceFavorites () {

        this.hasSourceFavorites = 0;
        this.hasModifiedSourceFavorites = 0;
        this.hasDefinedSourceFavorites = false;

        sourceFavorites = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceFavorites () {
        return this.hasModifiedSourceFavorites > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceFavorites () {
        return this.hasDefinedSourceFavorites;
    }

    public BaseContent setSourceFollowers ( int sourceFollowers ) {

        ++this.hasSourceFollowers;
        ++this.hasModifiedSourceFollowers;

        this.sourceFollowers = sourceFollowers;

        hasDefinedSourceFollowers = true;

        return this;

    }

    /**
     * <p>
     * The number of followers this source has according to the website or social network.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_followers
     * </p>
     */
    public int getSourceFollowers() {

        if ( this.constructed == false && this.hasSourceFollowers == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceFollowers" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceFollowers;
    }

    /**
     * <p>
     * The number of followers this source has according to the website or social network.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_followers
     * </p>
     */
    public Optional<Integer> getSourceFollowersAsOptional() {

        if ( this.constructed == false && this.hasSourceFollowers == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceFollowers );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceFollowers () {
        return this.hasSourceFollowers > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceFollowers () {

        this.hasSourceFollowers = 0;
        this.hasModifiedSourceFollowers = 0;
        this.hasDefinedSourceFollowers = false;

        sourceFollowers = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceFollowers () {
        return this.hasModifiedSourceFollowers > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceFollowers () {
        return this.hasDefinedSourceFollowers;
    }

    public BaseContent setSourceFollowing ( int sourceFollowing ) {

        ++this.hasSourceFollowing;
        ++this.hasModifiedSourceFollowing;

        this.sourceFollowing = sourceFollowing;

        hasDefinedSourceFollowing = true;

        return this;

    }

    /**
     * <p>
     * The number of users / friends this source is following.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_following
     * </p>
     */
    public int getSourceFollowing() {

        if ( this.constructed == false && this.hasSourceFollowing == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceFollowing" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceFollowing;
    }

    /**
     * <p>
     * The number of users / friends this source is following.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_following
     * </p>
     */
    public Optional<Integer> getSourceFollowingAsOptional() {

        if ( this.constructed == false && this.hasSourceFollowing == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceFollowing );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceFollowing () {
        return this.hasSourceFollowing > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceFollowing () {

        this.hasSourceFollowing = 0;
        this.hasModifiedSourceFollowing = 0;
        this.hasDefinedSourceFollowing = false;

        sourceFollowing = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceFollowing () {
        return this.hasModifiedSourceFollowing > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceFollowing () {
        return this.hasDefinedSourceFollowing;
    }

    public BaseContent setSourceVerified ( boolean sourceVerified ) {

        ++this.hasSourceVerified;
        ++this.hasModifiedSourceVerified;

        this.sourceVerified = sourceVerified;

        hasDefinedSourceVerified = true;

        return this;

    }

    /**
     * <p>
     * True when this user account is verified to be authentic.
     * </p>
     *
     * <p>
     * Schema type: boolean , name: source_verified
     * </p>
     */
    public boolean getSourceVerified() {

        if ( this.constructed == false && this.hasSourceVerified == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceVerified" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceVerified;
    }

    /**
     * <p>
     * True when this user account is verified to be authentic.
     * </p>
     *
     * <p>
     * Schema type: boolean , name: source_verified
     * </p>
     */
    public Optional<Boolean> getSourceVerifiedAsOptional() {

        if ( this.constructed == false && this.hasSourceVerified == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceVerified );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceVerified () {
        return this.hasSourceVerified > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceVerified () {

        this.hasSourceVerified = 0;
        this.hasModifiedSourceVerified = 0;
        this.hasDefinedSourceVerified = false;

        sourceVerified = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceVerified () {
        return this.hasModifiedSourceVerified > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceVerified () {
        return this.hasDefinedSourceVerified;
    }

    public BaseContent setSourceProfiles ( Set<String> sourceProfiles ) {

        NoNullSet.validate( sourceProfiles );

        ++this.hasSourceProfiles;
        ++this.hasModifiedSourceProfiles;

        this.sourceProfiles = sourceProfiles;

        hasDefinedSourceProfiles = true;

        return this;

    }

    /**
     * <p>
     * Set of URLs on other social networking sites and weblogs for this user.  These are essentially alternate profiles for the user.  Their twitter site, facebook site, etc.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: source_profiles
     * </p>
     */
    public Set<String> getSourceProfiles() {

        if ( this.constructed == false && this.hasSourceProfiles == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceProfiles" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceProfiles;
    }

    /**
     * <p>
     * Set of URLs on other social networking sites and weblogs for this user.  These are essentially alternate profiles for the user.  Their twitter site, facebook site, etc.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: source_profiles
     * </p>
     */
    public Optional<Set<String>> getSourceProfilesAsOptional() {

        if ( this.constructed == false && this.hasSourceProfiles == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceProfiles );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceProfiles () {
        return this.hasSourceProfiles > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceProfiles () {

        this.hasSourceProfiles = 0;
        this.hasModifiedSourceProfiles = 0;
        this.hasDefinedSourceProfiles = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceProfiles () {
        return this.hasModifiedSourceProfiles > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceProfiles () {
        return this.hasDefinedSourceProfiles;
    }

    public BaseContent setSourceLocation ( String sourceLocation ) {

        ++this.hasSourceLocation;
        ++this.hasModifiedSourceLocation;

        this.sourceLocation = sourceLocation;

        hasDefinedSourceLocation = true;

        return this;

    }

    /**
     * <p>
     * The human readable location of the source.  Example: 'Washington, DC'
     * </p>
     *
     * <p>
     * Schema type: text , name: source_location
     * </p>
     */
    public String getSourceLocation() {

        if ( this.constructed == false && this.hasSourceLocation == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceLocation" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceLocation;
    }

    /**
     * <p>
     * The human readable location of the source.  Example: 'Washington, DC'
     * </p>
     *
     * <p>
     * Schema type: text , name: source_location
     * </p>
     */
    public Optional<String> getSourceLocationAsOptional() {

        if ( this.constructed == false && this.hasSourceLocation == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceLocation );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceLocation () {
        return this.hasSourceLocation > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceLocation () {

        this.hasSourceLocation = 0;
        this.hasModifiedSourceLocation = 0;
        this.hasDefinedSourceLocation = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceLocation () {
        return this.hasModifiedSourceLocation > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceLocation () {
        return this.hasDefinedSourceLocation;
    }

    public BaseContent setSourceImageSrc ( String sourceImageSrc ) {

        ++this.hasSourceImageSrc;
        ++this.hasModifiedSourceImageSrc;

        this.sourceImageSrc = sourceImageSrc;

        hasDefinedSourceImageSrc = true;

        return this;

    }

    /**
     * <p>
     * The URL to the img which represents this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_image_src
     * </p>
     */
    public String getSourceImageSrc() {

        if ( this.constructed == false && this.hasSourceImageSrc == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceImageSrc" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceImageSrc;
    }

    /**
     * <p>
     * The URL to the img which represents this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_image_src
     * </p>
     */
    public Optional<String> getSourceImageSrcAsOptional() {

        if ( this.constructed == false && this.hasSourceImageSrc == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceImageSrc );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceImageSrc () {
        return this.hasSourceImageSrc > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceImageSrc () {

        this.hasSourceImageSrc = 0;
        this.hasModifiedSourceImageSrc = 0;
        this.hasDefinedSourceImageSrc = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceImageSrc () {
        return this.hasModifiedSourceImageSrc > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceImageSrc () {
        return this.hasDefinedSourceImageSrc;
    }

    public BaseContent setSourceImageWidth ( int sourceImageWidth ) {

        ++this.hasSourceImageWidth;
        ++this.hasModifiedSourceImageWidth;

        this.sourceImageWidth = sourceImageWidth;

        hasDefinedSourceImageWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_image_width
     * </p>
     */
    public int getSourceImageWidth() {

        if ( this.constructed == false && this.hasSourceImageWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceImageWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceImageWidth;
    }

    /**
     * <p>
     * The width of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_image_width
     * </p>
     */
    public Optional<Integer> getSourceImageWidthAsOptional() {

        if ( this.constructed == false && this.hasSourceImageWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceImageWidth );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceImageWidth () {
        return this.hasSourceImageWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceImageWidth () {

        this.hasSourceImageWidth = 0;
        this.hasModifiedSourceImageWidth = 0;
        this.hasDefinedSourceImageWidth = false;

        sourceImageWidth = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceImageWidth () {
        return this.hasModifiedSourceImageWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceImageWidth () {
        return this.hasDefinedSourceImageWidth;
    }

    public BaseContent setSourceImageHeight ( int sourceImageHeight ) {

        ++this.hasSourceImageHeight;
        ++this.hasModifiedSourceImageHeight;

        this.sourceImageHeight = sourceImageHeight;

        hasDefinedSourceImageHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_image_height
     * </p>
     */
    public int getSourceImageHeight() {

        if ( this.constructed == false && this.hasSourceImageHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceImageHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceImageHeight;
    }

    /**
     * <p>
     * The height of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_image_height
     * </p>
     */
    public Optional<Integer> getSourceImageHeightAsOptional() {

        if ( this.constructed == false && this.hasSourceImageHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceImageHeight );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceImageHeight () {
        return this.hasSourceImageHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceImageHeight () {

        this.hasSourceImageHeight = 0;
        this.hasModifiedSourceImageHeight = 0;
        this.hasDefinedSourceImageHeight = false;

        sourceImageHeight = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceImageHeight () {
        return this.hasModifiedSourceImageHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceImageHeight () {
        return this.hasDefinedSourceImageHeight;
    }

    public BaseContent setSourceTelephone ( String sourceTelephone ) {

        ++this.hasSourceTelephone;
        ++this.hasModifiedSourceTelephone;

        this.sourceTelephone = sourceTelephone;

        hasDefinedSourceTelephone = true;

        return this;

    }

    /**
     * <p>
     * The telephone number for this source.  Only present in limited situations.  Specifically around REVIEW sites.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_telephone
     * </p>
     */
    public String getSourceTelephone() {

        if ( this.constructed == false && this.hasSourceTelephone == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceTelephone" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceTelephone;
    }

    /**
     * <p>
     * The telephone number for this source.  Only present in limited situations.  Specifically around REVIEW sites.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_telephone
     * </p>
     */
    public Optional<String> getSourceTelephoneAsOptional() {

        if ( this.constructed == false && this.hasSourceTelephone == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceTelephone );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceTelephone () {
        return this.hasSourceTelephone > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceTelephone () {

        this.hasSourceTelephone = 0;
        this.hasModifiedSourceTelephone = 0;
        this.hasDefinedSourceTelephone = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceTelephone () {
        return this.hasModifiedSourceTelephone > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceTelephone () {
        return this.hasDefinedSourceTelephone;
    }

    public BaseContent setSourceTags ( Set<String> sourceTags ) {

        NoNullSet.validate( sourceTags );

        ++this.hasSourceTags;
        ++this.hasModifiedSourceTags;

        this.sourceTags = sourceTags;

        hasDefinedSourceTags = true;

        return this;

    }

    /**
     * <p>
     * Tags for the source provided by the user's profile.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: source_tags
     * </p>
     */
    public Set<String> getSourceTags() {

        if ( this.constructed == false && this.hasSourceTags == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceTags" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceTags;
    }

    /**
     * <p>
     * Tags for the source provided by the user's profile.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: source_tags
     * </p>
     */
    public Optional<Set<String>> getSourceTagsAsOptional() {

        if ( this.constructed == false && this.hasSourceTags == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceTags );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceTags () {
        return this.hasSourceTags > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceTags () {

        this.hasSourceTags = 0;
        this.hasModifiedSourceTags = 0;
        this.hasDefinedSourceTags = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceTags () {
        return this.hasModifiedSourceTags > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceTags () {
        return this.hasDefinedSourceTags;
    }

    public BaseContent setSourceRatingValue ( String sourceRatingValue ) {

        ++this.hasSourceRatingValue;
        ++this.hasModifiedSourceRatingValue;

        this.sourceRatingValue = sourceRatingValue;

        hasDefinedSourceRatingValue = true;

        return this;

    }

    /**
     * <p>
     * The rating for this item provided by the user.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_rating_value
     * </p>
     */
    public String getSourceRatingValue() {

        if ( this.constructed == false && this.hasSourceRatingValue == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceRatingValue" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceRatingValue;
    }

    /**
     * <p>
     * The rating for this item provided by the user.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_rating_value
     * </p>
     */
    public Optional<String> getSourceRatingValueAsOptional() {

        if ( this.constructed == false && this.hasSourceRatingValue == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceRatingValue );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceRatingValue () {
        return this.hasSourceRatingValue > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceRatingValue () {

        this.hasSourceRatingValue = 0;
        this.hasModifiedSourceRatingValue = 0;
        this.hasDefinedSourceRatingValue = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceRatingValue () {
        return this.hasModifiedSourceRatingValue > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceRatingValue () {
        return this.hasDefinedSourceRatingValue;
    }

    public BaseContent setSourceFaviconSrc ( String sourceFaviconSrc ) {

        ++this.hasSourceFaviconSrc;
        ++this.hasModifiedSourceFaviconSrc;

        this.sourceFaviconSrc = sourceFaviconSrc;

        hasDefinedSourceFaviconSrc = true;

        return this;

    }

    /**
     * <p>
     * The URL to the favicon which represents this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_favicon_src
     * </p>
     */
    public String getSourceFaviconSrc() {

        if ( this.constructed == false && this.hasSourceFaviconSrc == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceFaviconSrc" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceFaviconSrc;
    }

    /**
     * <p>
     * The URL to the favicon which represents this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_favicon_src
     * </p>
     */
    public Optional<String> getSourceFaviconSrcAsOptional() {

        if ( this.constructed == false && this.hasSourceFaviconSrc == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceFaviconSrc );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceFaviconSrc () {
        return this.hasSourceFaviconSrc > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceFaviconSrc () {

        this.hasSourceFaviconSrc = 0;
        this.hasModifiedSourceFaviconSrc = 0;
        this.hasDefinedSourceFaviconSrc = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceFaviconSrc () {
        return this.hasModifiedSourceFaviconSrc > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceFaviconSrc () {
        return this.hasDefinedSourceFaviconSrc;
    }

    public BaseContent setSourceFaviconWidth ( int sourceFaviconWidth ) {

        ++this.hasSourceFaviconWidth;
        ++this.hasModifiedSourceFaviconWidth;

        this.sourceFaviconWidth = sourceFaviconWidth;

        hasDefinedSourceFaviconWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_favicon_width
     * </p>
     */
    public int getSourceFaviconWidth() {

        if ( this.constructed == false && this.hasSourceFaviconWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceFaviconWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceFaviconWidth;
    }

    /**
     * <p>
     * The width of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_favicon_width
     * </p>
     */
    public Optional<Integer> getSourceFaviconWidthAsOptional() {

        if ( this.constructed == false && this.hasSourceFaviconWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceFaviconWidth );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceFaviconWidth () {
        return this.hasSourceFaviconWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceFaviconWidth () {

        this.hasSourceFaviconWidth = 0;
        this.hasModifiedSourceFaviconWidth = 0;
        this.hasDefinedSourceFaviconWidth = false;

        sourceFaviconWidth = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceFaviconWidth () {
        return this.hasModifiedSourceFaviconWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceFaviconWidth () {
        return this.hasDefinedSourceFaviconWidth;
    }

    public BaseContent setSourceFaviconHeight ( int sourceFaviconHeight ) {

        ++this.hasSourceFaviconHeight;
        ++this.hasModifiedSourceFaviconHeight;

        this.sourceFaviconHeight = sourceFaviconHeight;

        hasDefinedSourceFaviconHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_favicon_height
     * </p>
     */
    public int getSourceFaviconHeight() {

        if ( this.constructed == false && this.hasSourceFaviconHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceFaviconHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceFaviconHeight;
    }

    /**
     * <p>
     * The height of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_favicon_height
     * </p>
     */
    public Optional<Integer> getSourceFaviconHeightAsOptional() {

        if ( this.constructed == false && this.hasSourceFaviconHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceFaviconHeight );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceFaviconHeight () {
        return this.hasSourceFaviconHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceFaviconHeight () {

        this.hasSourceFaviconHeight = 0;
        this.hasModifiedSourceFaviconHeight = 0;
        this.hasDefinedSourceFaviconHeight = false;

        sourceFaviconHeight = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceFaviconHeight () {
        return this.hasModifiedSourceFaviconHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceFaviconHeight () {
        return this.hasDefinedSourceFaviconHeight;
    }

    public BaseContent setSourceCreated ( Date sourceCreated ) {

        ++this.hasSourceCreated;
        ++this.hasModifiedSourceCreated;

        this.sourceCreated = sourceCreated;

        hasDefinedSourceCreated = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setSourceCreatedAsZonedDateTime ( ZonedDateTime sourceCreated ) {

        if (sourceCreated != null) {
            setSourceCreated(Date.from(sourceCreated.toInstant()));
        } else {
            Date _sourceCreated = null;
            setSourceCreated(_sourceCreated);
        }

        return this;
    }

    /**
     * <p>
     * The time this account was created and is provided from the source.  
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_created
     * </p>
     */
    public Date getSourceCreated() {

        if ( this.constructed == false && this.hasSourceCreated == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceCreated" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceCreated;
    }

    /**
     * <p>
     * The time this account was created and is provided from the source.  
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: source_created
     * </p>
     */
    public Optional<Date> getSourceCreatedAsOptional() {

        if ( this.constructed == false && this.hasSourceCreated == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceCreated );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceCreated () {
        return this.hasSourceCreated > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceCreated () {

        this.hasSourceCreated = 0;
        this.hasModifiedSourceCreated = 0;
        this.hasDefinedSourceCreated = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceCreated () {
        return this.hasModifiedSourceCreated > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceCreated () {
        return this.hasDefinedSourceCreated;
    }

    public BaseContent setSourceLikes ( int sourceLikes ) {

        ++this.hasSourceLikes;
        ++this.hasModifiedSourceLikes;

        this.sourceLikes = sourceLikes;

        hasDefinedSourceLikes = true;

        return this;

    }

    /**
     * <p>
     * The number of Facebook likes for this source.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_likes
     * </p>
     */
    public int getSourceLikes() {

        if ( this.constructed == false && this.hasSourceLikes == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceLikes" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceLikes;
    }

    /**
     * <p>
     * The number of Facebook likes for this source.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_likes
     * </p>
     */
    public Optional<Integer> getSourceLikesAsOptional() {

        if ( this.constructed == false && this.hasSourceLikes == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceLikes );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceLikes () {
        return this.hasSourceLikes > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceLikes () {

        this.hasSourceLikes = 0;
        this.hasModifiedSourceLikes = 0;
        this.hasDefinedSourceLikes = false;

        sourceLikes = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceLikes () {
        return this.hasModifiedSourceLikes > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceLikes () {
        return this.hasDefinedSourceLikes;
    }

    public BaseContent setSourceRelatedTags ( Set<String> sourceRelatedTags ) {

        NoNullSet.validate( sourceRelatedTags );

        ++this.hasSourceRelatedTags;
        ++this.hasModifiedSourceRelatedTags;

        this.sourceRelatedTags = sourceRelatedTags;

        hasDefinedSourceRelatedTags = true;

        return this;

    }

    /**
     * <p>
     * A set of tags, optionally assigned by a site, which relate to this specific source.  Supported for medium.com only (for now)
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: source_related_tags
     * </p>
     */
    public Set<String> getSourceRelatedTags() {

        if ( this.constructed == false && this.hasSourceRelatedTags == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceRelatedTags" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceRelatedTags;
    }

    /**
     * <p>
     * A set of tags, optionally assigned by a site, which relate to this specific source.  Supported for medium.com only (for now)
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: source_related_tags
     * </p>
     */
    public Optional<Set<String>> getSourceRelatedTagsAsOptional() {

        if ( this.constructed == false && this.hasSourceRelatedTags == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceRelatedTags );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceRelatedTags () {
        return this.hasSourceRelatedTags > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceRelatedTags () {

        this.hasSourceRelatedTags = 0;
        this.hasModifiedSourceRelatedTags = 0;
        this.hasDefinedSourceRelatedTags = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceRelatedTags () {
        return this.hasModifiedSourceRelatedTags > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceRelatedTags () {
        return this.hasDefinedSourceRelatedTags;
    }

    public BaseContent setSourceParsedPosts ( int sourceParsedPosts ) {

        ++this.hasSourceParsedPosts;
        ++this.hasModifiedSourceParsedPosts;

        this.sourceParsedPosts = sourceParsedPosts;

        hasDefinedSourceParsedPosts = true;

        return this;

    }

    /**
     * <p>
     * The number of posts parsed/found when we last indexed this source.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_parsed_posts
     * </p>
     */
    public int getSourceParsedPosts() {

        if ( this.constructed == false && this.hasSourceParsedPosts == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceParsedPosts" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceParsedPosts;
    }

    /**
     * <p>
     * The number of posts parsed/found when we last indexed this source.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_parsed_posts
     * </p>
     */
    public Optional<Integer> getSourceParsedPostsAsOptional() {

        if ( this.constructed == false && this.hasSourceParsedPosts == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceParsedPosts );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceParsedPosts () {
        return this.hasSourceParsedPosts > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceParsedPosts () {

        this.hasSourceParsedPosts = 0;
        this.hasModifiedSourceParsedPosts = 0;
        this.hasDefinedSourceParsedPosts = false;

        sourceParsedPosts = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceParsedPosts () {
        return this.hasModifiedSourceParsedPosts > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceParsedPosts () {
        return this.hasDefinedSourceParsedPosts;
    }

    public BaseContent setSourceParsedPostsMax ( int sourceParsedPostsMax ) {

        ++this.hasSourceParsedPostsMax;
        ++this.hasModifiedSourceParsedPostsMax;

        this.sourceParsedPostsMax = sourceParsedPostsMax;

        hasDefinedSourceParsedPostsMax = true;

        return this;

    }

    /**
     * <p>
     * The maximum number of parsed posts we've ever seen.  If parsed_posts_max greater than zero and parsed_posts is 0 then we are probably hitting a throttle or failing to parse the content.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_parsed_posts_max
     * </p>
     */
    public int getSourceParsedPostsMax() {

        if ( this.constructed == false && this.hasSourceParsedPostsMax == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceParsedPostsMax" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceParsedPostsMax;
    }

    /**
     * <p>
     * The maximum number of parsed posts we've ever seen.  If parsed_posts_max greater than zero and parsed_posts is 0 then we are probably hitting a throttle or failing to parse the content.
     * </p>
     *
     * <p>
     * Schema type: int , name: source_parsed_posts_max
     * </p>
     */
    public Optional<Integer> getSourceParsedPostsMaxAsOptional() {

        if ( this.constructed == false && this.hasSourceParsedPostsMax == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceParsedPostsMax );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceParsedPostsMax () {
        return this.hasSourceParsedPostsMax > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceParsedPostsMax () {

        this.hasSourceParsedPostsMax = 0;
        this.hasModifiedSourceParsedPostsMax = 0;
        this.hasDefinedSourceParsedPostsMax = false;

        sourceParsedPostsMax = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceParsedPostsMax () {
        return this.hasModifiedSourceParsedPostsMax > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceParsedPostsMax () {
        return this.hasDefinedSourceParsedPostsMax;
    }

    public BaseContent setSourceFeedHref ( String sourceFeedHref ) {

        ++this.hasSourceFeedHref;
        ++this.hasModifiedSourceFeedHref;

        this.sourceFeedHref = sourceFeedHref;

        hasDefinedSourceFeedHref = true;

        return this;

    }

    /**
     * <p>
     * The URL of the RSS feed.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_feed_href
     * </p>
     */
    public String getSourceFeedHref() {

        if ( this.constructed == false && this.hasSourceFeedHref == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceFeedHref" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceFeedHref;
    }

    /**
     * <p>
     * The URL of the RSS feed.
     * </p>
     *
     * <p>
     * Schema type: text , name: source_feed_href
     * </p>
     */
    public Optional<String> getSourceFeedHrefAsOptional() {

        if ( this.constructed == false && this.hasSourceFeedHref == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceFeedHref );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceFeedHref () {
        return this.hasSourceFeedHref > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceFeedHref () {

        this.hasSourceFeedHref = 0;
        this.hasModifiedSourceFeedHref = 0;
        this.hasDefinedSourceFeedHref = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceFeedHref () {
        return this.hasModifiedSourceFeedHref > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceFeedHref () {
        return this.hasDefinedSourceFeedHref;
    }

    public BaseContent setSourceFeedTitle ( String sourceFeedTitle ) {

        ++this.hasSourceFeedTitle;
        ++this.hasModifiedSourceFeedTitle;

        this.sourceFeedTitle = sourceFeedTitle;

        hasDefinedSourceFeedTitle = true;

        return this;

    }

    /**
     * <p>
     * The title of the feed. 
     * </p>
     *
     * <p>
     * Schema type: text , name: source_feed_title
     * </p>
     */
    public String getSourceFeedTitle() {

        if ( this.constructed == false && this.hasSourceFeedTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceFeedTitle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceFeedTitle;
    }

    /**
     * <p>
     * The title of the feed. 
     * </p>
     *
     * <p>
     * Schema type: text , name: source_feed_title
     * </p>
     */
    public Optional<String> getSourceFeedTitleAsOptional() {

        if ( this.constructed == false && this.hasSourceFeedTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceFeedTitle );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceFeedTitle () {
        return this.hasSourceFeedTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceFeedTitle () {

        this.hasSourceFeedTitle = 0;
        this.hasModifiedSourceFeedTitle = 0;
        this.hasDefinedSourceFeedTitle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceFeedTitle () {
        return this.hasModifiedSourceFeedTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceFeedTitle () {
        return this.hasDefinedSourceFeedTitle;
    }

    public BaseContent setSourceFeedFormat ( SourceFeedFormat sourceFeedFormat ) {

        ++this.hasSourceFeedFormat;
        ++this.hasModifiedSourceFeedFormat;

        this.sourceFeedFormat = sourceFeedFormat;

        hasDefinedSourceFeedFormat = true;

        return this;

    }

    /**
     * <p>
     * The format of the feed as a token.  RSS or ATOM, etc.
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_feed_format
     * </p>
     */
    public SourceFeedFormat getSourceFeedFormat() {

        if ( this.constructed == false && this.hasSourceFeedFormat == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sourceFeedFormat" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sourceFeedFormat;
    }

    /**
     * <p>
     * The format of the feed as a token.  RSS or ATOM, etc.
     * </p>
     *
     * <p>
     * Schema type: enum , name: source_feed_format
     * </p>
     */
    public Optional<SourceFeedFormat> getSourceFeedFormatAsOptional() {

        if ( this.constructed == false && this.hasSourceFeedFormat == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sourceFeedFormat );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSourceFeedFormat () {
        return this.hasSourceFeedFormat > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSourceFeedFormat () {

        this.hasSourceFeedFormat = 0;
        this.hasModifiedSourceFeedFormat = 0;
        this.hasDefinedSourceFeedFormat = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSourceFeedFormat () {
        return this.hasModifiedSourceFeedFormat > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSourceFeedFormat () {
        return this.hasDefinedSourceFeedFormat;
    }

    public BaseContent setPermalink ( String permalink ) {

        ++this.hasPermalink;
        ++this.hasModifiedPermalink;

        this.permalink = permalink;

        hasDefinedPermalink = true;

        return this;

    }

    /**
     * <p>
     * The unique URL to the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink
     * </p>
     */
    public String getPermalink() {

        if ( this.constructed == false && this.hasPermalink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.permalink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.permalink;
    }

    /**
     * <p>
     * The unique URL to the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink
     * </p>
     */
    public Optional<String> getPermalinkAsOptional() {

        if ( this.constructed == false && this.hasPermalink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.permalink );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPermalink () {
        return this.hasPermalink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPermalink () {

        this.hasPermalink = 0;
        this.hasModifiedPermalink = 0;
        this.hasDefinedPermalink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPermalink () {
        return this.hasModifiedPermalink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPermalink () {
        return this.hasDefinedPermalink;
    }

    public BaseContent setIdentifier ( String identifier ) {

        ++this.hasIdentifier;
        ++this.hasModifiedIdentifier;

        this.identifier = identifier;

        hasDefinedIdentifier = true;

        return this;

    }

    /**
     * <p>
     * A platform specific unique identifier for this post.  Note that this is NOT always present as some platforms lack the concept of unique identifiers.  Additionally, this may conflict with another identifier from another platform.
     * </p>
     *
     * <p>
     * Schema type: text , name: identifier
     * </p>
     */
    public String getIdentifier() {

        if ( this.constructed == false && this.hasIdentifier == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.identifier" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.identifier;
    }

    /**
     * <p>
     * A platform specific unique identifier for this post.  Note that this is NOT always present as some platforms lack the concept of unique identifiers.  Additionally, this may conflict with another identifier from another platform.
     * </p>
     *
     * <p>
     * Schema type: text , name: identifier
     * </p>
     */
    public Optional<String> getIdentifierAsOptional() {

        if ( this.constructed == false && this.hasIdentifier == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.identifier );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasIdentifier () {
        return this.hasIdentifier > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearIdentifier () {

        this.hasIdentifier = 0;
        this.hasModifiedIdentifier = 0;
        this.hasDefinedIdentifier = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedIdentifier () {
        return this.hasModifiedIdentifier > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedIdentifier () {
        return this.hasDefinedIdentifier;
    }

    public BaseContent setPermalinkRedirect ( String permalinkRedirect ) {

        ++this.hasPermalinkRedirect;
        ++this.hasModifiedPermalinkRedirect;

        this.permalinkRedirect = permalinkRedirect;

        hasDefinedPermalinkRedirect = true;

        return this;

    }

    /**
     * <p>
     * Same as permalink but if the site performs a 301 or 302 redirect this is the URL we were redirected to.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect
     * </p>
     */
    public String getPermalinkRedirect() {

        if ( this.constructed == false && this.hasPermalinkRedirect == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.permalinkRedirect" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.permalinkRedirect;
    }

    /**
     * <p>
     * Same as permalink but if the site performs a 301 or 302 redirect this is the URL we were redirected to.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect
     * </p>
     */
    public Optional<String> getPermalinkRedirectAsOptional() {

        if ( this.constructed == false && this.hasPermalinkRedirect == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.permalinkRedirect );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPermalinkRedirect () {
        return this.hasPermalinkRedirect > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPermalinkRedirect () {

        this.hasPermalinkRedirect = 0;
        this.hasModifiedPermalinkRedirect = 0;
        this.hasDefinedPermalinkRedirect = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPermalinkRedirect () {
        return this.hasModifiedPermalinkRedirect > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPermalinkRedirect () {
        return this.hasDefinedPermalinkRedirect;
    }

    public BaseContent setPermalinkRedirectDomain ( String permalinkRedirectDomain ) {

        ++this.hasPermalinkRedirectDomain;
        ++this.hasModifiedPermalinkRedirectDomain;

        this.permalinkRedirectDomain = permalinkRedirectDomain;

        hasDefinedPermalinkRedirectDomain = true;

        return this;

    }

    /**
     * <p>
     * The domain for the permalink_redirect. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_domain
     * </p>
     */
    public String getPermalinkRedirectDomain() {

        if ( this.constructed == false && this.hasPermalinkRedirectDomain == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.permalinkRedirectDomain" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.permalinkRedirectDomain;
    }

    /**
     * <p>
     * The domain for the permalink_redirect. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_domain
     * </p>
     */
    public Optional<String> getPermalinkRedirectDomainAsOptional() {

        if ( this.constructed == false && this.hasPermalinkRedirectDomain == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.permalinkRedirectDomain );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPermalinkRedirectDomain () {
        return this.hasPermalinkRedirectDomain > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPermalinkRedirectDomain () {

        this.hasPermalinkRedirectDomain = 0;
        this.hasModifiedPermalinkRedirectDomain = 0;
        this.hasDefinedPermalinkRedirectDomain = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPermalinkRedirectDomain () {
        return this.hasModifiedPermalinkRedirectDomain > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPermalinkRedirectDomain () {
        return this.hasDefinedPermalinkRedirectDomain;
    }

    public BaseContent setPermalinkRedirectSite ( String permalinkRedirectSite ) {

        ++this.hasPermalinkRedirectSite;
        ++this.hasModifiedPermalinkRedirectSite;

        this.permalinkRedirectSite = permalinkRedirectSite;

        hasDefinedPermalinkRedirectSite = true;

        return this;

    }

    /**
     * <p>
     * The site for the permalink_redirect. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_site
     * </p>
     */
    public String getPermalinkRedirectSite() {

        if ( this.constructed == false && this.hasPermalinkRedirectSite == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.permalinkRedirectSite" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.permalinkRedirectSite;
    }

    /**
     * <p>
     * The site for the permalink_redirect. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: permalink_redirect_site
     * </p>
     */
    public Optional<String> getPermalinkRedirectSiteAsOptional() {

        if ( this.constructed == false && this.hasPermalinkRedirectSite == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.permalinkRedirectSite );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPermalinkRedirectSite () {
        return this.hasPermalinkRedirectSite > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPermalinkRedirectSite () {

        this.hasPermalinkRedirectSite = 0;
        this.hasModifiedPermalinkRedirectSite = 0;
        this.hasDefinedPermalinkRedirectSite = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPermalinkRedirectSite () {
        return this.hasModifiedPermalinkRedirectSite > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPermalinkRedirectSite () {
        return this.hasDefinedPermalinkRedirectSite;
    }

    public BaseContent setLink ( String link ) {

        ++this.hasLink;
        ++this.hasModifiedLink;

        this.link = link;

        hasDefinedLink = true;

        return this;

    }

    /**
     * <p>
     * The primary link to the content.  The vast majority of the time, this is identical to permalink.  However, some publisher types (MEMETRACKER) have a different link to the content which is external to the site.  If the link is NOT the same as the permalink, then we include it in the links field for search and accuracy purposes.
     * </p>
     *
     * <p>
     * Schema type: text , name: link
     * </p>
     */
    public String getLink() {

        if ( this.constructed == false && this.hasLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.link" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.link;
    }

    /**
     * <p>
     * The primary link to the content.  The vast majority of the time, this is identical to permalink.  However, some publisher types (MEMETRACKER) have a different link to the content which is external to the site.  If the link is NOT the same as the permalink, then we include it in the links field for search and accuracy purposes.
     * </p>
     *
     * <p>
     * Schema type: text , name: link
     * </p>
     */
    public Optional<String> getLinkAsOptional() {

        if ( this.constructed == false && this.hasLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.link );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLink () {
        return this.hasLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLink () {

        this.hasLink = 0;
        this.hasModifiedLink = 0;
        this.hasDefinedLink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLink () {
        return this.hasModifiedLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLink () {
        return this.hasDefinedLink;
    }

    public BaseContent setLinkDomain ( String linkDomain ) {

        ++this.hasLinkDomain;
        ++this.hasModifiedLinkDomain;

        this.linkDomain = linkDomain;

        hasDefinedLinkDomain = true;

        return this;

    }

    /**
     * <p>
     * The domain for the link. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_domain
     * </p>
     */
    public String getLinkDomain() {

        if ( this.constructed == false && this.hasLinkDomain == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.linkDomain" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.linkDomain;
    }

    /**
     * <p>
     * The domain for the link. Identical in semantics to the domain field.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_domain
     * </p>
     */
    public Optional<String> getLinkDomainAsOptional() {

        if ( this.constructed == false && this.hasLinkDomain == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.linkDomain );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLinkDomain () {
        return this.hasLinkDomain > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLinkDomain () {

        this.hasLinkDomain = 0;
        this.hasModifiedLinkDomain = 0;
        this.hasDefinedLinkDomain = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLinkDomain () {
        return this.hasModifiedLinkDomain > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLinkDomain () {
        return this.hasDefinedLinkDomain;
    }

    public BaseContent setLinkSite ( String linkSite ) {

        ++this.hasLinkSite;
        ++this.hasModifiedLinkSite;

        this.linkSite = linkSite;

        hasDefinedLinkSite = true;

        return this;

    }

    /**
     * <p>
     * The site for the link. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_site
     * </p>
     */
    public String getLinkSite() {

        if ( this.constructed == false && this.hasLinkSite == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.linkSite" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.linkSite;
    }

    /**
     * <p>
     * The site for the link. The full hostname.  For example, www.cnn.com, alice.blogspot.com, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: link_site
     * </p>
     */
    public Optional<String> getLinkSiteAsOptional() {

        if ( this.constructed == false && this.hasLinkSite == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.linkSite );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLinkSite () {
        return this.hasLinkSite > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLinkSite () {

        this.hasLinkSite = 0;
        this.hasModifiedLinkSite = 0;
        this.hasDefinedLinkSite = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLinkSite () {
        return this.hasModifiedLinkSite > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLinkSite () {
        return this.hasDefinedLinkSite;
    }

    public BaseContent setShortlink ( String shortlink ) {

        ++this.hasShortlink;
        ++this.hasModifiedShortlink;

        this.shortlink = shortlink;

        hasDefinedShortlink = true;

        return this;

    }

    /**
     * <p>
     * The shortlink URL, if known.  This is the prefered 'short' URL discovered from either the content itself or through metdata.
     * </p>
     *
     * <p>
     * Schema type: text , name: shortlink
     * </p>
     */
    public String getShortlink() {

        if ( this.constructed == false && this.hasShortlink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.shortlink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.shortlink;
    }

    /**
     * <p>
     * The shortlink URL, if known.  This is the prefered 'short' URL discovered from either the content itself or through metdata.
     * </p>
     *
     * <p>
     * Schema type: text , name: shortlink
     * </p>
     */
    public Optional<String> getShortlinkAsOptional() {

        if ( this.constructed == false && this.hasShortlink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.shortlink );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasShortlink () {
        return this.hasShortlink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearShortlink () {

        this.hasShortlink = 0;
        this.hasModifiedShortlink = 0;
        this.hasDefinedShortlink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedShortlink () {
        return this.hasModifiedShortlink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedShortlink () {
        return this.hasDefinedShortlink;
    }

    public BaseContent setCanonical ( String canonical ) {

        ++this.hasCanonical;
        ++this.hasModifiedCanonical;

        this.canonical = canonical;

        hasDefinedCanonical = true;

        return this;

    }

    /**
     * <p>
     * The canonical URL to the content (as specified by the publisher) in rel=canonical (and other specs such as og:url).
     * </p>
     *
     * <p>
     * Schema type: text , name: canonical
     * </p>
     */
    public String getCanonical() {

        if ( this.constructed == false && this.hasCanonical == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.canonical" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.canonical;
    }

    /**
     * <p>
     * The canonical URL to the content (as specified by the publisher) in rel=canonical (and other specs such as og:url).
     * </p>
     *
     * <p>
     * Schema type: text , name: canonical
     * </p>
     */
    public Optional<String> getCanonicalAsOptional() {

        if ( this.constructed == false && this.hasCanonical == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.canonical );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasCanonical () {
        return this.hasCanonical > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearCanonical () {

        this.hasCanonical = 0;
        this.hasModifiedCanonical = 0;
        this.hasDefinedCanonical = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedCanonical () {
        return this.hasModifiedCanonical > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedCanonical () {
        return this.hasDefinedCanonical;
    }

    public BaseContent setDomain ( String domain ) {

        ++this.hasDomain;
        ++this.hasModifiedDomain;

        this.domain = domain;

        hasDefinedDomain = true;

        return this;

    }

    /**
     * <p>
     * The domain name of the permalink.  blogspot.com, example,com, etc. 
     * </p>
     *
     * <p>
     * Schema type: text , name: domain
     * </p>
     */
    public String getDomain() {

        if ( this.constructed == false && this.hasDomain == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.domain" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.domain;
    }

    /**
     * <p>
     * The domain name of the permalink.  blogspot.com, example,com, etc. 
     * </p>
     *
     * <p>
     * Schema type: text , name: domain
     * </p>
     */
    public Optional<String> getDomainAsOptional() {

        if ( this.constructed == false && this.hasDomain == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.domain );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDomain () {
        return this.hasDomain > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDomain () {

        this.hasDomain = 0;
        this.hasModifiedDomain = 0;
        this.hasDefinedDomain = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDomain () {
        return this.hasModifiedDomain > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDomain () {
        return this.hasDefinedDomain;
    }

    public BaseContent setSite ( String site ) {

        ++this.hasSite;
        ++this.hasModifiedSite;

        this.site = site;

        hasDefinedSite = true;

        return this;

    }

    /**
     * <p>
     * The site of the permalink including the full host name.  www.cnn.com would be a site and cnn.com would be a domain.
     * </p>
     *
     * <p>
     * Schema type: text , name: site
     * </p>
     */
    public String getSite() {

        if ( this.constructed == false && this.hasSite == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.site" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.site;
    }

    /**
     * <p>
     * The site of the permalink including the full host name.  www.cnn.com would be a site and cnn.com would be a domain.
     * </p>
     *
     * <p>
     * Schema type: text , name: site
     * </p>
     */
    public Optional<String> getSiteAsOptional() {

        if ( this.constructed == false && this.hasSite == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.site );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSite () {
        return this.hasSite > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSite () {

        this.hasSite = 0;
        this.hasModifiedSite = 0;
        this.hasDefinedSite = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSite () {
        return this.hasModifiedSite > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSite () {
        return this.hasDefinedSite;
    }

    public BaseContent setMain ( String main ) {

        ++this.hasMain;
        ++this.hasModifiedMain;

        this.main = main;

        hasDefinedMain = true;

        return this;

    }

    /**
     * <p>
     * The actual main content of the article.  The authoritative 'main' of the post derived by removing sidebar content. (html).  This content is sanitized, cleaned so that javascript, event handlers, etc are removed.  This is analagous to the HTML5 main element.  IE the main content of the page, with no header, footer, or sidebar content.
     * </p>
     *
     * <p>
     * Schema type: text , name: main
     * </p>
     */
    public String getMain() {

        if ( this.constructed == false && this.hasMain == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.main" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.main;
    }

    /**
     * <p>
     * The actual main content of the article.  The authoritative 'main' of the post derived by removing sidebar content. (html).  This content is sanitized, cleaned so that javascript, event handlers, etc are removed.  This is analagous to the HTML5 main element.  IE the main content of the page, with no header, footer, or sidebar content.
     * </p>
     *
     * <p>
     * Schema type: text , name: main
     * </p>
     */
    public Optional<String> getMainAsOptional() {

        if ( this.constructed == false && this.hasMain == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.main );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMain () {
        return this.hasMain > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMain () {

        this.hasMain = 0;
        this.hasModifiedMain = 0;
        this.hasDefinedMain = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMain () {
        return this.hasModifiedMain > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMain () {
        return this.hasDefinedMain;
    }

    public BaseContent setMainLength ( int mainLength ) {

        ++this.hasMainLength;
        ++this.hasModifiedMainLength;

        this.mainLength = mainLength;

        hasDefinedMainLength = true;

        return this;

    }

    /**
     * <p>
     * The length of the main field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: main_length
     * </p>
     */
    public int getMainLength() {

        if ( this.constructed == false && this.hasMainLength == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mainLength" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mainLength;
    }

    /**
     * <p>
     * The length of the main field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: main_length
     * </p>
     */
    public Optional<Integer> getMainLengthAsOptional() {

        if ( this.constructed == false && this.hasMainLength == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.mainLength );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMainLength () {
        return this.hasMainLength > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMainLength () {

        this.hasMainLength = 0;
        this.hasModifiedMainLength = 0;
        this.hasDefinedMainLength = false;

        mainLength = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMainLength () {
        return this.hasModifiedMainLength > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMainLength () {
        return this.hasDefinedMainLength;
    }

    public BaseContent setMainChecksum ( String mainChecksum ) {

        ++this.hasMainChecksum;
        ++this.hasModifiedMainChecksum;

        this.mainChecksum = mainChecksum;

        hasDefinedMainChecksum = true;

        return this;

    }

    /**
     * <p>
     * The checksum of the main field.
     * </p>
     *
     * <p>
     * Schema type: text , name: main_checksum
     * </p>
     */
    public String getMainChecksum() {

        if ( this.constructed == false && this.hasMainChecksum == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mainChecksum" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mainChecksum;
    }

    /**
     * <p>
     * The checksum of the main field.
     * </p>
     *
     * <p>
     * Schema type: text , name: main_checksum
     * </p>
     */
    public Optional<String> getMainChecksumAsOptional() {

        if ( this.constructed == false && this.hasMainChecksum == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.mainChecksum );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMainChecksum () {
        return this.hasMainChecksum > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMainChecksum () {

        this.hasMainChecksum = 0;
        this.hasModifiedMainChecksum = 0;
        this.hasDefinedMainChecksum = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMainChecksum () {
        return this.hasModifiedMainChecksum > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMainChecksum () {
        return this.hasDefinedMainChecksum;
    }

    public BaseContent setMainAuthoritative ( boolean mainAuthoritative ) {

        ++this.hasMainAuthoritative;
        ++this.hasModifiedMainAuthoritative;

        this.mainAuthoritative = mainAuthoritative;

        hasDefinedMainAuthoritative = true;

        return this;

    }

    /**
     * <p>
     * True when the main content is 100% accurate and the extract is not needed.
     * </p>
     *
     * <p>
     * Schema type: boolean , name: main_authoritative
     * </p>
     */
    public boolean getMainAuthoritative() {

        if ( this.constructed == false && this.hasMainAuthoritative == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mainAuthoritative" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mainAuthoritative;
    }

    /**
     * <p>
     * True when the main content is 100% accurate and the extract is not needed.
     * </p>
     *
     * <p>
     * Schema type: boolean , name: main_authoritative
     * </p>
     */
    public Optional<Boolean> getMainAuthoritativeAsOptional() {

        if ( this.constructed == false && this.hasMainAuthoritative == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.mainAuthoritative );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMainAuthoritative () {
        return this.hasMainAuthoritative > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMainAuthoritative () {

        this.hasMainAuthoritative = 0;
        this.hasModifiedMainAuthoritative = 0;
        this.hasDefinedMainAuthoritative = false;

        mainAuthoritative = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMainAuthoritative () {
        return this.hasModifiedMainAuthoritative > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMainAuthoritative () {
        return this.hasDefinedMainAuthoritative;
    }

    public BaseContent setMainFormat ( MainFormat mainFormat ) {

        ++this.hasMainFormat;
        ++this.hasModifiedMainFormat;

        this.mainFormat = mainFormat;

        hasDefinedMainFormat = true;

        return this;

    }

    /**
     * <p>
     * The format of the main element (either HTML or text)
     * </p>
     *
     * <p>
     * Schema type: enum , name: main_format
     * </p>
     */
    public MainFormat getMainFormat() {

        if ( this.constructed == false && this.hasMainFormat == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mainFormat" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mainFormat;
    }

    /**
     * <p>
     * The format of the main element (either HTML or text)
     * </p>
     *
     * <p>
     * Schema type: enum , name: main_format
     * </p>
     */
    public Optional<MainFormat> getMainFormatAsOptional() {

        if ( this.constructed == false && this.hasMainFormat == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.mainFormat );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMainFormat () {
        return this.hasMainFormat > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMainFormat () {

        this.hasMainFormat = 0;
        this.hasModifiedMainFormat = 0;
        this.hasDefinedMainFormat = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMainFormat () {
        return this.hasModifiedMainFormat > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMainFormat () {
        return this.hasDefinedMainFormat;
    }

    public BaseContent setExtract ( String extract ) {

        ++this.hasExtract;
        ++this.hasModifiedExtract;

        this.extract = extract;

        hasDefinedExtract = true;

        return this;

    }

    /**
     * <p>
     * The extract of the content with applied chrome/boilerpipe removal algorithms applied.  
     * </p>
     *
     * <p>
     * Schema type: text , name: extract
     * </p>
     */
    public String getExtract() {

        if ( this.constructed == false && this.hasExtract == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.extract" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.extract;
    }

    /**
     * <p>
     * The extract of the content with applied chrome/boilerpipe removal algorithms applied.  
     * </p>
     *
     * <p>
     * Schema type: text , name: extract
     * </p>
     */
    public Optional<String> getExtractAsOptional() {

        if ( this.constructed == false && this.hasExtract == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.extract );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasExtract () {
        return this.hasExtract > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearExtract () {

        this.hasExtract = 0;
        this.hasModifiedExtract = 0;
        this.hasDefinedExtract = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedExtract () {
        return this.hasModifiedExtract > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedExtract () {
        return this.hasDefinedExtract;
    }

    public BaseContent setExtractLength ( int extractLength ) {

        ++this.hasExtractLength;
        ++this.hasModifiedExtractLength;

        this.extractLength = extractLength;

        hasDefinedExtractLength = true;

        return this;

    }

    /**
     * <p>
     * The length of the extract field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: extract_length
     * </p>
     */
    public int getExtractLength() {

        if ( this.constructed == false && this.hasExtractLength == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.extractLength" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.extractLength;
    }

    /**
     * <p>
     * The length of the extract field, in bytes.
     * </p>
     *
     * <p>
     * Schema type: int , name: extract_length
     * </p>
     */
    public Optional<Integer> getExtractLengthAsOptional() {

        if ( this.constructed == false && this.hasExtractLength == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.extractLength );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasExtractLength () {
        return this.hasExtractLength > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearExtractLength () {

        this.hasExtractLength = 0;
        this.hasModifiedExtractLength = 0;
        this.hasDefinedExtractLength = false;

        extractLength = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedExtractLength () {
        return this.hasModifiedExtractLength > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedExtractLength () {
        return this.hasDefinedExtractLength;
    }

    public BaseContent setExtractChecksum ( String extractChecksum ) {

        ++this.hasExtractChecksum;
        ++this.hasModifiedExtractChecksum;

        this.extractChecksum = extractChecksum;

        hasDefinedExtractChecksum = true;

        return this;

    }

    /**
     * <p>
     * The checksum of the extract field.
     * </p>
     *
     * <p>
     * Schema type: text , name: extract_checksum
     * </p>
     */
    public String getExtractChecksum() {

        if ( this.constructed == false && this.hasExtractChecksum == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.extractChecksum" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.extractChecksum;
    }

    /**
     * <p>
     * The checksum of the extract field.
     * </p>
     *
     * <p>
     * Schema type: text , name: extract_checksum
     * </p>
     */
    public Optional<String> getExtractChecksumAsOptional() {

        if ( this.constructed == false && this.hasExtractChecksum == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.extractChecksum );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasExtractChecksum () {
        return this.hasExtractChecksum > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearExtractChecksum () {

        this.hasExtractChecksum = 0;
        this.hasModifiedExtractChecksum = 0;
        this.hasDefinedExtractChecksum = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedExtractChecksum () {
        return this.hasModifiedExtractChecksum > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedExtractChecksum () {
        return this.hasDefinedExtractChecksum;
    }

    public BaseContent setSummaryText ( String summaryText ) {

        ++this.hasSummaryText;
        ++this.hasModifiedSummaryText;

        this.summaryText = summaryText;

        hasDefinedSummaryText = true;

        return this;

    }

    /**
     * <p>
     * A summary of the document computed by our document summarizer. This summary is in plain text. If mulitiple paragraphs are present they are separated by a newline. If you would like to separate the paragraphs in your UI and you're rendering HTML you can split the summary text by newline and wrap each paragraph in a P element.
     * </p>
     *
     * <p>
     * Schema type: text , name: summary_text
     * </p>
     */
    public String getSummaryText() {

        if ( this.constructed == false && this.hasSummaryText == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.summaryText" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.summaryText;
    }

    /**
     * <p>
     * A summary of the document computed by our document summarizer. This summary is in plain text. If mulitiple paragraphs are present they are separated by a newline. If you would like to separate the paragraphs in your UI and you're rendering HTML you can split the summary text by newline and wrap each paragraph in a P element.
     * </p>
     *
     * <p>
     * Schema type: text , name: summary_text
     * </p>
     */
    public Optional<String> getSummaryTextAsOptional() {

        if ( this.constructed == false && this.hasSummaryText == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.summaryText );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSummaryText () {
        return this.hasSummaryText > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSummaryText () {

        this.hasSummaryText = 0;
        this.hasModifiedSummaryText = 0;
        this.hasDefinedSummaryText = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSummaryText () {
        return this.hasModifiedSummaryText > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSummaryText () {
        return this.hasDefinedSummaryText;
    }

    public BaseContent setTitle ( String title ) {

        ++this.hasTitle;
        ++this.hasModifiedTitle;

        this.title = title;

        hasDefinedTitle = true;

        return this;

    }

    /**
     * <p>
     * The title of the post.
     * </p>
     *
     * <p>
     * Schema type: text , name: title
     * </p>
     */
    public String getTitle() {

        if ( this.constructed == false && this.hasTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.title" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.title;
    }

    /**
     * <p>
     * The title of the post.
     * </p>
     *
     * <p>
     * Schema type: text , name: title
     * </p>
     */
    public Optional<String> getTitleAsOptional() {

        if ( this.constructed == false && this.hasTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.title );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasTitle () {
        return this.hasTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearTitle () {

        this.hasTitle = 0;
        this.hasModifiedTitle = 0;
        this.hasDefinedTitle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedTitle () {
        return this.hasModifiedTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedTitle () {
        return this.hasDefinedTitle;
    }

    public BaseContent setPublisher ( String publisher ) {

        ++this.hasPublisher;
        ++this.hasModifiedPublisher;

        this.publisher = publisher;

        hasDefinedPublisher = true;

        return this;

    }

    /**
     * <p>
     * The publisher name.  (CNN, MSNBC, Techcrunch, etc)
     * </p>
     *
     * <p>
     * Schema type: text , name: publisher
     * </p>
     */
    public String getPublisher() {

        if ( this.constructed == false && this.hasPublisher == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.publisher" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.publisher;
    }

    /**
     * <p>
     * The publisher name.  (CNN, MSNBC, Techcrunch, etc)
     * </p>
     *
     * <p>
     * Schema type: text , name: publisher
     * </p>
     */
    public Optional<String> getPublisherAsOptional() {

        if ( this.constructed == false && this.hasPublisher == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.publisher );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPublisher () {
        return this.hasPublisher > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPublisher () {

        this.hasPublisher = 0;
        this.hasModifiedPublisher = 0;
        this.hasDefinedPublisher = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPublisher () {
        return this.hasModifiedPublisher > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPublisher () {
        return this.hasDefinedPublisher;
    }

    public BaseContent setSection ( String section ) {

        ++this.hasSection;
        ++this.hasModifiedSection;

        this.section = section;

        hasDefinedSection = true;

        return this;

    }

    /**
     * <p>
     * Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: section
     * </p>
     */
    public String getSection() {

        if ( this.constructed == false && this.hasSection == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.section" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.section;
    }

    /**
     * <p>
     * Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
     * </p>
     *
     * <p>
     * Schema type: text , name: section
     * </p>
     */
    public Optional<String> getSectionAsOptional() {

        if ( this.constructed == false && this.hasSection == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.section );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSection () {
        return this.hasSection > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSection () {

        this.hasSection = 0;
        this.hasModifiedSection = 0;
        this.hasDefinedSection = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSection () {
        return this.hasModifiedSection > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSection () {
        return this.hasDefinedSection;
    }

    public BaseContent setDescription ( String description ) {

        ++this.hasDescription;
        ++this.hasModifiedDescription;

        this.description = description;

        hasDefinedDescription = true;

        return this;

    }

    /**
     * <p>
     * A short description of the item (HTML)
     * </p>
     *
     * <p>
     * Schema type: text , name: description
     * </p>
     */
    public String getDescription() {

        if ( this.constructed == false && this.hasDescription == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.description" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.description;
    }

    /**
     * <p>
     * A short description of the item (HTML)
     * </p>
     *
     * <p>
     * Schema type: text , name: description
     * </p>
     */
    public Optional<String> getDescriptionAsOptional() {

        if ( this.constructed == false && this.hasDescription == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.description );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDescription () {
        return this.hasDescription > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDescription () {

        this.hasDescription = 0;
        this.hasModifiedDescription = 0;
        this.hasDefinedDescription = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDescription () {
        return this.hasModifiedDescription > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDescription () {
        return this.hasDefinedDescription;
    }

    public BaseContent setTags ( Set<String> tags ) {

        NoNullSet.validate( tags );

        ++this.hasTags;
        ++this.hasModifiedTags;

        this.tags = tags;

        hasDefinedTags = true;

        return this;

    }

    /**
     * <p>
     * Tags for the item.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: tags
     * </p>
     */
    public Set<String> getTags() {

        if ( this.constructed == false && this.hasTags == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.tags" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.tags;
    }

    /**
     * <p>
     * Tags for the item.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: tags
     * </p>
     */
    public Optional<Set<String>> getTagsAsOptional() {

        if ( this.constructed == false && this.hasTags == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.tags );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasTags () {
        return this.hasTags > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearTags () {

        this.hasTags = 0;
        this.hasModifiedTags = 0;
        this.hasDefinedTags = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedTags () {
        return this.hasModifiedTags > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedTags () {
        return this.hasDefinedTags;
    }

    public BaseContent setMentions ( Set<String> mentions ) {

        NoNullSet.validate( mentions );

        ++this.hasMentions;
        ++this.hasModifiedMentions;

        this.mentions = mentions;

        hasDefinedMentions = true;

        return this;

    }

    /**
     * <p>
     * Username mentions for users within the content of this post.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: mentions
     * </p>
     */
    public Set<String> getMentions() {

        if ( this.constructed == false && this.hasMentions == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.mentions" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.mentions;
    }

    /**
     * <p>
     * Username mentions for users within the content of this post.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: mentions
     * </p>
     */
    public Optional<Set<String>> getMentionsAsOptional() {

        if ( this.constructed == false && this.hasMentions == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.mentions );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMentions () {
        return this.hasMentions > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMentions () {

        this.hasMentions = 0;
        this.hasModifiedMentions = 0;
        this.hasDefinedMentions = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMentions () {
        return this.hasModifiedMentions > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMentions () {
        return this.hasDefinedMentions;
    }

    public BaseContent setLinks ( Set<String> links ) {

        NoNullSet.validate( links );

        ++this.hasLinks;
        ++this.hasModifiedLinks;

        this.links = links;

        hasDefinedLinks = true;

        return this;

    }

    /**
     * <p>
     * All outbound links in the main element.  Since main is the authoritative content, without chrome or sidebar content, this can be used for ranking purposes.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: links
     * </p>
     */
    public Set<String> getLinks() {

        if ( this.constructed == false && this.hasLinks == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.links" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.links;
    }

    /**
     * <p>
     * All outbound links in the main element.  Since main is the authoritative content, without chrome or sidebar content, this can be used for ranking purposes.
     * </p>
     *
     * <p>
     * Schema type: set&lt;text&gt; , name: links
     * </p>
     */
    public Optional<Set<String>> getLinksAsOptional() {

        if ( this.constructed == false && this.hasLinks == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.links );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLinks () {
        return this.hasLinks > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLinks () {

        this.hasLinks = 0;
        this.hasModifiedLinks = 0;
        this.hasDefinedLinks = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLinks () {
        return this.hasModifiedLinks > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLinks () {
        return this.hasDefinedLinks;
    }

    public BaseContent setPublished ( Date published ) {

        ++this.hasPublished;
        ++this.hasModifiedPublished;

        this.published = published;

        hasDefinedPublished = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setPublishedAsZonedDateTime ( ZonedDateTime published ) {

        if (published != null) {
            setPublished(Date.from(published.toInstant()));
        } else {
            Date _published = null;
            setPublished(_published);
        }

        return this;
    }

    /**
     * <p>
     * Date of first broadcast/publication.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published
     * </p>
     */
    public Date getPublished() {

        if ( this.constructed == false && this.hasPublished == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.published" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.published;
    }

    /**
     * <p>
     * Date of first broadcast/publication.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published
     * </p>
     */
    public Optional<Date> getPublishedAsOptional() {

        if ( this.constructed == false && this.hasPublished == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.published );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPublished () {
        return this.hasPublished > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPublished () {

        this.hasPublished = 0;
        this.hasModifiedPublished = 0;
        this.hasDefinedPublished = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPublished () {
        return this.hasModifiedPublished > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPublished () {
        return this.hasDefinedPublished;
    }

    public BaseContent setModified ( Date modified ) {

        ++this.hasModified;
        ++this.hasModifiedModified;

        this.modified = modified;

        hasDefinedModified = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setModifiedAsZonedDateTime ( ZonedDateTime modified ) {

        if (modified != null) {
            setModified(Date.from(modified.toInstant()));
        } else {
            Date _modified = null;
            setModified(_modified);
        }

        return this;
    }

    /**
     * <p>
     * The date on which the content was most recently modified.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified
     * </p>
     */
    public Date getModified() {

        if ( this.constructed == false && this.hasModified == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.modified" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.modified;
    }

    /**
     * <p>
     * The date on which the content was most recently modified.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified
     * </p>
     */
    public Optional<Date> getModifiedAsOptional() {

        if ( this.constructed == false && this.hasModified == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.modified );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasModified () {
        return this.hasModified > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearModified () {

        this.hasModified = 0;
        this.hasModifiedModified = 0;
        this.hasDefinedModified = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedModified () {
        return this.hasModifiedModified > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedModified () {
        return this.hasDefinedModified;
    }

    public BaseContent setPublishedPartial ( Date publishedPartial ) {

        ++this.hasPublishedPartial;
        ++this.hasModifiedPublishedPartial;

        this.publishedPartial = publishedPartial;

        hasDefinedPublishedPartial = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setPublishedPartialAsZonedDateTime ( ZonedDateTime publishedPartial ) {

        if (publishedPartial != null) {
            setPublishedPartial(Date.from(publishedPartial.toInstant()));
        } else {
            Date _publishedPartial = null;
            setPublishedPartial(_publishedPartial);
        }

        return this;
    }

    /**
     * <p>
     * This is identical to `published` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published_partial
     * </p>
     */
    public Date getPublishedPartial() {

        if ( this.constructed == false && this.hasPublishedPartial == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.publishedPartial" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.publishedPartial;
    }

    /**
     * <p>
     * This is identical to `published` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: published_partial
     * </p>
     */
    public Optional<Date> getPublishedPartialAsOptional() {

        if ( this.constructed == false && this.hasPublishedPartial == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.publishedPartial );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPublishedPartial () {
        return this.hasPublishedPartial > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPublishedPartial () {

        this.hasPublishedPartial = 0;
        this.hasModifiedPublishedPartial = 0;
        this.hasDefinedPublishedPartial = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPublishedPartial () {
        return this.hasModifiedPublishedPartial > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPublishedPartial () {
        return this.hasDefinedPublishedPartial;
    }

    public BaseContent setModifiedPartial ( Date modifiedPartial ) {

        ++this.hasModifiedPartial;
        ++this.hasModifiedModifiedPartial;

        this.modifiedPartial = modifiedPartial;

        hasDefinedModifiedPartial = true;

        return this;

    }

    // support for ZonedDateTime
    public BaseContent setModifiedPartialAsZonedDateTime ( ZonedDateTime modifiedPartial ) {

        if (modifiedPartial != null) {
            setModifiedPartial(Date.from(modifiedPartial.toInstant()));
        } else {
            Date _modifiedPartial = null;
            setModifiedPartial(_modifiedPartial);
        }

        return this;
    }

    /**
     * <p>
     * This is identical to `modified` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified_partial
     * </p>
     */
    public Date getModifiedPartial() {

        if ( this.constructed == false && this.hasModifiedPartial == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.modifiedPartial" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.modifiedPartial;
    }

    /**
     * <p>
     * This is identical to `modified` except it's a partial value.  If an exact date is found we both fields are populated but if we only have a partial date then we only specify this field.  The value is ISO8601.  For example, 2014-01-01.
     * </p>
     *
     * <p>
     * Schema type: timestamp , name: modified_partial
     * </p>
     */
    public Optional<Date> getModifiedPartialAsOptional() {

        if ( this.constructed == false && this.hasModifiedPartial == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.modifiedPartial );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasModifiedPartial () {
        return this.hasModifiedPartial > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearModifiedPartial () {

        this.hasModifiedPartial = 0;
        this.hasModifiedModifiedPartial = 0;
        this.hasDefinedModifiedPartial = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedModifiedPartial () {
        return this.hasModifiedModifiedPartial > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedModifiedPartial () {
        return this.hasDefinedModifiedPartial;
    }

    public BaseContent setAuthorName ( String authorName ) {

        ++this.hasAuthorName;
        ++this.hasModifiedAuthorName;

        this.authorName = authorName;

        hasDefinedAuthorName = true;

        return this;

    }

    /**
     * <p>
     * The name of the author.  This is the human readable name like 'Barack Obama' or 'Michael Jordan'
     * </p>
     *
     * <p>
     * Schema type: text , name: author_name
     * </p>
     */
    public String getAuthorName() {

        if ( this.constructed == false && this.hasAuthorName == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorName" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorName;
    }

    /**
     * <p>
     * The name of the author.  This is the human readable name like 'Barack Obama' or 'Michael Jordan'
     * </p>
     *
     * <p>
     * Schema type: text , name: author_name
     * </p>
     */
    public Optional<String> getAuthorNameAsOptional() {

        if ( this.constructed == false && this.hasAuthorName == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorName );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorName () {
        return this.hasAuthorName > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorName () {

        this.hasAuthorName = 0;
        this.hasModifiedAuthorName = 0;
        this.hasDefinedAuthorName = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorName () {
        return this.hasModifiedAuthorName > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorName () {
        return this.hasDefinedAuthorName;
    }

    public BaseContent setAuthorLink ( String authorLink ) {

        ++this.hasAuthorLink;
        ++this.hasModifiedAuthorLink;

        this.authorLink = authorLink;

        hasDefinedAuthorLink = true;

        return this;

    }

    /**
     * <p>
     * The link for the author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_link
     * </p>
     */
    public String getAuthorLink() {

        if ( this.constructed == false && this.hasAuthorLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorLink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorLink;
    }

    /**
     * <p>
     * The link for the author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_link
     * </p>
     */
    public Optional<String> getAuthorLinkAsOptional() {

        if ( this.constructed == false && this.hasAuthorLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorLink );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorLink () {
        return this.hasAuthorLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorLink () {

        this.hasAuthorLink = 0;
        this.hasModifiedAuthorLink = 0;
        this.hasDefinedAuthorLink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorLink () {
        return this.hasModifiedAuthorLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorLink () {
        return this.hasDefinedAuthorLink;
    }

    public BaseContent setAuthorHandle ( String authorHandle ) {

        ++this.hasAuthorHandle;
        ++this.hasModifiedAuthorHandle;

        this.authorHandle = authorHandle;

        hasDefinedAuthorHandle = true;

        return this;

    }

    /**
     * <p>
     * The handle of the author.  This is a unique token/handle for the author across the whole site.  For example 'barackobama' and would never conflict with another account.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_handle
     * </p>
     */
    public String getAuthorHandle() {

        if ( this.constructed == false && this.hasAuthorHandle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorHandle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorHandle;
    }

    /**
     * <p>
     * The handle of the author.  This is a unique token/handle for the author across the whole site.  For example 'barackobama' and would never conflict with another account.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_handle
     * </p>
     */
    public Optional<String> getAuthorHandleAsOptional() {

        if ( this.constructed == false && this.hasAuthorHandle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorHandle );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorHandle () {
        return this.hasAuthorHandle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorHandle () {

        this.hasAuthorHandle = 0;
        this.hasModifiedAuthorHandle = 0;
        this.hasDefinedAuthorHandle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorHandle () {
        return this.hasModifiedAuthorHandle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorHandle () {
        return this.hasDefinedAuthorHandle;
    }

    public BaseContent setAuthorFollowers ( int authorFollowers ) {

        ++this.hasAuthorFollowers;
        ++this.hasModifiedAuthorFollowers;

        this.authorFollowers = authorFollowers;

        hasDefinedAuthorFollowers = true;

        return this;

    }

    /**
     * <p>
     * The number of followers for this author.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_followers
     * </p>
     */
    public int getAuthorFollowers() {

        if ( this.constructed == false && this.hasAuthorFollowers == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorFollowers" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorFollowers;
    }

    /**
     * <p>
     * The number of followers for this author.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_followers
     * </p>
     */
    public Optional<Integer> getAuthorFollowersAsOptional() {

        if ( this.constructed == false && this.hasAuthorFollowers == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorFollowers );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorFollowers () {
        return this.hasAuthorFollowers > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorFollowers () {

        this.hasAuthorFollowers = 0;
        this.hasModifiedAuthorFollowers = 0;
        this.hasDefinedAuthorFollowers = false;

        authorFollowers = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorFollowers () {
        return this.hasModifiedAuthorFollowers > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorFollowers () {
        return this.hasDefinedAuthorFollowers;
    }

    public BaseContent setAuthorLocation ( String authorLocation ) {

        ++this.hasAuthorLocation;
        ++this.hasModifiedAuthorLocation;

        this.authorLocation = authorLocation;

        hasDefinedAuthorLocation = true;

        return this;

    }

    /**
     * <p>
     * The location for this author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_location
     * </p>
     */
    public String getAuthorLocation() {

        if ( this.constructed == false && this.hasAuthorLocation == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorLocation" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorLocation;
    }

    /**
     * <p>
     * The location for this author.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_location
     * </p>
     */
    public Optional<String> getAuthorLocationAsOptional() {

        if ( this.constructed == false && this.hasAuthorLocation == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorLocation );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorLocation () {
        return this.hasAuthorLocation > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorLocation () {

        this.hasAuthorLocation = 0;
        this.hasModifiedAuthorLocation = 0;
        this.hasDefinedAuthorLocation = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorLocation () {
        return this.hasModifiedAuthorLocation > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorLocation () {
        return this.hasDefinedAuthorLocation;
    }

    public BaseContent setAuthorAvatarImg ( String authorAvatarImg ) {

        ++this.hasAuthorAvatarImg;
        ++this.hasModifiedAuthorAvatarImg;

        this.authorAvatarImg = authorAvatarImg;

        hasDefinedAuthorAvatarImg = true;

        return this;

    }

    /**
     * <p>
     * The URL to the img which is an avatar for the user who posted this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_avatar_img
     * </p>
     */
    public String getAuthorAvatarImg() {

        if ( this.constructed == false && this.hasAuthorAvatarImg == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorAvatarImg" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorAvatarImg;
    }

    /**
     * <p>
     * The URL to the img which is an avatar for the user who posted this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_avatar_img
     * </p>
     */
    public Optional<String> getAuthorAvatarImgAsOptional() {

        if ( this.constructed == false && this.hasAuthorAvatarImg == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorAvatarImg );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorAvatarImg () {
        return this.hasAuthorAvatarImg > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorAvatarImg () {

        this.hasAuthorAvatarImg = 0;
        this.hasModifiedAuthorAvatarImg = 0;
        this.hasDefinedAuthorAvatarImg = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorAvatarImg () {
        return this.hasModifiedAuthorAvatarImg > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorAvatarImg () {
        return this.hasDefinedAuthorAvatarImg;
    }

    public BaseContent setAuthorAvatarWidth ( int authorAvatarWidth ) {

        ++this.hasAuthorAvatarWidth;
        ++this.hasModifiedAuthorAvatarWidth;

        this.authorAvatarWidth = authorAvatarWidth;

        hasDefinedAuthorAvatarWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_width
     * </p>
     */
    public int getAuthorAvatarWidth() {

        if ( this.constructed == false && this.hasAuthorAvatarWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorAvatarWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorAvatarWidth;
    }

    /**
     * <p>
     * The width of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_width
     * </p>
     */
    public Optional<Integer> getAuthorAvatarWidthAsOptional() {

        if ( this.constructed == false && this.hasAuthorAvatarWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorAvatarWidth );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorAvatarWidth () {
        return this.hasAuthorAvatarWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorAvatarWidth () {

        this.hasAuthorAvatarWidth = 0;
        this.hasModifiedAuthorAvatarWidth = 0;
        this.hasDefinedAuthorAvatarWidth = false;

        authorAvatarWidth = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorAvatarWidth () {
        return this.hasModifiedAuthorAvatarWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorAvatarWidth () {
        return this.hasDefinedAuthorAvatarWidth;
    }

    public BaseContent setAuthorAvatarHeight ( int authorAvatarHeight ) {

        ++this.hasAuthorAvatarHeight;
        ++this.hasModifiedAuthorAvatarHeight;

        this.authorAvatarHeight = authorAvatarHeight;

        hasDefinedAuthorAvatarHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_height
     * </p>
     */
    public int getAuthorAvatarHeight() {

        if ( this.constructed == false && this.hasAuthorAvatarHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorAvatarHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorAvatarHeight;
    }

    /**
     * <p>
     * The height of the avatar img.
     * </p>
     *
     * <p>
     * Schema type: int , name: author_avatar_height
     * </p>
     */
    public Optional<Integer> getAuthorAvatarHeightAsOptional() {

        if ( this.constructed == false && this.hasAuthorAvatarHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorAvatarHeight );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorAvatarHeight () {
        return this.hasAuthorAvatarHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorAvatarHeight () {

        this.hasAuthorAvatarHeight = 0;
        this.hasModifiedAuthorAvatarHeight = 0;
        this.hasDefinedAuthorAvatarHeight = false;

        authorAvatarHeight = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorAvatarHeight () {
        return this.hasModifiedAuthorAvatarHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorAvatarHeight () {
        return this.hasDefinedAuthorAvatarHeight;
    }

    public BaseContent setAuthorTwitterHandle ( String authorTwitterHandle ) {

        ++this.hasAuthorTwitterHandle;
        ++this.hasModifiedAuthorTwitterHandle;

        this.authorTwitterHandle = authorTwitterHandle;

        hasDefinedAuthorTwitterHandle = true;

        return this;

    }

    /**
     * <p>
     * Deprecated.  Use author_handle instead
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_handle
     * </p>
     */
    public String getAuthorTwitterHandle() {

        if ( this.constructed == false && this.hasAuthorTwitterHandle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorTwitterHandle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorTwitterHandle;
    }

    /**
     * <p>
     * Deprecated.  Use author_handle instead
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_handle
     * </p>
     */
    public Optional<String> getAuthorTwitterHandleAsOptional() {

        if ( this.constructed == false && this.hasAuthorTwitterHandle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorTwitterHandle );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorTwitterHandle () {
        return this.hasAuthorTwitterHandle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorTwitterHandle () {

        this.hasAuthorTwitterHandle = 0;
        this.hasModifiedAuthorTwitterHandle = 0;
        this.hasDefinedAuthorTwitterHandle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorTwitterHandle () {
        return this.hasModifiedAuthorTwitterHandle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorTwitterHandle () {
        return this.hasDefinedAuthorTwitterHandle;
    }

    public BaseContent setAuthorTwitterUserid ( String authorTwitterUserid ) {

        ++this.hasAuthorTwitterUserid;
        ++this.hasModifiedAuthorTwitterUserid;

        this.authorTwitterUserid = authorTwitterUserid;

        hasDefinedAuthorTwitterUserid = true;

        return this;

    }

    /**
     * <p>
     * Deprecated.  Use author_user_id instead.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_userid
     * </p>
     */
    public String getAuthorTwitterUserid() {

        if ( this.constructed == false && this.hasAuthorTwitterUserid == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorTwitterUserid" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorTwitterUserid;
    }

    /**
     * <p>
     * Deprecated.  Use author_user_id instead.
     * </p>
     *
     * <p>
     * Schema type: text , name: author_twitter_userid
     * </p>
     */
    public Optional<String> getAuthorTwitterUseridAsOptional() {

        if ( this.constructed == false && this.hasAuthorTwitterUserid == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorTwitterUserid );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorTwitterUserid () {
        return this.hasAuthorTwitterUserid > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorTwitterUserid () {

        this.hasAuthorTwitterUserid = 0;
        this.hasModifiedAuthorTwitterUserid = 0;
        this.hasDefinedAuthorTwitterUserid = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorTwitterUserid () {
        return this.hasModifiedAuthorTwitterUserid > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorTwitterUserid () {
        return this.hasDefinedAuthorTwitterUserid;
    }

    public BaseContent setAuthorUserId ( String authorUserId ) {

        ++this.hasAuthorUserId;
        ++this.hasModifiedAuthorUserId;

        this.authorUserId = authorUserId;

        hasDefinedAuthorUserId = true;

        return this;

    }

    /**
     * <p>
     * User ID in the target platform (when available)
     * </p>
     *
     * <p>
     * Schema type: text , name: author_user_id
     * </p>
     */
    public String getAuthorUserId() {

        if ( this.constructed == false && this.hasAuthorUserId == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorUserId" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorUserId;
    }

    /**
     * <p>
     * User ID in the target platform (when available)
     * </p>
     *
     * <p>
     * Schema type: text , name: author_user_id
     * </p>
     */
    public Optional<String> getAuthorUserIdAsOptional() {

        if ( this.constructed == false && this.hasAuthorUserId == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorUserId );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorUserId () {
        return this.hasAuthorUserId > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorUserId () {

        this.hasAuthorUserId = 0;
        this.hasModifiedAuthorUserId = 0;
        this.hasDefinedAuthorUserId = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorUserId () {
        return this.hasModifiedAuthorUserId > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorUserId () {
        return this.hasDefinedAuthorUserId;
    }

    public BaseContent setAuthorGender ( AuthorGender authorGender ) {

        ++this.hasAuthorGender;
        ++this.hasModifiedAuthorGender;

        this.authorGender = authorGender;

        hasDefinedAuthorGender = true;

        return this;

    }

    /**
     * <p>
     * When present, the gender of the author.
     * </p>
     *
     * <p>
     * Schema type: enum , name: author_gender
     * </p>
     */
    public AuthorGender getAuthorGender() {

        if ( this.constructed == false && this.hasAuthorGender == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.authorGender" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.authorGender;
    }

    /**
     * <p>
     * When present, the gender of the author.
     * </p>
     *
     * <p>
     * Schema type: enum , name: author_gender
     * </p>
     */
    public Optional<AuthorGender> getAuthorGenderAsOptional() {

        if ( this.constructed == false && this.hasAuthorGender == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.authorGender );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasAuthorGender () {
        return this.hasAuthorGender > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearAuthorGender () {

        this.hasAuthorGender = 0;
        this.hasModifiedAuthorGender = 0;
        this.hasDefinedAuthorGender = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedAuthorGender () {
        return this.hasModifiedAuthorGender > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedAuthorGender () {
        return this.hasDefinedAuthorGender;
    }

    public BaseContent setGeoLocation ( String geoLocation ) {

        ++this.hasGeoLocation;
        ++this.hasModifiedGeoLocation;

        this.geoLocation = geoLocation;

        hasDefinedGeoLocation = true;

        return this;

    }

    /**
     * <p>
     * The human readable location of the source.  Example: 'Washington, DC'
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location
     * </p>
     */
    public String getGeoLocation() {

        if ( this.constructed == false && this.hasGeoLocation == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoLocation" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoLocation;
    }

    /**
     * <p>
     * The human readable location of the source.  Example: 'Washington, DC'
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location
     * </p>
     */
    public Optional<String> getGeoLocationAsOptional() {

        if ( this.constructed == false && this.hasGeoLocation == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoLocation );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoLocation () {
        return this.hasGeoLocation > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoLocation () {

        this.hasGeoLocation = 0;
        this.hasModifiedGeoLocation = 0;
        this.hasDefinedGeoLocation = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoLocation () {
        return this.hasModifiedGeoLocation > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoLocation () {
        return this.hasDefinedGeoLocation;
    }

    public BaseContent setGeoLocationId ( String geoLocationId ) {

        ++this.hasGeoLocationId;
        ++this.hasModifiedGeoLocationId;

        this.geoLocationId = geoLocationId;

        hasDefinedGeoLocationId = true;

        return this;

    }

    /**
     * <p>
     * The location identifier (if available) for this location.  This is platform specific.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location_id
     * </p>
     */
    public String getGeoLocationId() {

        if ( this.constructed == false && this.hasGeoLocationId == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoLocationId" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoLocationId;
    }

    /**
     * <p>
     * The location identifier (if available) for this location.  This is platform specific.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_location_id
     * </p>
     */
    public Optional<String> getGeoLocationIdAsOptional() {

        if ( this.constructed == false && this.hasGeoLocationId == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoLocationId );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoLocationId () {
        return this.hasGeoLocationId > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoLocationId () {

        this.hasGeoLocationId = 0;
        this.hasModifiedGeoLocationId = 0;
        this.hasDefinedGeoLocationId = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoLocationId () {
        return this.hasModifiedGeoLocationId > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoLocationId () {
        return this.hasDefinedGeoLocationId;
    }

    public BaseContent setGeoFeaturename ( String geoFeaturename ) {

        ++this.hasGeoFeaturename;
        ++this.hasModifiedGeoFeaturename;

        this.geoFeaturename = geoFeaturename;

        hasDefinedGeoFeaturename = true;

        return this;

    }

    /**
     * <p>
     * Name of the feature we're representing.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_featurename
     * </p>
     */
    public String getGeoFeaturename() {

        if ( this.constructed == false && this.hasGeoFeaturename == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoFeaturename" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoFeaturename;
    }

    /**
     * <p>
     * Name of the feature we're representing.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_featurename
     * </p>
     */
    public Optional<String> getGeoFeaturenameAsOptional() {

        if ( this.constructed == false && this.hasGeoFeaturename == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoFeaturename );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoFeaturename () {
        return this.hasGeoFeaturename > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoFeaturename () {

        this.hasGeoFeaturename = 0;
        this.hasModifiedGeoFeaturename = 0;
        this.hasDefinedGeoFeaturename = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoFeaturename () {
        return this.hasModifiedGeoFeaturename > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoFeaturename () {
        return this.hasDefinedGeoFeaturename;
    }

    public BaseContent setGeoPoint ( String geoPoint ) {

        ++this.hasGeoPoint;
        ++this.hasModifiedGeoPoint;

        this.geoPoint = geoPoint;

        hasDefinedGeoPoint = true;

        return this;

    }

    /**
     * <p>
     * A point contains a single latitude-longitude pair, separated by whitespace.
     * </p>
     *
     * <p>
     * Schema type: geo_point , name: geo_point
     * </p>
     */
    public String getGeoPoint() {

        if ( this.constructed == false && this.hasGeoPoint == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoPoint" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoPoint;
    }

    /**
     * <p>
     * A point contains a single latitude-longitude pair, separated by whitespace.
     * </p>
     *
     * <p>
     * Schema type: geo_point , name: geo_point
     * </p>
     */
    public Optional<String> getGeoPointAsOptional() {

        if ( this.constructed == false && this.hasGeoPoint == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoPoint );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoPoint () {
        return this.hasGeoPoint > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoPoint () {

        this.hasGeoPoint = 0;
        this.hasModifiedGeoPoint = 0;
        this.hasDefinedGeoPoint = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoPoint () {
        return this.hasModifiedGeoPoint > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoPoint () {
        return this.hasDefinedGeoPoint;
    }

    public BaseContent setGeoBox ( String geoBox ) {

        ++this.hasGeoBox;
        ++this.hasModifiedGeoBox;

        this.geoBox = geoBox;

        hasDefinedGeoBox = true;

        return this;

    }

    /**
     * <p>
     * A bounding box is a rectangular region, often used to define the extents of a map or a rough area of interest. A box contains two space seperate latitude-longitude pairs, with each pair separated by whitespace. The first pair is the lower corner, the second is the upper corner.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_box
     * </p>
     */
    public String getGeoBox() {

        if ( this.constructed == false && this.hasGeoBox == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoBox" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoBox;
    }

    /**
     * <p>
     * A bounding box is a rectangular region, often used to define the extents of a map or a rough area of interest. A box contains two space seperate latitude-longitude pairs, with each pair separated by whitespace. The first pair is the lower corner, the second is the upper corner.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_box
     * </p>
     */
    public Optional<String> getGeoBoxAsOptional() {

        if ( this.constructed == false && this.hasGeoBox == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoBox );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoBox () {
        return this.hasGeoBox > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoBox () {

        this.hasGeoBox = 0;
        this.hasModifiedGeoBox = 0;
        this.hasDefinedGeoBox = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoBox () {
        return this.hasModifiedGeoBox > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoBox () {
        return this.hasDefinedGeoBox;
    }

    public BaseContent setGeoNameId ( String geoNameId ) {

        ++this.hasGeoNameId;
        ++this.hasModifiedGeoNameId;

        this.geoNameId = geoNameId;

        hasDefinedGeoNameId = true;

        return this;

    }

    /**
     * <p>
     * Id in geonames database.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name_id
     * </p>
     */
    public String getGeoNameId() {

        if ( this.constructed == false && this.hasGeoNameId == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoNameId" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoNameId;
    }

    /**
     * <p>
     * Id in geonames database.
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name_id
     * </p>
     */
    public Optional<String> getGeoNameIdAsOptional() {

        if ( this.constructed == false && this.hasGeoNameId == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoNameId );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoNameId () {
        return this.hasGeoNameId > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoNameId () {

        this.hasGeoNameId = 0;
        this.hasModifiedGeoNameId = 0;
        this.hasDefinedGeoNameId = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoNameId () {
        return this.hasModifiedGeoNameId > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoNameId () {
        return this.hasDefinedGeoNameId;
    }

    public BaseContent setGeoName ( String geoName ) {

        ++this.hasGeoName;
        ++this.hasModifiedGeoName;

        this.geoName = geoName;

        hasDefinedGeoName = true;

        return this;

    }

    /**
     * <p>
     * The human readable location including its parent locations
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name
     * </p>
     */
    public String getGeoName() {

        if ( this.constructed == false && this.hasGeoName == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoName" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoName;
    }

    /**
     * <p>
     * The human readable location including its parent locations
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_name
     * </p>
     */
    public Optional<String> getGeoNameAsOptional() {

        if ( this.constructed == false && this.hasGeoName == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoName );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoName () {
        return this.hasGeoName > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoName () {

        this.hasGeoName = 0;
        this.hasModifiedGeoName = 0;
        this.hasDefinedGeoName = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoName () {
        return this.hasModifiedGeoName > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoName () {
        return this.hasDefinedGeoName;
    }

    public BaseContent setGeoCountry ( String geoCountry ) {

        ++this.hasGeoCountry;
        ++this.hasModifiedGeoCountry;

        this.geoCountry = geoCountry;

        hasDefinedGeoCountry = true;

        return this;

    }

    /**
     * <p>
     * The human readable country derived from geo_location.  These are represented as ISO 3166-1 alpha-2: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_country
     * </p>
     */
    public String getGeoCountry() {

        if ( this.constructed == false && this.hasGeoCountry == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoCountry" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoCountry;
    }

    /**
     * <p>
     * The human readable country derived from geo_location.  These are represented as ISO 3166-1 alpha-2: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_country
     * </p>
     */
    public Optional<String> getGeoCountryAsOptional() {

        if ( this.constructed == false && this.hasGeoCountry == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoCountry );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoCountry () {
        return this.hasGeoCountry > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoCountry () {

        this.hasGeoCountry = 0;
        this.hasModifiedGeoCountry = 0;
        this.hasDefinedGeoCountry = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoCountry () {
        return this.hasModifiedGeoCountry > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoCountry () {
        return this.hasDefinedGeoCountry;
    }

    public BaseContent setGeoState ( String geoState ) {

        ++this.hasGeoState;
        ++this.hasModifiedGeoState;

        this.geoState = geoState;

        hasDefinedGeoState = true;

        return this;

    }

    /**
     * <p>
     * The human readable state derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_state
     * </p>
     */
    public String getGeoState() {

        if ( this.constructed == false && this.hasGeoState == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoState" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoState;
    }

    /**
     * <p>
     * The human readable state derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_state
     * </p>
     */
    public Optional<String> getGeoStateAsOptional() {

        if ( this.constructed == false && this.hasGeoState == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoState );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoState () {
        return this.hasGeoState > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoState () {

        this.hasGeoState = 0;
        this.hasModifiedGeoState = 0;
        this.hasDefinedGeoState = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoState () {
        return this.hasModifiedGeoState > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoState () {
        return this.hasDefinedGeoState;
    }

    public BaseContent setGeoCity ( String geoCity ) {

        ++this.hasGeoCity;
        ++this.hasModifiedGeoCity;

        this.geoCity = geoCity;

        hasDefinedGeoCity = true;

        return this;

    }

    /**
     * <p>
     * The human readable city derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_city
     * </p>
     */
    public String getGeoCity() {

        if ( this.constructed == false && this.hasGeoCity == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoCity" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoCity;
    }

    /**
     * <p>
     * The human readable city derived from geo_location.  
     * </p>
     *
     * <p>
     * Schema type: text , name: geo_city
     * </p>
     */
    public Optional<String> getGeoCityAsOptional() {

        if ( this.constructed == false && this.hasGeoCity == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoCity );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoCity () {
        return this.hasGeoCity > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoCity () {

        this.hasGeoCity = 0;
        this.hasModifiedGeoCity = 0;
        this.hasDefinedGeoCity = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoCity () {
        return this.hasModifiedGeoCity > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoCity () {
        return this.hasDefinedGeoCity;
    }

    public BaseContent setGeoMethod ( GeoMethod geoMethod ) {

        ++this.hasGeoMethod;
        ++this.hasModifiedGeoMethod;

        this.geoMethod = geoMethod;

        hasDefinedGeoMethod = true;

        return this;

    }

    /**
     * <p>
     * Contains the name of the field used to parse the geo data
     * </p>
     *
     * <p>
     * Schema type: enum , name: geo_method
     * </p>
     */
    public GeoMethod getGeoMethod() {

        if ( this.constructed == false && this.hasGeoMethod == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.geoMethod" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.geoMethod;
    }

    /**
     * <p>
     * Contains the name of the field used to parse the geo data
     * </p>
     *
     * <p>
     * Schema type: enum , name: geo_method
     * </p>
     */
    public Optional<GeoMethod> getGeoMethodAsOptional() {

        if ( this.constructed == false && this.hasGeoMethod == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.geoMethod );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasGeoMethod () {
        return this.hasGeoMethod > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearGeoMethod () {

        this.hasGeoMethod = 0;
        this.hasModifiedGeoMethod = 0;
        this.hasDefinedGeoMethod = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedGeoMethod () {
        return this.hasModifiedGeoMethod > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedGeoMethod () {
        return this.hasDefinedGeoMethod;
    }

    public BaseContent setRatingValue ( String ratingValue ) {

        ++this.hasRatingValue;
        ++this.hasModifiedRatingValue;

        this.ratingValue = ratingValue;

        hasDefinedRatingValue = true;

        return this;

    }

    /**
     * <p>
     * The rating for this item provided by the user. 
     * </p>
     *
     * <p>
     * Schema type: text , name: rating_value
     * </p>
     */
    public String getRatingValue() {

        if ( this.constructed == false && this.hasRatingValue == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.ratingValue" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.ratingValue;
    }

    /**
     * <p>
     * The rating for this item provided by the user. 
     * </p>
     *
     * <p>
     * Schema type: text , name: rating_value
     * </p>
     */
    public Optional<String> getRatingValueAsOptional() {

        if ( this.constructed == false && this.hasRatingValue == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.ratingValue );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasRatingValue () {
        return this.hasRatingValue > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearRatingValue () {

        this.hasRatingValue = 0;
        this.hasModifiedRatingValue = 0;
        this.hasDefinedRatingValue = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedRatingValue () {
        return this.hasModifiedRatingValue > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedRatingValue () {
        return this.hasDefinedRatingValue;
    }

    public BaseContent setFaviconSrc ( String faviconSrc ) {

        ++this.hasFaviconSrc;
        ++this.hasModifiedFaviconSrc;

        this.faviconSrc = faviconSrc;

        hasDefinedFaviconSrc = true;

        return this;

    }

    /**
     * <p>
     * The URL to the favicon which represents this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: favicon_src
     * </p>
     */
    public String getFaviconSrc() {

        if ( this.constructed == false && this.hasFaviconSrc == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.faviconSrc" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.faviconSrc;
    }

    /**
     * <p>
     * The URL to the favicon which represents this source.
     * </p>
     *
     * <p>
     * Schema type: text , name: favicon_src
     * </p>
     */
    public Optional<String> getFaviconSrcAsOptional() {

        if ( this.constructed == false && this.hasFaviconSrc == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.faviconSrc );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasFaviconSrc () {
        return this.hasFaviconSrc > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearFaviconSrc () {

        this.hasFaviconSrc = 0;
        this.hasModifiedFaviconSrc = 0;
        this.hasDefinedFaviconSrc = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedFaviconSrc () {
        return this.hasModifiedFaviconSrc > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedFaviconSrc () {
        return this.hasDefinedFaviconSrc;
    }

    public BaseContent setFaviconWidth ( int faviconWidth ) {

        ++this.hasFaviconWidth;
        ++this.hasModifiedFaviconWidth;

        this.faviconWidth = faviconWidth;

        hasDefinedFaviconWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_width
     * </p>
     */
    public int getFaviconWidth() {

        if ( this.constructed == false && this.hasFaviconWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.faviconWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.faviconWidth;
    }

    /**
     * <p>
     * The width of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_width
     * </p>
     */
    public Optional<Integer> getFaviconWidthAsOptional() {

        if ( this.constructed == false && this.hasFaviconWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.faviconWidth );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasFaviconWidth () {
        return this.hasFaviconWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearFaviconWidth () {

        this.hasFaviconWidth = 0;
        this.hasModifiedFaviconWidth = 0;
        this.hasDefinedFaviconWidth = false;

        faviconWidth = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedFaviconWidth () {
        return this.hasModifiedFaviconWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedFaviconWidth () {
        return this.hasDefinedFaviconWidth;
    }

    public BaseContent setFaviconHeight ( int faviconHeight ) {

        ++this.hasFaviconHeight;
        ++this.hasModifiedFaviconHeight;

        this.faviconHeight = faviconHeight;

        hasDefinedFaviconHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_height
     * </p>
     */
    public int getFaviconHeight() {

        if ( this.constructed == false && this.hasFaviconHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.faviconHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.faviconHeight;
    }

    /**
     * <p>
     * The height of the favicon.
     * </p>
     *
     * <p>
     * Schema type: int , name: favicon_height
     * </p>
     */
    public Optional<Integer> getFaviconHeightAsOptional() {

        if ( this.constructed == false && this.hasFaviconHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.faviconHeight );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasFaviconHeight () {
        return this.hasFaviconHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearFaviconHeight () {

        this.hasFaviconHeight = 0;
        this.hasModifiedFaviconHeight = 0;
        this.hasDefinedFaviconHeight = false;

        faviconHeight = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedFaviconHeight () {
        return this.hasModifiedFaviconHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedFaviconHeight () {
        return this.hasDefinedFaviconHeight;
    }

    public BaseContent setImageSrc ( String imageSrc ) {

        ++this.hasImageSrc;
        ++this.hasModifiedImageSrc;

        this.imageSrc = imageSrc;

        hasDefinedImageSrc = true;

        return this;

    }

    /**
     * <p>
     * The URL to the img which represents this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: image_src
     * </p>
     */
    public String getImageSrc() {

        if ( this.constructed == false && this.hasImageSrc == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.imageSrc" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.imageSrc;
    }

    /**
     * <p>
     * The URL to the img which represents this content.
     * </p>
     *
     * <p>
     * Schema type: text , name: image_src
     * </p>
     */
    public Optional<String> getImageSrcAsOptional() {

        if ( this.constructed == false && this.hasImageSrc == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.imageSrc );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasImageSrc () {
        return this.hasImageSrc > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearImageSrc () {

        this.hasImageSrc = 0;
        this.hasModifiedImageSrc = 0;
        this.hasDefinedImageSrc = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedImageSrc () {
        return this.hasModifiedImageSrc > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedImageSrc () {
        return this.hasDefinedImageSrc;
    }

    public BaseContent setImageWidth ( int imageWidth ) {

        ++this.hasImageWidth;
        ++this.hasModifiedImageWidth;

        this.imageWidth = imageWidth;

        hasDefinedImageWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_width
     * </p>
     */
    public int getImageWidth() {

        if ( this.constructed == false && this.hasImageWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.imageWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.imageWidth;
    }

    /**
     * <p>
     * The width of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_width
     * </p>
     */
    public Optional<Integer> getImageWidthAsOptional() {

        if ( this.constructed == false && this.hasImageWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.imageWidth );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasImageWidth () {
        return this.hasImageWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearImageWidth () {

        this.hasImageWidth = 0;
        this.hasModifiedImageWidth = 0;
        this.hasDefinedImageWidth = false;

        imageWidth = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedImageWidth () {
        return this.hasModifiedImageWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedImageWidth () {
        return this.hasDefinedImageWidth;
    }

    public BaseContent setImageHeight ( int imageHeight ) {

        ++this.hasImageHeight;
        ++this.hasModifiedImageHeight;

        this.imageHeight = imageHeight;

        hasDefinedImageHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_height
     * </p>
     */
    public int getImageHeight() {

        if ( this.constructed == false && this.hasImageHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.imageHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.imageHeight;
    }

    /**
     * <p>
     * The height of the image.
     * </p>
     *
     * <p>
     * Schema type: int , name: image_height
     * </p>
     */
    public Optional<Integer> getImageHeightAsOptional() {

        if ( this.constructed == false && this.hasImageHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.imageHeight );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasImageHeight () {
        return this.hasImageHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearImageHeight () {

        this.hasImageHeight = 0;
        this.hasModifiedImageHeight = 0;
        this.hasDefinedImageHeight = false;

        imageHeight = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedImageHeight () {
        return this.hasModifiedImageHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedImageHeight () {
        return this.hasDefinedImageHeight;
    }

    public BaseContent setShared ( boolean shared ) {

        ++this.hasShared;
        ++this.hasModifiedShared;

        this.shared = shared;

        hasDefinedShared = true;

        return this;

    }

    /**
     * <p>
     * True when this source was not published by the original user but actually shared from someone the source follows.  On microblogging platforms this is a retweet.  On others it's a shared post. 
     * </p>
     *
     * <p>
     * Schema type: boolean , name: shared
     * </p>
     */
    public boolean getShared() {

        if ( this.constructed == false && this.hasShared == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.shared" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.shared;
    }

    /**
     * <p>
     * True when this source was not published by the original user but actually shared from someone the source follows.  On microblogging platforms this is a retweet.  On others it's a shared post. 
     * </p>
     *
     * <p>
     * Schema type: boolean , name: shared
     * </p>
     */
    public Optional<Boolean> getSharedAsOptional() {

        if ( this.constructed == false && this.hasShared == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.shared );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasShared () {
        return this.hasShared > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearShared () {

        this.hasShared = 0;
        this.hasModifiedShared = 0;
        this.hasDefinedShared = false;

        shared = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedShared () {
        return this.hasModifiedShared > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedShared () {
        return this.hasDefinedShared;
    }

    public BaseContent setSharedType ( SharedType sharedType ) {

        ++this.hasSharedType;
        ++this.hasModifiedSharedType;

        this.sharedType = sharedType;

        hasDefinedSharedType = true;

        return this;

    }

    /**
     * <p>
     * The type of shared content.
     * </p>
     *
     * <p>
     * Schema type: enum , name: shared_type
     * </p>
     */
    public SharedType getSharedType() {

        if ( this.constructed == false && this.hasSharedType == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedType" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedType;
    }

    /**
     * <p>
     * The type of shared content.
     * </p>
     *
     * <p>
     * Schema type: enum , name: shared_type
     * </p>
     */
    public Optional<SharedType> getSharedTypeAsOptional() {

        if ( this.constructed == false && this.hasSharedType == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedType );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedType () {
        return this.hasSharedType > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedType () {

        this.hasSharedType = 0;
        this.hasModifiedSharedType = 0;
        this.hasDefinedSharedType = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedType () {
        return this.hasModifiedSharedType > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedType () {
        return this.hasDefinedSharedType;
    }

    public BaseContent setSharedProfileLink ( String sharedProfileLink ) {

        ++this.hasSharedProfileLink;
        ++this.hasModifiedSharedProfileLink;

        this.sharedProfileLink = sharedProfileLink;

        hasDefinedSharedProfileLink = true;

        return this;

    }

    /**
     * <p>
     * Deprecated: See shared_author_link
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_link
     * </p>
     */
    public String getSharedProfileLink() {

        if ( this.constructed == false && this.hasSharedProfileLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedProfileLink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedProfileLink;
    }

    /**
     * <p>
     * Deprecated: See shared_author_link
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_link
     * </p>
     */
    public Optional<String> getSharedProfileLinkAsOptional() {

        if ( this.constructed == false && this.hasSharedProfileLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedProfileLink );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedProfileLink () {
        return this.hasSharedProfileLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedProfileLink () {

        this.hasSharedProfileLink = 0;
        this.hasModifiedSharedProfileLink = 0;
        this.hasDefinedSharedProfileLink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedProfileLink () {
        return this.hasModifiedSharedProfileLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedProfileLink () {
        return this.hasDefinedSharedProfileLink;
    }

    public BaseContent setSharedProfileTitle ( String sharedProfileTitle ) {

        ++this.hasSharedProfileTitle;
        ++this.hasModifiedSharedProfileTitle;

        this.sharedProfileTitle = sharedProfileTitle;

        hasDefinedSharedProfileTitle = true;

        return this;

    }

    /**
     * <p>
     * Deprecated: See shared_author_name
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_title
     * </p>
     */
    public String getSharedProfileTitle() {

        if ( this.constructed == false && this.hasSharedProfileTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedProfileTitle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedProfileTitle;
    }

    /**
     * <p>
     * Deprecated: See shared_author_name
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_profile_title
     * </p>
     */
    public Optional<String> getSharedProfileTitleAsOptional() {

        if ( this.constructed == false && this.hasSharedProfileTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedProfileTitle );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedProfileTitle () {
        return this.hasSharedProfileTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedProfileTitle () {

        this.hasSharedProfileTitle = 0;
        this.hasModifiedSharedProfileTitle = 0;
        this.hasDefinedSharedProfileTitle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedProfileTitle () {
        return this.hasModifiedSharedProfileTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedProfileTitle () {
        return this.hasDefinedSharedProfileTitle;
    }

    public BaseContent setSharedAuthorLink ( String sharedAuthorLink ) {

        ++this.hasSharedAuthorLink;
        ++this.hasModifiedSharedAuthorLink;

        this.sharedAuthorLink = sharedAuthorLink;

        hasDefinedSharedAuthorLink = true;

        return this;

    }

    /**
     * <p>
     * The link to the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_author_link
     * </p>
     */
    public String getSharedAuthorLink() {

        if ( this.constructed == false && this.hasSharedAuthorLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedAuthorLink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedAuthorLink;
    }

    /**
     * <p>
     * The link to the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_author_link
     * </p>
     */
    public Optional<String> getSharedAuthorLinkAsOptional() {

        if ( this.constructed == false && this.hasSharedAuthorLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedAuthorLink );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedAuthorLink () {
        return this.hasSharedAuthorLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedAuthorLink () {

        this.hasSharedAuthorLink = 0;
        this.hasModifiedSharedAuthorLink = 0;
        this.hasDefinedSharedAuthorLink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedAuthorLink () {
        return this.hasModifiedSharedAuthorLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedAuthorLink () {
        return this.hasDefinedSharedAuthorLink;
    }

    public BaseContent setSharedAuthorName ( String sharedAuthorName ) {

        ++this.hasSharedAuthorName;
        ++this.hasModifiedSharedAuthorName;

        this.sharedAuthorName = sharedAuthorName;

        hasDefinedSharedAuthorName = true;

        return this;

    }

    /**
     * <p>
     * The title of the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_author_name
     * </p>
     */
    public String getSharedAuthorName() {

        if ( this.constructed == false && this.hasSharedAuthorName == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedAuthorName" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedAuthorName;
    }

    /**
     * <p>
     * The title of the profile of the person who originally posted this story.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_author_name
     * </p>
     */
    public Optional<String> getSharedAuthorNameAsOptional() {

        if ( this.constructed == false && this.hasSharedAuthorName == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedAuthorName );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedAuthorName () {
        return this.hasSharedAuthorName > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedAuthorName () {

        this.hasSharedAuthorName = 0;
        this.hasModifiedSharedAuthorName = 0;
        this.hasDefinedSharedAuthorName = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedAuthorName () {
        return this.hasModifiedSharedAuthorName > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedAuthorName () {
        return this.hasDefinedSharedAuthorName;
    }

    public BaseContent setSharedAuthorUserId ( String sharedAuthorUserId ) {

        ++this.hasSharedAuthorUserId;
        ++this.hasModifiedSharedAuthorUserId;

        this.sharedAuthorUserId = sharedAuthorUserId;

        hasDefinedSharedAuthorUserId = true;

        return this;

    }

    /**
     * <p>
     * User ID in the target platform (when available)
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_author_user_id
     * </p>
     */
    public String getSharedAuthorUserId() {

        if ( this.constructed == false && this.hasSharedAuthorUserId == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedAuthorUserId" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedAuthorUserId;
    }

    /**
     * <p>
     * User ID in the target platform (when available)
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_author_user_id
     * </p>
     */
    public Optional<String> getSharedAuthorUserIdAsOptional() {

        if ( this.constructed == false && this.hasSharedAuthorUserId == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedAuthorUserId );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedAuthorUserId () {
        return this.hasSharedAuthorUserId > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedAuthorUserId () {

        this.hasSharedAuthorUserId = 0;
        this.hasModifiedSharedAuthorUserId = 0;
        this.hasDefinedSharedAuthorUserId = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedAuthorUserId () {
        return this.hasModifiedSharedAuthorUserId > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedAuthorUserId () {
        return this.hasDefinedSharedAuthorUserId;
    }

    public BaseContent setSharedIdentifier ( String sharedIdentifier ) {

        ++this.hasSharedIdentifier;
        ++this.hasModifiedSharedIdentifier;

        this.sharedIdentifier = sharedIdentifier;

        hasDefinedSharedIdentifier = true;

        return this;

    }

    /**
     * <p>
     * A platform specific unique identifier for this post.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_identifier
     * </p>
     */
    public String getSharedIdentifier() {

        if ( this.constructed == false && this.hasSharedIdentifier == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedIdentifier" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedIdentifier;
    }

    /**
     * <p>
     * A platform specific unique identifier for this post.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_identifier
     * </p>
     */
    public Optional<String> getSharedIdentifierAsOptional() {

        if ( this.constructed == false && this.hasSharedIdentifier == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedIdentifier );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedIdentifier () {
        return this.hasSharedIdentifier > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedIdentifier () {

        this.hasSharedIdentifier = 0;
        this.hasModifiedSharedIdentifier = 0;
        this.hasDefinedSharedIdentifier = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedIdentifier () {
        return this.hasModifiedSharedIdentifier > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedIdentifier () {
        return this.hasDefinedSharedIdentifier;
    }

    public BaseContent setSharedPermalink ( String sharedPermalink ) {

        ++this.hasSharedPermalink;
        ++this.hasModifiedSharedPermalink;

        this.sharedPermalink = sharedPermalink;

        hasDefinedSharedPermalink = true;

        return this;

    }

    /**
     * <p>
     * The unique URL to the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_permalink
     * </p>
     */
    public String getSharedPermalink() {

        if ( this.constructed == false && this.hasSharedPermalink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedPermalink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedPermalink;
    }

    /**
     * <p>
     * The unique URL to the content.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_permalink
     * </p>
     */
    public Optional<String> getSharedPermalinkAsOptional() {

        if ( this.constructed == false && this.hasSharedPermalink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedPermalink );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedPermalink () {
        return this.hasSharedPermalink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedPermalink () {

        this.hasSharedPermalink = 0;
        this.hasModifiedSharedPermalink = 0;
        this.hasDefinedSharedPermalink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedPermalink () {
        return this.hasModifiedSharedPermalink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedPermalink () {
        return this.hasDefinedSharedPermalink;
    }

    public BaseContent setSharedAuthorHandle ( String sharedAuthorHandle ) {

        ++this.hasSharedAuthorHandle;
        ++this.hasModifiedSharedAuthorHandle;

        this.sharedAuthorHandle = sharedAuthorHandle;

        hasDefinedSharedAuthorHandle = true;

        return this;

    }

    /**
     * <p>
     * The handle of the author.  This is a unique token/handle for the author across the whole site.  For example 'barackobama' and would never conflict with another account.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_author_handle
     * </p>
     */
    public String getSharedAuthorHandle() {

        if ( this.constructed == false && this.hasSharedAuthorHandle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sharedAuthorHandle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sharedAuthorHandle;
    }

    /**
     * <p>
     * The handle of the author.  This is a unique token/handle for the author across the whole site.  For example 'barackobama' and would never conflict with another account.
     * </p>
     *
     * <p>
     * Schema type: text , name: shared_author_handle
     * </p>
     */
    public Optional<String> getSharedAuthorHandleAsOptional() {

        if ( this.constructed == false && this.hasSharedAuthorHandle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sharedAuthorHandle );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSharedAuthorHandle () {
        return this.hasSharedAuthorHandle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSharedAuthorHandle () {

        this.hasSharedAuthorHandle = 0;
        this.hasModifiedSharedAuthorHandle = 0;
        this.hasDefinedSharedAuthorHandle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSharedAuthorHandle () {
        return this.hasModifiedSharedAuthorHandle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSharedAuthorHandle () {
        return this.hasDefinedSharedAuthorHandle;
    }

    public BaseContent setReplied ( boolean replied ) {

        ++this.hasReplied;
        ++this.hasModifiedReplied;

        this.replied = replied;

        hasDefinedReplied = true;

        return this;

    }

    /**
     * <p>
     * True when this source was a reply, false otherwhise
     * </p>
     *
     * <p>
     * Schema type: boolean , name: replied
     * </p>
     */
    public boolean getReplied() {

        if ( this.constructed == false && this.hasReplied == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.replied" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.replied;
    }

    /**
     * <p>
     * True when this source was a reply, false otherwhise
     * </p>
     *
     * <p>
     * Schema type: boolean , name: replied
     * </p>
     */
    public Optional<Boolean> getRepliedAsOptional() {

        if ( this.constructed == false && this.hasReplied == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.replied );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasReplied () {
        return this.hasReplied > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearReplied () {

        this.hasReplied = 0;
        this.hasModifiedReplied = 0;
        this.hasDefinedReplied = false;

        replied = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedReplied () {
        return this.hasModifiedReplied > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedReplied () {
        return this.hasDefinedReplied;
    }

    public BaseContent setRepliedProfileLink ( String repliedProfileLink ) {

        ++this.hasRepliedProfileLink;
        ++this.hasModifiedRepliedProfileLink;

        this.repliedProfileLink = repliedProfileLink;

        hasDefinedRepliedProfileLink = true;

        return this;

    }

    /**
     * <p>
     * The link to the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_link
     * </p>
     */
    public String getRepliedProfileLink() {

        if ( this.constructed == false && this.hasRepliedProfileLink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.repliedProfileLink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.repliedProfileLink;
    }

    /**
     * <p>
     * The link to the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_link
     * </p>
     */
    public Optional<String> getRepliedProfileLinkAsOptional() {

        if ( this.constructed == false && this.hasRepliedProfileLink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.repliedProfileLink );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasRepliedProfileLink () {
        return this.hasRepliedProfileLink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearRepliedProfileLink () {

        this.hasRepliedProfileLink = 0;
        this.hasModifiedRepliedProfileLink = 0;
        this.hasDefinedRepliedProfileLink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedRepliedProfileLink () {
        return this.hasModifiedRepliedProfileLink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedRepliedProfileLink () {
        return this.hasDefinedRepliedProfileLink;
    }

    public BaseContent setRepliedProfileTitle ( String repliedProfileTitle ) {

        ++this.hasRepliedProfileTitle;
        ++this.hasModifiedRepliedProfileTitle;

        this.repliedProfileTitle = repliedProfileTitle;

        hasDefinedRepliedProfileTitle = true;

        return this;

    }

    /**
     * <p>
     * The title of the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_title
     * </p>
     */
    public String getRepliedProfileTitle() {

        if ( this.constructed == false && this.hasRepliedProfileTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.repliedProfileTitle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.repliedProfileTitle;
    }

    /**
     * <p>
     * The title of the profile of the person being replied to.
     * </p>
     *
     * <p>
     * Schema type: text , name: replied_profile_title
     * </p>
     */
    public Optional<String> getRepliedProfileTitleAsOptional() {

        if ( this.constructed == false && this.hasRepliedProfileTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.repliedProfileTitle );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasRepliedProfileTitle () {
        return this.hasRepliedProfileTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearRepliedProfileTitle () {

        this.hasRepliedProfileTitle = 0;
        this.hasModifiedRepliedProfileTitle = 0;
        this.hasDefinedRepliedProfileTitle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedRepliedProfileTitle () {
        return this.hasModifiedRepliedProfileTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedRepliedProfileTitle () {
        return this.hasDefinedRepliedProfileTitle;
    }

    public BaseContent setCard ( Card card ) {

        ++this.hasCard;
        ++this.hasModifiedCard;

        this.card = card;

        hasDefinedCard = true;

        return this;

    }

    /**
     * <p>
     * When present, the type of card that can be used to display this content within web applications
     * </p>
     *
     * <p>
     * Schema type: enum , name: card
     * </p>
     */
    public Card getCard() {

        if ( this.constructed == false && this.hasCard == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.card" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.card;
    }

    /**
     * <p>
     * When present, the type of card that can be used to display this content within web applications
     * </p>
     *
     * <p>
     * Schema type: enum , name: card
     * </p>
     */
    public Optional<Card> getCardAsOptional() {

        if ( this.constructed == false && this.hasCard == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.card );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasCard () {
        return this.hasCard > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearCard () {

        this.hasCard = 0;
        this.hasModifiedCard = 0;
        this.hasDefinedCard = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedCard () {
        return this.hasModifiedCard > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedCard () {
        return this.hasDefinedCard;
    }

    public BaseContent setVideoPlayer ( String videoPlayer ) {

        ++this.hasVideoPlayer;
        ++this.hasModifiedVideoPlayer;

        this.videoPlayer = videoPlayer;

        hasDefinedVideoPlayer = true;

        return this;

    }

    /**
     * <p>
     * The URL to an iframe which can be embedded to play this video.  HTTPS URL to iframe player. This must be a HTTPS URL which does not generate active mixed content warnings in a web browser
     * </p>
     *
     * <p>
     * Schema type: text , name: video_player
     * </p>
     */
    public String getVideoPlayer() {

        if ( this.constructed == false && this.hasVideoPlayer == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.videoPlayer" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.videoPlayer;
    }

    /**
     * <p>
     * The URL to an iframe which can be embedded to play this video.  HTTPS URL to iframe player. This must be a HTTPS URL which does not generate active mixed content warnings in a web browser
     * </p>
     *
     * <p>
     * Schema type: text , name: video_player
     * </p>
     */
    public Optional<String> getVideoPlayerAsOptional() {

        if ( this.constructed == false && this.hasVideoPlayer == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.videoPlayer );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasVideoPlayer () {
        return this.hasVideoPlayer > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearVideoPlayer () {

        this.hasVideoPlayer = 0;
        this.hasModifiedVideoPlayer = 0;
        this.hasDefinedVideoPlayer = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedVideoPlayer () {
        return this.hasModifiedVideoPlayer > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedVideoPlayer () {
        return this.hasDefinedVideoPlayer;
    }

    public BaseContent setVideoPlayerWidth ( int videoPlayerWidth ) {

        ++this.hasVideoPlayerWidth;
        ++this.hasModifiedVideoPlayerWidth;

        this.videoPlayerWidth = videoPlayerWidth;

        hasDefinedVideoPlayerWidth = true;

        return this;

    }

    /**
     * <p>
     * The width of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_width
     * </p>
     */
    public int getVideoPlayerWidth() {

        if ( this.constructed == false && this.hasVideoPlayerWidth == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.videoPlayerWidth" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.videoPlayerWidth;
    }

    /**
     * <p>
     * The width of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_width
     * </p>
     */
    public Optional<Integer> getVideoPlayerWidthAsOptional() {

        if ( this.constructed == false && this.hasVideoPlayerWidth == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.videoPlayerWidth );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasVideoPlayerWidth () {
        return this.hasVideoPlayerWidth > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearVideoPlayerWidth () {

        this.hasVideoPlayerWidth = 0;
        this.hasModifiedVideoPlayerWidth = 0;
        this.hasDefinedVideoPlayerWidth = false;

        videoPlayerWidth = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedVideoPlayerWidth () {
        return this.hasModifiedVideoPlayerWidth > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedVideoPlayerWidth () {
        return this.hasDefinedVideoPlayerWidth;
    }

    public BaseContent setVideoPlayerHeight ( int videoPlayerHeight ) {

        ++this.hasVideoPlayerHeight;
        ++this.hasModifiedVideoPlayerHeight;

        this.videoPlayerHeight = videoPlayerHeight;

        hasDefinedVideoPlayerHeight = true;

        return this;

    }

    /**
     * <p>
     * The height of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_height
     * </p>
     */
    public int getVideoPlayerHeight() {

        if ( this.constructed == false && this.hasVideoPlayerHeight == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.videoPlayerHeight" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.videoPlayerHeight;
    }

    /**
     * <p>
     * The height of the player iframe.
     * </p>
     *
     * <p>
     * Schema type: int , name: video_player_height
     * </p>
     */
    public Optional<Integer> getVideoPlayerHeightAsOptional() {

        if ( this.constructed == false && this.hasVideoPlayerHeight == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.videoPlayerHeight );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasVideoPlayerHeight () {
        return this.hasVideoPlayerHeight > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearVideoPlayerHeight () {

        this.hasVideoPlayerHeight = 0;
        this.hasModifiedVideoPlayerHeight = 0;
        this.hasDefinedVideoPlayerHeight = false;

        videoPlayerHeight = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedVideoPlayerHeight () {
        return this.hasModifiedVideoPlayerHeight > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedVideoPlayerHeight () {
        return this.hasDefinedVideoPlayerHeight;
    }

    public BaseContent setType ( Type type ) {

        ++this.hasType;
        ++this.hasModifiedType;

        this.type = type;

        hasDefinedType = true;

        return this;

    }

    /**
     * <p>
     * The type of this content as either a POST or a COMMENT.  This allows us to index posts and comments through the same API.
     * </p>
     *
     * <p>
     * Schema type: enum , name: type
     * </p>
     */
    public Type getType() {

        if ( this.constructed == false && this.hasType == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.type" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.type;
    }

    /**
     * <p>
     * The type of this content as either a POST or a COMMENT.  This allows us to index posts and comments through the same API.
     * </p>
     *
     * <p>
     * Schema type: enum , name: type
     * </p>
     */
    public Optional<Type> getTypeAsOptional() {

        if ( this.constructed == false && this.hasType == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.type );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasType () {
        return this.hasType > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearType () {

        this.hasType = 0;
        this.hasModifiedType = 0;
        this.hasDefinedType = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedType () {
        return this.hasModifiedType > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedType () {
        return this.hasDefinedType;
    }

    public BaseContent setSentiment ( Sentiment sentiment ) {

        ++this.hasSentiment;
        ++this.hasModifiedSentiment;

        this.sentiment = sentiment;

        hasDefinedSentiment = true;

        return this;

    }

    /**
     * <p>
     * The overall sentiment for this content
     * </p>
     *
     * <p>
     * Schema type: enum , name: sentiment
     * </p>
     */
    public Sentiment getSentiment() {

        if ( this.constructed == false && this.hasSentiment == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.sentiment" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.sentiment;
    }

    /**
     * <p>
     * The overall sentiment for this content
     * </p>
     *
     * <p>
     * Schema type: enum , name: sentiment
     * </p>
     */
    public Optional<Sentiment> getSentimentAsOptional() {

        if ( this.constructed == false && this.hasSentiment == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.sentiment );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasSentiment () {
        return this.hasSentiment > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearSentiment () {

        this.hasSentiment = 0;
        this.hasModifiedSentiment = 0;
        this.hasDefinedSentiment = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedSentiment () {
        return this.hasModifiedSentiment > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedSentiment () {
        return this.hasDefinedSentiment;
    }

    public BaseContent setLang ( String lang ) {

        ++this.hasLang;
        ++this.hasModifiedLang;

        this.lang = lang;

        hasDefinedLang = true;

        return this;

    }

    /**
     * <p>
     * ISO language code for this source.  All our language codes are ISO 639 two letter lang codes. We use the special lang code of U when we are unable to determine the language from the underlying text - usually because we don't have enough data.
     * </p>
     *
     * <p>
     * Schema type: ascii , name: lang
     * </p>
     */
    public String getLang() {

        if ( this.constructed == false && this.hasLang == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.lang" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.lang;
    }

    /**
     * <p>
     * ISO language code for this source.  All our language codes are ISO 639 two letter lang codes. We use the special lang code of U when we are unable to determine the language from the underlying text - usually because we don't have enough data.
     * </p>
     *
     * <p>
     * Schema type: ascii , name: lang
     * </p>
     */
    public Optional<String> getLangAsOptional() {

        if ( this.constructed == false && this.hasLang == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.lang );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLang () {
        return this.hasLang > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLang () {

        this.hasLang = 0;
        this.hasModifiedLang = 0;
        this.hasDefinedLang = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLang () {
        return this.hasModifiedLang > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLang () {
        return this.hasDefinedLang;
    }

    public BaseContent setCategories ( Map<String,Double> categories ) {

        ++this.hasCategories;
        ++this.hasModifiedCategories;

        this.categories = categories;

        hasDefinedCategories = true;

        return this;

    }

    /**
     * <p>
     * Provides a map between algorithmically determined categories (entertainment, politics, technology, science, sports, business, health) and their probabilities.  The probabilities are between 0.0 and 1.0 and if you sum them all they will equal 1.0.  
     * </p>
     *
     * <p>
     * Schema type: map&lt;ascii,double&gt; , name: categories
     * </p>
     */
    public Map<String,Double> getCategories() {

        if ( this.constructed == false && this.hasCategories == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.categories" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.categories;
    }

    /**
     * <p>
     * Provides a map between algorithmically determined categories (entertainment, politics, technology, science, sports, business, health) and their probabilities.  The probabilities are between 0.0 and 1.0 and if you sum them all they will equal 1.0.  
     * </p>
     *
     * <p>
     * Schema type: map&lt;ascii,double&gt; , name: categories
     * </p>
     */
    public Optional<Map<String,Double>> getCategoriesAsOptional() {

        if ( this.constructed == false && this.hasCategories == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.categories );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasCategories () {
        return this.hasCategories > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearCategories () {

        this.hasCategories = 0;
        this.hasModifiedCategories = 0;
        this.hasDefinedCategories = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedCategories () {
        return this.hasModifiedCategories > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedCategories () {
        return this.hasDefinedCategories;
    }

    public BaseContent setDuplicates ( Map<Long,Double> duplicates ) {

        ++this.hasDuplicates;
        ++this.hasModifiedDuplicates;

        this.duplicates = duplicates;

        hasDefinedDuplicates = true;

        return this;

    }

    /**
     * <p>
     * Provides data on previously posted documents which are duplicates of this document.  Keys are sequence values for the documents and the is a double between 0.0 and 1.0 where 0.0 is no duplication and 1.0 is full duplication
     * </p>
     *
     * <p>
     * Schema type: map&lt;bigint,double&gt; , name: duplicates
     * </p>
     */
    public Map<Long,Double> getDuplicates() {

        if ( this.constructed == false && this.hasDuplicates == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.duplicates" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.duplicates;
    }

    /**
     * <p>
     * Provides data on previously posted documents which are duplicates of this document.  Keys are sequence values for the documents and the is a double between 0.0 and 1.0 where 0.0 is no duplication and 1.0 is full duplication
     * </p>
     *
     * <p>
     * Schema type: map&lt;bigint,double&gt; , name: duplicates
     * </p>
     */
    public Optional<Map<Long,Double>> getDuplicatesAsOptional() {

        if ( this.constructed == false && this.hasDuplicates == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.duplicates );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDuplicates () {
        return this.hasDuplicates > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDuplicates () {

        this.hasDuplicates = 0;
        this.hasModifiedDuplicates = 0;
        this.hasDefinedDuplicates = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDuplicates () {
        return this.hasModifiedDuplicates > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDuplicates () {
        return this.hasDefinedDuplicates;
    }

    public BaseContent setDuplicatesCount ( int duplicatesCount ) {

        ++this.hasDuplicatesCount;
        ++this.hasModifiedDuplicatesCount;

        this.duplicatesCount = duplicatesCount;

        hasDefinedDuplicatesCount = true;

        return this;

    }

    /**
     * <p>
     * The total number of duplicates.
     * </p>
     *
     * <p>
     * Schema type: int , name: duplicates_count
     * </p>
     */
    public int getDuplicatesCount() {

        if ( this.constructed == false && this.hasDuplicatesCount == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.duplicatesCount" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.duplicatesCount;
    }

    /**
     * <p>
     * The total number of duplicates.
     * </p>
     *
     * <p>
     * Schema type: int , name: duplicates_count
     * </p>
     */
    public Optional<Integer> getDuplicatesCountAsOptional() {

        if ( this.constructed == false && this.hasDuplicatesCount == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.duplicatesCount );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDuplicatesCount () {
        return this.hasDuplicatesCount > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDuplicatesCount () {

        this.hasDuplicatesCount = 0;
        this.hasModifiedDuplicatesCount = 0;
        this.hasDefinedDuplicatesCount = false;

        duplicatesCount = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDuplicatesCount () {
        return this.hasModifiedDuplicatesCount > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDuplicatesCount () {
        return this.hasDefinedDuplicatesCount;
    }

    public BaseContent setClassifications ( Map<String,Double> classifications ) {

        ++this.hasClassifications;
        ++this.hasModifiedClassifications;

        this.classifications = classifications;

        hasDefinedClassifications = true;

        return this;

    }

    /**
     * <p>
     * Provides a map between algorithmically determined classifications driven by customers.  The keys are keys given to customers identify their classification and the value is the probability of that classification.  The values DO NOT sum to 1.0 as there may be multiple classifications here.
     * </p>
     *
     * <p>
     * Schema type: map&lt;ascii,double&gt; , name: classifications
     * </p>
     */
    public Map<String,Double> getClassifications() {

        if ( this.constructed == false && this.hasClassifications == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.classifications" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.classifications;
    }

    /**
     * <p>
     * Provides a map between algorithmically determined classifications driven by customers.  The keys are keys given to customers identify their classification and the value is the probability of that classification.  The values DO NOT sum to 1.0 as there may be multiple classifications here.
     * </p>
     *
     * <p>
     * Schema type: map&lt;ascii,double&gt; , name: classifications
     * </p>
     */
    public Optional<Map<String,Double>> getClassificationsAsOptional() {

        if ( this.constructed == false && this.hasClassifications == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.classifications );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasClassifications () {
        return this.hasClassifications > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearClassifications () {

        this.hasClassifications = 0;
        this.hasModifiedClassifications = 0;
        this.hasDefinedClassifications = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedClassifications () {
        return this.hasModifiedClassifications > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedClassifications () {
        return this.hasDefinedClassifications;
    }

    public BaseContent setParentHashcode ( String parentHashcode ) {

        ++this.hasParentHashcode;
        ++this.hasModifiedParentHashcode;

        this.parentHashcode = parentHashcode;

        hasDefinedParentHashcode = true;

        return this;

    }

    /**
     * <p>
     * See content.hashcode
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_hashcode
     * </p>
     */
    public String getParentHashcode() {

        if ( this.constructed == false && this.hasParentHashcode == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentHashcode" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentHashcode;
    }

    /**
     * <p>
     * See content.hashcode
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_hashcode
     * </p>
     */
    public Optional<String> getParentHashcodeAsOptional() {

        if ( this.constructed == false && this.hasParentHashcode == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentHashcode );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentHashcode () {
        return this.hasParentHashcode > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentHashcode () {

        this.hasParentHashcode = 0;
        this.hasModifiedParentHashcode = 0;
        this.hasDefinedParentHashcode = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentHashcode () {
        return this.hasModifiedParentHashcode > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentHashcode () {
        return this.hasDefinedParentHashcode;
    }

    public BaseContent setParentPermalink ( String parentPermalink ) {

        ++this.hasParentPermalink;
        ++this.hasModifiedParentPermalink;

        this.parentPermalink = parentPermalink;

        hasDefinedParentPermalink = true;

        return this;

    }

    /**
     * <p>
     * See content.permalink
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_permalink
     * </p>
     */
    public String getParentPermalink() {

        if ( this.constructed == false && this.hasParentPermalink == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentPermalink" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentPermalink;
    }

    /**
     * <p>
     * See content.permalink
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_permalink
     * </p>
     */
    public Optional<String> getParentPermalinkAsOptional() {

        if ( this.constructed == false && this.hasParentPermalink == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentPermalink );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentPermalink () {
        return this.hasParentPermalink > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentPermalink () {

        this.hasParentPermalink = 0;
        this.hasModifiedParentPermalink = 0;
        this.hasDefinedParentPermalink = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentPermalink () {
        return this.hasModifiedParentPermalink > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentPermalink () {
        return this.hasDefinedParentPermalink;
    }

    public BaseContent setParentTitle ( String parentTitle ) {

        ++this.hasParentTitle;
        ++this.hasModifiedParentTitle;

        this.parentTitle = parentTitle;

        hasDefinedParentTitle = true;

        return this;

    }

    /**
     * <p>
     * See content.title
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_title
     * </p>
     */
    public String getParentTitle() {

        if ( this.constructed == false && this.hasParentTitle == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentTitle" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentTitle;
    }

    /**
     * <p>
     * See content.title
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_title
     * </p>
     */
    public Optional<String> getParentTitleAsOptional() {

        if ( this.constructed == false && this.hasParentTitle == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentTitle );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentTitle () {
        return this.hasParentTitle > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentTitle () {

        this.hasParentTitle = 0;
        this.hasModifiedParentTitle = 0;
        this.hasDefinedParentTitle = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentTitle () {
        return this.hasModifiedParentTitle > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentTitle () {
        return this.hasDefinedParentTitle;
    }

    public BaseContent setParentLang ( String parentLang ) {

        ++this.hasParentLang;
        ++this.hasModifiedParentLang;

        this.parentLang = parentLang;

        hasDefinedParentLang = true;

        return this;

    }

    /**
     * <p>
     * See content.lang
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_lang
     * </p>
     */
    public String getParentLang() {

        if ( this.constructed == false && this.hasParentLang == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentLang" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentLang;
    }

    /**
     * <p>
     * See content.lang
     * </p>
     *
     * <p>
     * Schema type: ascii , name: parent_lang
     * </p>
     */
    public Optional<String> getParentLangAsOptional() {

        if ( this.constructed == false && this.hasParentLang == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentLang );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentLang () {
        return this.hasParentLang > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentLang () {

        this.hasParentLang = 0;
        this.hasModifiedParentLang = 0;
        this.hasDefinedParentLang = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentLang () {
        return this.hasModifiedParentLang > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentLang () {
        return this.hasDefinedParentLang;
    }

    public BaseContent setParentResource ( String parentResource ) {

        ++this.hasParentResource;
        ++this.hasModifiedParentResource;

        this.parentResource = parentResource;

        hasDefinedParentResource = true;

        return this;

    }

    /**
     * <p>
     * See content.resource
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_resource
     * </p>
     */
    public String getParentResource() {

        if ( this.constructed == false && this.hasParentResource == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.parentResource" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.parentResource;
    }

    /**
     * <p>
     * See content.resource
     * </p>
     *
     * <p>
     * Schema type: text , name: parent_resource
     * </p>
     */
    public Optional<String> getParentResourceAsOptional() {

        if ( this.constructed == false && this.hasParentResource == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.parentResource );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasParentResource () {
        return this.hasParentResource > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearParentResource () {

        this.hasParentResource = 0;
        this.hasModifiedParentResource = 0;
        this.hasDefinedParentResource = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedParentResource () {
        return this.hasModifiedParentResource > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedParentResource () {
        return this.hasDefinedParentResource;
    }

    public BaseContent setLikes ( int likes ) {

        ++this.hasLikes;
        ++this.hasModifiedLikes;

        this.likes = likes;

        hasDefinedLikes = true;

        return this;

    }

    /**
     * <p>
     * The number of likes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: likes
     * </p>
     */
    public int getLikes() {

        if ( this.constructed == false && this.hasLikes == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.likes" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.likes;
    }

    /**
     * <p>
     * The number of likes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: likes
     * </p>
     */
    public Optional<Integer> getLikesAsOptional() {

        if ( this.constructed == false && this.hasLikes == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.likes );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasLikes () {
        return this.hasLikes > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearLikes () {

        this.hasLikes = 0;
        this.hasModifiedLikes = 0;
        this.hasDefinedLikes = false;

        likes = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedLikes () {
        return this.hasModifiedLikes > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedLikes () {
        return this.hasDefinedLikes;
    }

    public BaseContent setDislikes ( int dislikes ) {

        ++this.hasDislikes;
        ++this.hasModifiedDislikes;

        this.dislikes = dislikes;

        hasDefinedDislikes = true;

        return this;

    }

    /**
     * <p>
     * The number of dislikes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: dislikes
     * </p>
     */
    public int getDislikes() {

        if ( this.constructed == false && this.hasDislikes == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.dislikes" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.dislikes;
    }

    /**
     * <p>
     * The number of dislikes for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: dislikes
     * </p>
     */
    public Optional<Integer> getDislikesAsOptional() {

        if ( this.constructed == false && this.hasDislikes == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.dislikes );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasDislikes () {
        return this.hasDislikes > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearDislikes () {

        this.hasDislikes = 0;
        this.hasModifiedDislikes = 0;
        this.hasDefinedDislikes = false;

        dislikes = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedDislikes () {
        return this.hasModifiedDislikes > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedDislikes () {
        return this.hasDefinedDislikes;
    }

    public BaseContent setComments ( int comments ) {

        ++this.hasComments;
        ++this.hasModifiedComments;

        this.comments = comments;

        hasDefinedComments = true;

        return this;

    }

    /**
     * <p>
     * The number of comments for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: comments
     * </p>
     */
    public int getComments() {

        if ( this.constructed == false && this.hasComments == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.comments" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.comments;
    }

    /**
     * <p>
     * The number of comments for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: comments
     * </p>
     */
    public Optional<Integer> getCommentsAsOptional() {

        if ( this.constructed == false && this.hasComments == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.comments );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasComments () {
        return this.hasComments > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearComments () {

        this.hasComments = 0;
        this.hasModifiedComments = 0;
        this.hasDefinedComments = false;

        comments = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedComments () {
        return this.hasModifiedComments > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedComments () {
        return this.hasDefinedComments;
    }

    public BaseContent setViews ( int views ) {

        ++this.hasViews;
        ++this.hasModifiedViews;

        this.views = views;

        hasDefinedViews = true;

        return this;

    }

    /**
     * <p>
     * The number of views for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: views
     * </p>
     */
    public int getViews() {

        if ( this.constructed == false && this.hasViews == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.views" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.views;
    }

    /**
     * <p>
     * The number of views for this post (when we first find it).  Note that this field DOES NOT update dynamically.
     * </p>
     *
     * <p>
     * Schema type: int , name: views
     * </p>
     */
    public Optional<Integer> getViewsAsOptional() {

        if ( this.constructed == false && this.hasViews == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.views );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasViews () {
        return this.hasViews > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearViews () {

        this.hasViews = 0;
        this.hasModifiedViews = 0;
        this.hasDefinedViews = false;

        views = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedViews () {
        return this.hasModifiedViews > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedViews () {
        return this.hasDefinedViews;
    }

    public BaseContent setMetadataScore ( int metadataScore ) {

        ++this.hasMetadataScore;
        ++this.hasModifiedMetadataScore;

        this.metadataScore = metadataScore;

        hasDefinedMetadataScore = true;

        return this;

    }

    /**
     * <p>
     * The quality of the metadata on this post. Used internally to audit the quality of Spinn3r data.  Not very applicable to customer use.
     * </p>
     *
     * <p>
     * Schema type: int , name: metadata_score
     * </p>
     */
    public int getMetadataScore() {

        if ( this.constructed == false && this.hasMetadataScore == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.metadataScore" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.metadataScore;
    }

    /**
     * <p>
     * The quality of the metadata on this post. Used internally to audit the quality of Spinn3r data.  Not very applicable to customer use.
     * </p>
     *
     * <p>
     * Schema type: int , name: metadata_score
     * </p>
     */
    public Optional<Integer> getMetadataScoreAsOptional() {

        if ( this.constructed == false && this.hasMetadataScore == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.metadataScore );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMetadataScore () {
        return this.hasMetadataScore > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMetadataScore () {

        this.hasMetadataScore = 0;
        this.hasModifiedMetadataScore = 0;
        this.hasDefinedMetadataScore = false;

        metadataScore = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMetadataScore () {
        return this.hasModifiedMetadataScore > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMetadataScore () {
        return this.hasDefinedMetadataScore;
    }

    public BaseContent setShares ( int shares ) {

        ++this.hasShares;
        ++this.hasModifiedShares;

        this.shares = shares;

        hasDefinedShares = true;

        return this;

    }

    /**
     * <p>
     * The number of shares for this post.  For some microblogging platforms this could be a rewtweet but for others its a share.  Most platforms have this concept.
     * </p>
     *
     * <p>
     * Schema type: int , name: shares
     * </p>
     */
    public int getShares() {

        if ( this.constructed == false && this.hasShares == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.shares" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.shares;
    }

    /**
     * <p>
     * The number of shares for this post.  For some microblogging platforms this could be a rewtweet but for others its a share.  Most platforms have this concept.
     * </p>
     *
     * <p>
     * Schema type: int , name: shares
     * </p>
     */
    public Optional<Integer> getSharesAsOptional() {

        if ( this.constructed == false && this.hasShares == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.shares );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasShares () {
        return this.hasShares > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearShares () {

        this.hasShares = 0;
        this.hasModifiedShares = 0;
        this.hasDefinedShares = false;

        shares = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedShares () {
        return this.hasModifiedShares > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedShares () {
        return this.hasDefinedShares;
    }

    public BaseContent setMetadataUpdates ( int metadataUpdates ) {

        ++this.hasMetadataUpdates;
        ++this.hasModifiedMetadataUpdates;

        this.metadataUpdates = metadataUpdates;

        hasDefinedMetadataUpdates = true;

        return this;

    }

    /**
     * <p>
     * The number of updates to metadata we have
     * </p>
     *
     * <p>
     * Schema type: int , name: metadata_updates
     * </p>
     */
    public int getMetadataUpdates() {

        if ( this.constructed == false && this.hasMetadataUpdates == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.metadataUpdates" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.metadataUpdates;
    }

    /**
     * <p>
     * The number of updates to metadata we have
     * </p>
     *
     * <p>
     * Schema type: int , name: metadata_updates
     * </p>
     */
    public Optional<Integer> getMetadataUpdatesAsOptional() {

        if ( this.constructed == false && this.hasMetadataUpdates == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.metadataUpdates );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasMetadataUpdates () {
        return this.hasMetadataUpdates > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearMetadataUpdates () {

        this.hasMetadataUpdates = 0;
        this.hasModifiedMetadataUpdates = 0;
        this.hasDefinedMetadataUpdates = false;

        metadataUpdates = 0;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedMetadataUpdates () {
        return this.hasModifiedMetadataUpdates > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedMetadataUpdates () {
        return this.hasDefinedMetadataUpdates;
    }

    public BaseContent setPinned ( boolean pinned ) {

        ++this.hasPinned;
        ++this.hasModifiedPinned;

        this.pinned = pinned;

        hasDefinedPinned = true;

        return this;

    }

    /**
     * <p>
     * True when when the user has pinned this content to their profile effectively locking the post in place.
     * </p>
     *
     * <p>
     * Schema type: boolean , name: pinned
     * </p>
     */
    public boolean getPinned() {

        if ( this.constructed == false && this.hasPinned == 0 ) {
            Throwable cause = new IllegalArgumentException( "this.pinned" );
            throw new DataBindingException( "Member is undefined: ", cause );
        }

        return this.pinned;
    }

    /**
     * <p>
     * True when when the user has pinned this content to their profile effectively locking the post in place.
     * </p>
     *
     * <p>
     * Schema type: boolean , name: pinned
     * </p>
     */
    public Optional<Boolean> getPinnedAsOptional() {

        if ( this.constructed == false && this.hasPinned == 0 ) {
            return Optional.empty();
        }

        return Optional.ofNullable( this.pinned );

    }

    /**
     * Return true if this member has a defined value of this field.
     */
    public boolean hasPinned () {
        return this.hasPinned > 0;
    }

    /**
     * Clear this method so that it no longer has a value and won't be
     * serialized or persisted.
     */
    public void clearPinned () {

        this.hasPinned = 0;
        this.hasModifiedPinned = 0;
        this.hasDefinedPinned = false;

        pinned = false;

    }

    /**
     * Return true if this member has been modified from the original value.
     */
    public boolean hasModifiedPinned () {
        return this.hasModifiedPinned > 0;
    }

    /**
     * Return true if this member has a defined value.
     */
    public boolean hasDefinedPinned () {
        return this.hasDefinedPinned;
    }

    /**
      * Copy the fields from the given source to the current object.
      */
    public void copy( BaseContent obj ) {

        if ( obj.hasBucket() ) {
            setBucket( obj.getBucket() );
        }

        if ( obj.hasSequence() ) {
            setSequence( obj.getSequence() );
        }

        if ( obj.hasSequenceRange() ) {
            setSequenceRange( obj.getSequenceRange() );
        }

        if ( obj.hasHashcode() ) {
            setHashcode( obj.getHashcode() );
        }

        if ( obj.hasResource() ) {
            setResource( obj.getResource() );
        }

        if ( obj.hasDateFound() ) {
            setDateFound( obj.getDateFound() );
        }

        if ( obj.hasIndexMethod() ) {
            setIndexMethod( obj.getIndexMethod() );
        }

        if ( obj.hasDetectionMethod() ) {
            setDetectionMethod( obj.getDetectionMethod() );
        }

        if ( obj.hasHtml() ) {
            setHtml( obj.getHtml() );
        }

        if ( obj.hasHtmlLength() ) {
            setHtmlLength( obj.getHtmlLength() );
        }

        if ( obj.hasHtmlChecksum() ) {
            setHtmlChecksum( obj.getHtmlChecksum() );
        }

        if ( obj.hasHtmlBlob() ) {
            setHtmlBlob( obj.getHtmlBlob() );
        }

        if ( obj.hasHtmlBlobLength() ) {
            setHtmlBlobLength( obj.getHtmlBlobLength() );
        }

        if ( obj.hasHtmlBlobChecksum() ) {
            setHtmlBlobChecksum( obj.getHtmlBlobChecksum() );
        }

        if ( obj.hasExtractBlob() ) {
            setExtractBlob( obj.getExtractBlob() );
        }

        if ( obj.hasVersion() ) {
            setVersion( obj.getVersion() );
        }

        if ( obj.hasLastUpdated() ) {
            setLastUpdated( obj.getLastUpdated() );
        }

        if ( obj.hasSourceHashcode() ) {
            setSourceHashcode( obj.getSourceHashcode() );
        }

        if ( obj.hasSourceResource() ) {
            setSourceResource( obj.getSourceResource() );
        }

        if ( obj.hasSourceLink() ) {
            setSourceLink( obj.getSourceLink() );
        }

        if ( obj.hasSourcePublisherType() ) {
            setSourcePublisherType( obj.getSourcePublisherType() );
        }

        if ( obj.hasSourcePublisherSubtype() ) {
            setSourcePublisherSubtype( obj.getSourcePublisherSubtype() );
        }

        if ( obj.hasSourceDateFound() ) {
            setSourceDateFound( obj.getSourceDateFound() );
        }

        if ( obj.hasSourceLastUpdated() ) {
            setSourceLastUpdated( obj.getSourceLastUpdated() );
        }

        if ( obj.hasSourceLastPublished() ) {
            setSourceLastPublished( obj.getSourceLastPublished() );
        }

        if ( obj.hasSourceLastPosted() ) {
            setSourceLastPosted( obj.getSourceLastPosted() );
        }

        if ( obj.hasSourceUpdateInterval() ) {
            setSourceUpdateInterval( obj.getSourceUpdateInterval() );
        }

        if ( obj.hasSourceHttpStatus() ) {
            setSourceHttpStatus( obj.getSourceHttpStatus() );
        }

        if ( obj.hasSourceSpamProbability() ) {
            setSourceSpamProbability( obj.getSourceSpamProbability() );
        }

        if ( obj.hasSourceContentLength() ) {
            setSourceContentLength( obj.getSourceContentLength() );
        }

        if ( obj.hasSourceContentChecksum() ) {
            setSourceContentChecksum( obj.getSourceContentChecksum() );
        }

        if ( obj.hasSourceAssignedTags() ) {
            setSourceAssignedTags( obj.getSourceAssignedTags() );
        }

        if ( obj.hasSourceSettingUpdateStrategy() ) {
            setSourceSettingUpdateStrategy( obj.getSourceSettingUpdateStrategy() );
        }

        if ( obj.hasSourceSettingIndexStrategy() ) {
            setSourceSettingIndexStrategy( obj.getSourceSettingIndexStrategy() );
        }

        if ( obj.hasSourceSettingAuthorPolicy() ) {
            setSourceSettingAuthorPolicy( obj.getSourceSettingAuthorPolicy() );
        }

        if ( obj.hasSourcePshbHub() ) {
            setSourcePshbHub( obj.getSourcePshbHub() );
        }

        if ( obj.hasSourcePshbTopic() ) {
            setSourcePshbTopic( obj.getSourcePshbTopic() );
        }

        if ( obj.hasSourcePshbLastPosted() ) {
            setSourcePshbLastPosted( obj.getSourcePshbLastPosted() );
        }

        if ( obj.hasSourcePshbLeaseExpires() ) {
            setSourcePshbLeaseExpires( obj.getSourcePshbLeaseExpires() );
        }

        if ( obj.hasSourceUserInteractions() ) {
            setSourceUserInteractions( obj.getSourceUserInteractions() );
        }

        if ( obj.hasSourceSettingMinimumContentMetadataScore() ) {
            setSourceSettingMinimumContentMetadataScore( obj.getSourceSettingMinimumContentMetadataScore() );
        }

        if ( obj.hasSourceNextUpdate() ) {
            setSourceNextUpdate( obj.getSourceNextUpdate() );
        }

        if ( obj.hasSourceTitle() ) {
            setSourceTitle( obj.getSourceTitle() );
        }

        if ( obj.hasSourceDescription() ) {
            setSourceDescription( obj.getSourceDescription() );
        }

        if ( obj.hasSourceHandle() ) {
            setSourceHandle( obj.getSourceHandle() );
        }

        if ( obj.hasSourceFavorites() ) {
            setSourceFavorites( obj.getSourceFavorites() );
        }

        if ( obj.hasSourceFollowers() ) {
            setSourceFollowers( obj.getSourceFollowers() );
        }

        if ( obj.hasSourceFollowing() ) {
            setSourceFollowing( obj.getSourceFollowing() );
        }

        if ( obj.hasSourceVerified() ) {
            setSourceVerified( obj.getSourceVerified() );
        }

        if ( obj.hasSourceProfiles() ) {
            setSourceProfiles( obj.getSourceProfiles() );
        }

        if ( obj.hasSourceLocation() ) {
            setSourceLocation( obj.getSourceLocation() );
        }

        if ( obj.hasSourceImageSrc() ) {
            setSourceImageSrc( obj.getSourceImageSrc() );
        }

        if ( obj.hasSourceImageWidth() ) {
            setSourceImageWidth( obj.getSourceImageWidth() );
        }

        if ( obj.hasSourceImageHeight() ) {
            setSourceImageHeight( obj.getSourceImageHeight() );
        }

        if ( obj.hasSourceTelephone() ) {
            setSourceTelephone( obj.getSourceTelephone() );
        }

        if ( obj.hasSourceTags() ) {
            setSourceTags( obj.getSourceTags() );
        }

        if ( obj.hasSourceRatingValue() ) {
            setSourceRatingValue( obj.getSourceRatingValue() );
        }

        if ( obj.hasSourceFaviconSrc() ) {
            setSourceFaviconSrc( obj.getSourceFaviconSrc() );
        }

        if ( obj.hasSourceFaviconWidth() ) {
            setSourceFaviconWidth( obj.getSourceFaviconWidth() );
        }

        if ( obj.hasSourceFaviconHeight() ) {
            setSourceFaviconHeight( obj.getSourceFaviconHeight() );
        }

        if ( obj.hasSourceCreated() ) {
            setSourceCreated( obj.getSourceCreated() );
        }

        if ( obj.hasSourceLikes() ) {
            setSourceLikes( obj.getSourceLikes() );
        }

        if ( obj.hasSourceRelatedTags() ) {
            setSourceRelatedTags( obj.getSourceRelatedTags() );
        }

        if ( obj.hasSourceParsedPosts() ) {
            setSourceParsedPosts( obj.getSourceParsedPosts() );
        }

        if ( obj.hasSourceParsedPostsMax() ) {
            setSourceParsedPostsMax( obj.getSourceParsedPostsMax() );
        }

        if ( obj.hasSourceFeedHref() ) {
            setSourceFeedHref( obj.getSourceFeedHref() );
        }

        if ( obj.hasSourceFeedTitle() ) {
            setSourceFeedTitle( obj.getSourceFeedTitle() );
        }

        if ( obj.hasSourceFeedFormat() ) {
            setSourceFeedFormat( obj.getSourceFeedFormat() );
        }

        if ( obj.hasPermalink() ) {
            setPermalink( obj.getPermalink() );
        }

        if ( obj.hasIdentifier() ) {
            setIdentifier( obj.getIdentifier() );
        }

        if ( obj.hasPermalinkRedirect() ) {
            setPermalinkRedirect( obj.getPermalinkRedirect() );
        }

        if ( obj.hasPermalinkRedirectDomain() ) {
            setPermalinkRedirectDomain( obj.getPermalinkRedirectDomain() );
        }

        if ( obj.hasPermalinkRedirectSite() ) {
            setPermalinkRedirectSite( obj.getPermalinkRedirectSite() );
        }

        if ( obj.hasLink() ) {
            setLink( obj.getLink() );
        }

        if ( obj.hasLinkDomain() ) {
            setLinkDomain( obj.getLinkDomain() );
        }

        if ( obj.hasLinkSite() ) {
            setLinkSite( obj.getLinkSite() );
        }

        if ( obj.hasShortlink() ) {
            setShortlink( obj.getShortlink() );
        }

        if ( obj.hasCanonical() ) {
            setCanonical( obj.getCanonical() );
        }

        if ( obj.hasDomain() ) {
            setDomain( obj.getDomain() );
        }

        if ( obj.hasSite() ) {
            setSite( obj.getSite() );
        }

        if ( obj.hasMain() ) {
            setMain( obj.getMain() );
        }

        if ( obj.hasMainLength() ) {
            setMainLength( obj.getMainLength() );
        }

        if ( obj.hasMainChecksum() ) {
            setMainChecksum( obj.getMainChecksum() );
        }

        if ( obj.hasMainAuthoritative() ) {
            setMainAuthoritative( obj.getMainAuthoritative() );
        }

        if ( obj.hasMainFormat() ) {
            setMainFormat( obj.getMainFormat() );
        }

        if ( obj.hasExtract() ) {
            setExtract( obj.getExtract() );
        }

        if ( obj.hasExtractLength() ) {
            setExtractLength( obj.getExtractLength() );
        }

        if ( obj.hasExtractChecksum() ) {
            setExtractChecksum( obj.getExtractChecksum() );
        }

        if ( obj.hasSummaryText() ) {
            setSummaryText( obj.getSummaryText() );
        }

        if ( obj.hasTitle() ) {
            setTitle( obj.getTitle() );
        }

        if ( obj.hasPublisher() ) {
            setPublisher( obj.getPublisher() );
        }

        if ( obj.hasSection() ) {
            setSection( obj.getSection() );
        }

        if ( obj.hasDescription() ) {
            setDescription( obj.getDescription() );
        }

        if ( obj.hasTags() ) {
            setTags( obj.getTags() );
        }

        if ( obj.hasMentions() ) {
            setMentions( obj.getMentions() );
        }

        if ( obj.hasLinks() ) {
            setLinks( obj.getLinks() );
        }

        if ( obj.hasPublished() ) {
            setPublished( obj.getPublished() );
        }

        if ( obj.hasModified() ) {
            setModified( obj.getModified() );
        }

        if ( obj.hasPublishedPartial() ) {
            setPublishedPartial( obj.getPublishedPartial() );
        }

        if ( obj.hasModifiedPartial() ) {
            setModifiedPartial( obj.getModifiedPartial() );
        }

        if ( obj.hasAuthorName() ) {
            setAuthorName( obj.getAuthorName() );
        }

        if ( obj.hasAuthorLink() ) {
            setAuthorLink( obj.getAuthorLink() );
        }

        if ( obj.hasAuthorHandle() ) {
            setAuthorHandle( obj.getAuthorHandle() );
        }

        if ( obj.hasAuthorFollowers() ) {
            setAuthorFollowers( obj.getAuthorFollowers() );
        }

        if ( obj.hasAuthorLocation() ) {
            setAuthorLocation( obj.getAuthorLocation() );
        }

        if ( obj.hasAuthorAvatarImg() ) {
            setAuthorAvatarImg( obj.getAuthorAvatarImg() );
        }

        if ( obj.hasAuthorAvatarWidth() ) {
            setAuthorAvatarWidth( obj.getAuthorAvatarWidth() );
        }

        if ( obj.hasAuthorAvatarHeight() ) {
            setAuthorAvatarHeight( obj.getAuthorAvatarHeight() );
        }

        if ( obj.hasAuthorTwitterHandle() ) {
            setAuthorTwitterHandle( obj.getAuthorTwitterHandle() );
        }

        if ( obj.hasAuthorTwitterUserid() ) {
            setAuthorTwitterUserid( obj.getAuthorTwitterUserid() );
        }

        if ( obj.hasAuthorUserId() ) {
            setAuthorUserId( obj.getAuthorUserId() );
        }

        if ( obj.hasAuthorGender() ) {
            setAuthorGender( obj.getAuthorGender() );
        }

        if ( obj.hasGeoLocation() ) {
            setGeoLocation( obj.getGeoLocation() );
        }

        if ( obj.hasGeoLocationId() ) {
            setGeoLocationId( obj.getGeoLocationId() );
        }

        if ( obj.hasGeoFeaturename() ) {
            setGeoFeaturename( obj.getGeoFeaturename() );
        }

        if ( obj.hasGeoPoint() ) {
            setGeoPoint( obj.getGeoPoint() );
        }

        if ( obj.hasGeoBox() ) {
            setGeoBox( obj.getGeoBox() );
        }

        if ( obj.hasGeoNameId() ) {
            setGeoNameId( obj.getGeoNameId() );
        }

        if ( obj.hasGeoName() ) {
            setGeoName( obj.getGeoName() );
        }

        if ( obj.hasGeoCountry() ) {
            setGeoCountry( obj.getGeoCountry() );
        }

        if ( obj.hasGeoState() ) {
            setGeoState( obj.getGeoState() );
        }

        if ( obj.hasGeoCity() ) {
            setGeoCity( obj.getGeoCity() );
        }

        if ( obj.hasGeoMethod() ) {
            setGeoMethod( obj.getGeoMethod() );
        }

        if ( obj.hasRatingValue() ) {
            setRatingValue( obj.getRatingValue() );
        }

        if ( obj.hasFaviconSrc() ) {
            setFaviconSrc( obj.getFaviconSrc() );
        }

        if ( obj.hasFaviconWidth() ) {
            setFaviconWidth( obj.getFaviconWidth() );
        }

        if ( obj.hasFaviconHeight() ) {
            setFaviconHeight( obj.getFaviconHeight() );
        }

        if ( obj.hasImageSrc() ) {
            setImageSrc( obj.getImageSrc() );
        }

        if ( obj.hasImageWidth() ) {
            setImageWidth( obj.getImageWidth() );
        }

        if ( obj.hasImageHeight() ) {
            setImageHeight( obj.getImageHeight() );
        }

        if ( obj.hasShared() ) {
            setShared( obj.getShared() );
        }

        if ( obj.hasSharedType() ) {
            setSharedType( obj.getSharedType() );
        }

        if ( obj.hasSharedProfileLink() ) {
            setSharedProfileLink( obj.getSharedProfileLink() );
        }

        if ( obj.hasSharedProfileTitle() ) {
            setSharedProfileTitle( obj.getSharedProfileTitle() );
        }

        if ( obj.hasSharedAuthorLink() ) {
            setSharedAuthorLink( obj.getSharedAuthorLink() );
        }

        if ( obj.hasSharedAuthorName() ) {
            setSharedAuthorName( obj.getSharedAuthorName() );
        }

        if ( obj.hasSharedAuthorUserId() ) {
            setSharedAuthorUserId( obj.getSharedAuthorUserId() );
        }

        if ( obj.hasSharedIdentifier() ) {
            setSharedIdentifier( obj.getSharedIdentifier() );
        }

        if ( obj.hasSharedPermalink() ) {
            setSharedPermalink( obj.getSharedPermalink() );
        }

        if ( obj.hasSharedAuthorHandle() ) {
            setSharedAuthorHandle( obj.getSharedAuthorHandle() );
        }

        if ( obj.hasReplied() ) {
            setReplied( obj.getReplied() );
        }

        if ( obj.hasRepliedProfileLink() ) {
            setRepliedProfileLink( obj.getRepliedProfileLink() );
        }

        if ( obj.hasRepliedProfileTitle() ) {
            setRepliedProfileTitle( obj.getRepliedProfileTitle() );
        }

        if ( obj.hasCard() ) {
            setCard( obj.getCard() );
        }

        if ( obj.hasVideoPlayer() ) {
            setVideoPlayer( obj.getVideoPlayer() );
        }

        if ( obj.hasVideoPlayerWidth() ) {
            setVideoPlayerWidth( obj.getVideoPlayerWidth() );
        }

        if ( obj.hasVideoPlayerHeight() ) {
            setVideoPlayerHeight( obj.getVideoPlayerHeight() );
        }

        if ( obj.hasType() ) {
            setType( obj.getType() );
        }

        if ( obj.hasSentiment() ) {
            setSentiment( obj.getSentiment() );
        }

        if ( obj.hasLang() ) {
            setLang( obj.getLang() );
        }

        if ( obj.hasCategories() ) {
            setCategories( obj.getCategories() );
        }

        if ( obj.hasDuplicates() ) {
            setDuplicates( obj.getDuplicates() );
        }

        if ( obj.hasDuplicatesCount() ) {
            setDuplicatesCount( obj.getDuplicatesCount() );
        }

        if ( obj.hasClassifications() ) {
            setClassifications( obj.getClassifications() );
        }

        if ( obj.hasParentHashcode() ) {
            setParentHashcode( obj.getParentHashcode() );
        }

        if ( obj.hasParentPermalink() ) {
            setParentPermalink( obj.getParentPermalink() );
        }

        if ( obj.hasParentTitle() ) {
            setParentTitle( obj.getParentTitle() );
        }

        if ( obj.hasParentLang() ) {
            setParentLang( obj.getParentLang() );
        }

        if ( obj.hasParentResource() ) {
            setParentResource( obj.getParentResource() );
        }

        if ( obj.hasLikes() ) {
            setLikes( obj.getLikes() );
        }

        if ( obj.hasDislikes() ) {
            setDislikes( obj.getDislikes() );
        }

        if ( obj.hasComments() ) {
            setComments( obj.getComments() );
        }

        if ( obj.hasViews() ) {
            setViews( obj.getViews() );
        }

        if ( obj.hasMetadataScore() ) {
            setMetadataScore( obj.getMetadataScore() );
        }

        if ( obj.hasShares() ) {
            setShares( obj.getShares() );
        }

        if ( obj.hasMetadataUpdates() ) {
            setMetadataUpdates( obj.getMetadataUpdates() );
        }

        if ( obj.hasPinned() ) {
            setPinned( obj.getPinned() );
        }

    }

    /**
      * Copy the fields from the given source to the current object but only if the
      * current object doesn't have those fields.
      */
    public void merge( BaseContent obj ) {

        if ( ! hasBucket() && obj.hasBucket() ) {
            setBucket( obj.getBucket() );
        }

        if ( ! hasSequence() && obj.hasSequence() ) {
            setSequence( obj.getSequence() );
        }

        if ( ! hasSequenceRange() && obj.hasSequenceRange() ) {
            setSequenceRange( obj.getSequenceRange() );
        }

        if ( ! hasHashcode() && obj.hasHashcode() ) {
            setHashcode( obj.getHashcode() );
        }

        if ( hasHashcode() && getHashcode() == null &&
            obj.hasHashcode() && obj.getHashcode() != null ) {
            setHashcode( obj.getHashcode() );
        }

        if ( ! hasResource() && obj.hasResource() ) {
            setResource( obj.getResource() );
        }

        if ( hasResource() && getResource() == null &&
            obj.hasResource() && obj.getResource() != null ) {
            setResource( obj.getResource() );
        }

        if ( ! hasDateFound() && obj.hasDateFound() ) {
            setDateFound( obj.getDateFound() );
        }

        if ( indexMethod == null && obj.hasIndexMethod() && obj.getIndexMethod() != null ) {
            setIndexMethod( obj.getIndexMethod() );
        }

        if ( detectionMethod == null && obj.hasDetectionMethod() && obj.getDetectionMethod() != null ) {
            setDetectionMethod( obj.getDetectionMethod() );
        }

        if ( ! hasHtml() && obj.hasHtml() ) {
            setHtml( obj.getHtml() );
        }

        if ( hasHtml() && getHtml() == null &&
            obj.hasHtml() && obj.getHtml() != null ) {
            setHtml( obj.getHtml() );
        }

        if ( ! hasHtmlLength() && obj.hasHtmlLength() ) {
            setHtmlLength( obj.getHtmlLength() );
        }

        if ( ! hasHtmlChecksum() && obj.hasHtmlChecksum() ) {
            setHtmlChecksum( obj.getHtmlChecksum() );
        }

        if ( hasHtmlChecksum() && getHtmlChecksum() == null &&
            obj.hasHtmlChecksum() && obj.getHtmlChecksum() != null ) {
            setHtmlChecksum( obj.getHtmlChecksum() );
        }

        if ( ! hasHtmlBlob() && obj.hasHtmlBlob() ) {
            setHtmlBlob( obj.getHtmlBlob() );
        }

        if ( ! hasHtmlBlobLength() && obj.hasHtmlBlobLength() ) {
            setHtmlBlobLength( obj.getHtmlBlobLength() );
        }

        if ( ! hasHtmlBlobChecksum() && obj.hasHtmlBlobChecksum() ) {
            setHtmlBlobChecksum( obj.getHtmlBlobChecksum() );
        }

        if ( hasHtmlBlobChecksum() && getHtmlBlobChecksum() == null &&
            obj.hasHtmlBlobChecksum() && obj.getHtmlBlobChecksum() != null ) {
            setHtmlBlobChecksum( obj.getHtmlBlobChecksum() );
        }

        if ( ! hasExtractBlob() && obj.hasExtractBlob() ) {
            setExtractBlob( obj.getExtractBlob() );
        }

        if ( ! hasVersion() && obj.hasVersion() ) {
            setVersion( obj.getVersion() );
        }

        if ( hasVersion() && getVersion() == null &&
            obj.hasVersion() && obj.getVersion() != null ) {
            setVersion( obj.getVersion() );
        }

        if ( ! hasLastUpdated() && obj.hasLastUpdated() ) {
            setLastUpdated( obj.getLastUpdated() );
        }

        if ( ! hasSourceHashcode() && obj.hasSourceHashcode() ) {
            setSourceHashcode( obj.getSourceHashcode() );
        }

        if ( hasSourceHashcode() && getSourceHashcode() == null &&
            obj.hasSourceHashcode() && obj.getSourceHashcode() != null ) {
            setSourceHashcode( obj.getSourceHashcode() );
        }

        if ( ! hasSourceResource() && obj.hasSourceResource() ) {
            setSourceResource( obj.getSourceResource() );
        }

        if ( hasSourceResource() && getSourceResource() == null &&
            obj.hasSourceResource() && obj.getSourceResource() != null ) {
            setSourceResource( obj.getSourceResource() );
        }

        if ( ! hasSourceLink() && obj.hasSourceLink() ) {
            setSourceLink( obj.getSourceLink() );
        }

        if ( hasSourceLink() && getSourceLink() == null &&
            obj.hasSourceLink() && obj.getSourceLink() != null ) {
            setSourceLink( obj.getSourceLink() );
        }

        if ( sourcePublisherType == null && obj.hasSourcePublisherType() && obj.getSourcePublisherType() != null ) {
            setSourcePublisherType( obj.getSourcePublisherType() );
        }

        if ( ! hasSourcePublisherSubtype() && obj.hasSourcePublisherSubtype() ) {
            setSourcePublisherSubtype( obj.getSourcePublisherSubtype() );
        }

        if ( hasSourcePublisherSubtype() && getSourcePublisherSubtype() == null &&
            obj.hasSourcePublisherSubtype() && obj.getSourcePublisherSubtype() != null ) {
            setSourcePublisherSubtype( obj.getSourcePublisherSubtype() );
        }

        if ( ! hasSourceDateFound() && obj.hasSourceDateFound() ) {
            setSourceDateFound( obj.getSourceDateFound() );
        }

        if ( ! hasSourceLastUpdated() && obj.hasSourceLastUpdated() ) {
            setSourceLastUpdated( obj.getSourceLastUpdated() );
        }

        if ( ! hasSourceLastPublished() && obj.hasSourceLastPublished() ) {
            setSourceLastPublished( obj.getSourceLastPublished() );
        }

        if ( ! hasSourceLastPosted() && obj.hasSourceLastPosted() ) {
            setSourceLastPosted( obj.getSourceLastPosted() );
        }

        if ( ! hasSourceUpdateInterval() && obj.hasSourceUpdateInterval() ) {
            setSourceUpdateInterval( obj.getSourceUpdateInterval() );
        }

        if ( ! hasSourceHttpStatus() && obj.hasSourceHttpStatus() ) {
            setSourceHttpStatus( obj.getSourceHttpStatus() );
        }

        if ( ! hasSourceSpamProbability() && obj.hasSourceSpamProbability() ) {
            setSourceSpamProbability( obj.getSourceSpamProbability() );
        }

        if ( ! hasSourceContentLength() && obj.hasSourceContentLength() ) {
            setSourceContentLength( obj.getSourceContentLength() );
        }

        if ( ! hasSourceContentChecksum() && obj.hasSourceContentChecksum() ) {
            setSourceContentChecksum( obj.getSourceContentChecksum() );
        }

        if ( hasSourceContentChecksum() && getSourceContentChecksum() == null &&
            obj.hasSourceContentChecksum() && obj.getSourceContentChecksum() != null ) {
            setSourceContentChecksum( obj.getSourceContentChecksum() );
        }

        if ( ! hasSourceAssignedTags() && obj.hasSourceAssignedTags() ) {
            setSourceAssignedTags( obj.getSourceAssignedTags() );
        }

        if ( sourceSettingUpdateStrategy == null && obj.hasSourceSettingUpdateStrategy() && obj.getSourceSettingUpdateStrategy() != null ) {
            setSourceSettingUpdateStrategy( obj.getSourceSettingUpdateStrategy() );
        }

        if ( sourceSettingIndexStrategy == null && obj.hasSourceSettingIndexStrategy() && obj.getSourceSettingIndexStrategy() != null ) {
            setSourceSettingIndexStrategy( obj.getSourceSettingIndexStrategy() );
        }

        if ( sourceSettingAuthorPolicy == null && obj.hasSourceSettingAuthorPolicy() && obj.getSourceSettingAuthorPolicy() != null ) {
            setSourceSettingAuthorPolicy( obj.getSourceSettingAuthorPolicy() );
        }

        if ( ! hasSourcePshbHub() && obj.hasSourcePshbHub() ) {
            setSourcePshbHub( obj.getSourcePshbHub() );
        }

        if ( hasSourcePshbHub() && getSourcePshbHub() == null &&
            obj.hasSourcePshbHub() && obj.getSourcePshbHub() != null ) {
            setSourcePshbHub( obj.getSourcePshbHub() );
        }

        if ( ! hasSourcePshbTopic() && obj.hasSourcePshbTopic() ) {
            setSourcePshbTopic( obj.getSourcePshbTopic() );
        }

        if ( hasSourcePshbTopic() && getSourcePshbTopic() == null &&
            obj.hasSourcePshbTopic() && obj.getSourcePshbTopic() != null ) {
            setSourcePshbTopic( obj.getSourcePshbTopic() );
        }

        if ( ! hasSourcePshbLastPosted() && obj.hasSourcePshbLastPosted() ) {
            setSourcePshbLastPosted( obj.getSourcePshbLastPosted() );
        }

        if ( ! hasSourcePshbLeaseExpires() && obj.hasSourcePshbLeaseExpires() ) {
            setSourcePshbLeaseExpires( obj.getSourcePshbLeaseExpires() );
        }

        if ( ! hasSourceUserInteractions() && obj.hasSourceUserInteractions() ) {
            setSourceUserInteractions( obj.getSourceUserInteractions() );
        }

        if ( ! hasSourceSettingMinimumContentMetadataScore() && obj.hasSourceSettingMinimumContentMetadataScore() ) {
            setSourceSettingMinimumContentMetadataScore( obj.getSourceSettingMinimumContentMetadataScore() );
        }

        if ( ! hasSourceNextUpdate() && obj.hasSourceNextUpdate() ) {
            setSourceNextUpdate( obj.getSourceNextUpdate() );
        }

        if ( ! hasSourceTitle() && obj.hasSourceTitle() ) {
            setSourceTitle( obj.getSourceTitle() );
        }

        if ( hasSourceTitle() && getSourceTitle() == null &&
            obj.hasSourceTitle() && obj.getSourceTitle() != null ) {
            setSourceTitle( obj.getSourceTitle() );
        }

        if ( ! hasSourceDescription() && obj.hasSourceDescription() ) {
            setSourceDescription( obj.getSourceDescription() );
        }

        if ( hasSourceDescription() && getSourceDescription() == null &&
            obj.hasSourceDescription() && obj.getSourceDescription() != null ) {
            setSourceDescription( obj.getSourceDescription() );
        }

        if ( ! hasSourceHandle() && obj.hasSourceHandle() ) {
            setSourceHandle( obj.getSourceHandle() );
        }

        if ( hasSourceHandle() && getSourceHandle() == null &&
            obj.hasSourceHandle() && obj.getSourceHandle() != null ) {
            setSourceHandle( obj.getSourceHandle() );
        }

        if ( ! hasSourceFavorites() && obj.hasSourceFavorites() ) {
            setSourceFavorites( obj.getSourceFavorites() );
        }

        if ( ! hasSourceFollowers() && obj.hasSourceFollowers() ) {
            setSourceFollowers( obj.getSourceFollowers() );
        }

        if ( ! hasSourceFollowing() && obj.hasSourceFollowing() ) {
            setSourceFollowing( obj.getSourceFollowing() );
        }

        if ( ! hasSourceVerified() && obj.hasSourceVerified() ) {
            setSourceVerified( obj.getSourceVerified() );
        }

        if ( ! hasSourceProfiles() && obj.hasSourceProfiles() ) {
            setSourceProfiles( obj.getSourceProfiles() );
        }

        if ( ! hasSourceLocation() && obj.hasSourceLocation() ) {
            setSourceLocation( obj.getSourceLocation() );
        }

        if ( hasSourceLocation() && getSourceLocation() == null &&
            obj.hasSourceLocation() && obj.getSourceLocation() != null ) {
            setSourceLocation( obj.getSourceLocation() );
        }

        if ( ! hasSourceImageSrc() && obj.hasSourceImageSrc() ) {
            setSourceImageSrc( obj.getSourceImageSrc() );
        }

        if ( hasSourceImageSrc() && getSourceImageSrc() == null &&
            obj.hasSourceImageSrc() && obj.getSourceImageSrc() != null ) {
            setSourceImageSrc( obj.getSourceImageSrc() );
        }

        if ( ! hasSourceImageWidth() && obj.hasSourceImageWidth() ) {
            setSourceImageWidth( obj.getSourceImageWidth() );
        }

        if ( ! hasSourceImageHeight() && obj.hasSourceImageHeight() ) {
            setSourceImageHeight( obj.getSourceImageHeight() );
        }

        if ( ! hasSourceTelephone() && obj.hasSourceTelephone() ) {
            setSourceTelephone( obj.getSourceTelephone() );
        }

        if ( hasSourceTelephone() && getSourceTelephone() == null &&
            obj.hasSourceTelephone() && obj.getSourceTelephone() != null ) {
            setSourceTelephone( obj.getSourceTelephone() );
        }

        if ( ! hasSourceTags() && obj.hasSourceTags() ) {
            setSourceTags( obj.getSourceTags() );
        }

        if ( ! hasSourceRatingValue() && obj.hasSourceRatingValue() ) {
            setSourceRatingValue( obj.getSourceRatingValue() );
        }

        if ( hasSourceRatingValue() && getSourceRatingValue() == null &&
            obj.hasSourceRatingValue() && obj.getSourceRatingValue() != null ) {
            setSourceRatingValue( obj.getSourceRatingValue() );
        }

        if ( ! hasSourceFaviconSrc() && obj.hasSourceFaviconSrc() ) {
            setSourceFaviconSrc( obj.getSourceFaviconSrc() );
        }

        if ( hasSourceFaviconSrc() && getSourceFaviconSrc() == null &&
            obj.hasSourceFaviconSrc() && obj.getSourceFaviconSrc() != null ) {
            setSourceFaviconSrc( obj.getSourceFaviconSrc() );
        }

        if ( ! hasSourceFaviconWidth() && obj.hasSourceFaviconWidth() ) {
            setSourceFaviconWidth( obj.getSourceFaviconWidth() );
        }

        if ( ! hasSourceFaviconHeight() && obj.hasSourceFaviconHeight() ) {
            setSourceFaviconHeight( obj.getSourceFaviconHeight() );
        }

        if ( ! hasSourceCreated() && obj.hasSourceCreated() ) {
            setSourceCreated( obj.getSourceCreated() );
        }

        if ( ! hasSourceLikes() && obj.hasSourceLikes() ) {
            setSourceLikes( obj.getSourceLikes() );
        }

        if ( ! hasSourceRelatedTags() && obj.hasSourceRelatedTags() ) {
            setSourceRelatedTags( obj.getSourceRelatedTags() );
        }

        if ( ! hasSourceParsedPosts() && obj.hasSourceParsedPosts() ) {
            setSourceParsedPosts( obj.getSourceParsedPosts() );
        }

        if ( ! hasSourceParsedPostsMax() && obj.hasSourceParsedPostsMax() ) {
            setSourceParsedPostsMax( obj.getSourceParsedPostsMax() );
        }

        if ( ! hasSourceFeedHref() && obj.hasSourceFeedHref() ) {
            setSourceFeedHref( obj.getSourceFeedHref() );
        }

        if ( hasSourceFeedHref() && getSourceFeedHref() == null &&
            obj.hasSourceFeedHref() && obj.getSourceFeedHref() != null ) {
            setSourceFeedHref( obj.getSourceFeedHref() );
        }

        if ( ! hasSourceFeedTitle() && obj.hasSourceFeedTitle() ) {
            setSourceFeedTitle( obj.getSourceFeedTitle() );
        }

        if ( hasSourceFeedTitle() && getSourceFeedTitle() == null &&
            obj.hasSourceFeedTitle() && obj.getSourceFeedTitle() != null ) {
            setSourceFeedTitle( obj.getSourceFeedTitle() );
        }

        if ( sourceFeedFormat == null && obj.hasSourceFeedFormat() && obj.getSourceFeedFormat() != null ) {
            setSourceFeedFormat( obj.getSourceFeedFormat() );
        }

        if ( ! hasPermalink() && obj.hasPermalink() ) {
            setPermalink( obj.getPermalink() );
        }

        if ( hasPermalink() && getPermalink() == null &&
            obj.hasPermalink() && obj.getPermalink() != null ) {
            setPermalink( obj.getPermalink() );
        }

        if ( ! hasIdentifier() && obj.hasIdentifier() ) {
            setIdentifier( obj.getIdentifier() );
        }

        if ( hasIdentifier() && getIdentifier() == null &&
            obj.hasIdentifier() && obj.getIdentifier() != null ) {
            setIdentifier( obj.getIdentifier() );
        }

        if ( ! hasPermalinkRedirect() && obj.hasPermalinkRedirect() ) {
            setPermalinkRedirect( obj.getPermalinkRedirect() );
        }

        if ( hasPermalinkRedirect() && getPermalinkRedirect() == null &&
            obj.hasPermalinkRedirect() && obj.getPermalinkRedirect() != null ) {
            setPermalinkRedirect( obj.getPermalinkRedirect() );
        }

        if ( ! hasPermalinkRedirectDomain() && obj.hasPermalinkRedirectDomain() ) {
            setPermalinkRedirectDomain( obj.getPermalinkRedirectDomain() );
        }

        if ( hasPermalinkRedirectDomain() && getPermalinkRedirectDomain() == null &&
            obj.hasPermalinkRedirectDomain() && obj.getPermalinkRedirectDomain() != null ) {
            setPermalinkRedirectDomain( obj.getPermalinkRedirectDomain() );
        }

        if ( ! hasPermalinkRedirectSite() && obj.hasPermalinkRedirectSite() ) {
            setPermalinkRedirectSite( obj.getPermalinkRedirectSite() );
        }

        if ( hasPermalinkRedirectSite() && getPermalinkRedirectSite() == null &&
            obj.hasPermalinkRedirectSite() && obj.getPermalinkRedirectSite() != null ) {
            setPermalinkRedirectSite( obj.getPermalinkRedirectSite() );
        }

        if ( ! hasLink() && obj.hasLink() ) {
            setLink( obj.getLink() );
        }

        if ( hasLink() && getLink() == null &&
            obj.hasLink() && obj.getLink() != null ) {
            setLink( obj.getLink() );
        }

        if ( ! hasLinkDomain() && obj.hasLinkDomain() ) {
            setLinkDomain( obj.getLinkDomain() );
        }

        if ( hasLinkDomain() && getLinkDomain() == null &&
            obj.hasLinkDomain() && obj.getLinkDomain() != null ) {
            setLinkDomain( obj.getLinkDomain() );
        }

        if ( ! hasLinkSite() && obj.hasLinkSite() ) {
            setLinkSite( obj.getLinkSite() );
        }

        if ( hasLinkSite() && getLinkSite() == null &&
            obj.hasLinkSite() && obj.getLinkSite() != null ) {
            setLinkSite( obj.getLinkSite() );
        }

        if ( ! hasShortlink() && obj.hasShortlink() ) {
            setShortlink( obj.getShortlink() );
        }

        if ( hasShortlink() && getShortlink() == null &&
            obj.hasShortlink() && obj.getShortlink() != null ) {
            setShortlink( obj.getShortlink() );
        }

        if ( ! hasCanonical() && obj.hasCanonical() ) {
            setCanonical( obj.getCanonical() );
        }

        if ( hasCanonical() && getCanonical() == null &&
            obj.hasCanonical() && obj.getCanonical() != null ) {
            setCanonical( obj.getCanonical() );
        }

        if ( ! hasDomain() && obj.hasDomain() ) {
            setDomain( obj.getDomain() );
        }

        if ( hasDomain() && getDomain() == null &&
            obj.hasDomain() && obj.getDomain() != null ) {
            setDomain( obj.getDomain() );
        }

        if ( ! hasSite() && obj.hasSite() ) {
            setSite( obj.getSite() );
        }

        if ( hasSite() && getSite() == null &&
            obj.hasSite() && obj.getSite() != null ) {
            setSite( obj.getSite() );
        }

        if ( ! hasMain() && obj.hasMain() ) {
            setMain( obj.getMain() );
        }

        if ( hasMain() && getMain() == null &&
            obj.hasMain() && obj.getMain() != null ) {
            setMain( obj.getMain() );
        }

        if ( ! hasMainLength() && obj.hasMainLength() ) {
            setMainLength( obj.getMainLength() );
        }

        if ( ! hasMainChecksum() && obj.hasMainChecksum() ) {
            setMainChecksum( obj.getMainChecksum() );
        }

        if ( hasMainChecksum() && getMainChecksum() == null &&
            obj.hasMainChecksum() && obj.getMainChecksum() != null ) {
            setMainChecksum( obj.getMainChecksum() );
        }

        if ( ! hasMainAuthoritative() && obj.hasMainAuthoritative() ) {
            setMainAuthoritative( obj.getMainAuthoritative() );
        }

        if ( mainFormat == null && obj.hasMainFormat() && obj.getMainFormat() != null ) {
            setMainFormat( obj.getMainFormat() );
        }

        if ( ! hasExtract() && obj.hasExtract() ) {
            setExtract( obj.getExtract() );
        }

        if ( hasExtract() && getExtract() == null &&
            obj.hasExtract() && obj.getExtract() != null ) {
            setExtract( obj.getExtract() );
        }

        if ( ! hasExtractLength() && obj.hasExtractLength() ) {
            setExtractLength( obj.getExtractLength() );
        }

        if ( ! hasExtractChecksum() && obj.hasExtractChecksum() ) {
            setExtractChecksum( obj.getExtractChecksum() );
        }

        if ( hasExtractChecksum() && getExtractChecksum() == null &&
            obj.hasExtractChecksum() && obj.getExtractChecksum() != null ) {
            setExtractChecksum( obj.getExtractChecksum() );
        }

        if ( ! hasSummaryText() && obj.hasSummaryText() ) {
            setSummaryText( obj.getSummaryText() );
        }

        if ( hasSummaryText() && getSummaryText() == null &&
            obj.hasSummaryText() && obj.getSummaryText() != null ) {
            setSummaryText( obj.getSummaryText() );
        }

        if ( ! hasTitle() && obj.hasTitle() ) {
            setTitle( obj.getTitle() );
        }

        if ( hasTitle() && getTitle() == null &&
            obj.hasTitle() && obj.getTitle() != null ) {
            setTitle( obj.getTitle() );
        }

        if ( ! hasPublisher() && obj.hasPublisher() ) {
            setPublisher( obj.getPublisher() );
        }

        if ( hasPublisher() && getPublisher() == null &&
            obj.hasPublisher() && obj.getPublisher() != null ) {
            setPublisher( obj.getPublisher() );
        }

        if ( ! hasSection() && obj.hasSection() ) {
            setSection( obj.getSection() );
        }

        if ( hasSection() && getSection() == null &&
            obj.hasSection() && obj.getSection() != null ) {
            setSection( obj.getSection() );
        }

        if ( ! hasDescription() && obj.hasDescription() ) {
            setDescription( obj.getDescription() );
        }

        if ( hasDescription() && getDescription() == null &&
            obj.hasDescription() && obj.getDescription() != null ) {
            setDescription( obj.getDescription() );
        }

        if ( ! hasTags() && obj.hasTags() ) {
            setTags( obj.getTags() );
        }

        if ( ! hasMentions() && obj.hasMentions() ) {
            setMentions( obj.getMentions() );
        }

        if ( ! hasLinks() && obj.hasLinks() ) {
            setLinks( obj.getLinks() );
        }

        if ( ! hasPublished() && obj.hasPublished() ) {
            setPublished( obj.getPublished() );
        }

        if ( ! hasModified() && obj.hasModified() ) {
            setModified( obj.getModified() );
        }

        if ( ! hasPublishedPartial() && obj.hasPublishedPartial() ) {
            setPublishedPartial( obj.getPublishedPartial() );
        }

        if ( ! hasModifiedPartial() && obj.hasModifiedPartial() ) {
            setModifiedPartial( obj.getModifiedPartial() );
        }

        if ( ! hasAuthorName() && obj.hasAuthorName() ) {
            setAuthorName( obj.getAuthorName() );
        }

        if ( hasAuthorName() && getAuthorName() == null &&
            obj.hasAuthorName() && obj.getAuthorName() != null ) {
            setAuthorName( obj.getAuthorName() );
        }

        if ( ! hasAuthorLink() && obj.hasAuthorLink() ) {
            setAuthorLink( obj.getAuthorLink() );
        }

        if ( hasAuthorLink() && getAuthorLink() == null &&
            obj.hasAuthorLink() && obj.getAuthorLink() != null ) {
            setAuthorLink( obj.getAuthorLink() );
        }

        if ( ! hasAuthorHandle() && obj.hasAuthorHandle() ) {
            setAuthorHandle( obj.getAuthorHandle() );
        }

        if ( hasAuthorHandle() && getAuthorHandle() == null &&
            obj.hasAuthorHandle() && obj.getAuthorHandle() != null ) {
            setAuthorHandle( obj.getAuthorHandle() );
        }

        if ( ! hasAuthorFollowers() && obj.hasAuthorFollowers() ) {
            setAuthorFollowers( obj.getAuthorFollowers() );
        }

        if ( ! hasAuthorLocation() && obj.hasAuthorLocation() ) {
            setAuthorLocation( obj.getAuthorLocation() );
        }

        if ( hasAuthorLocation() && getAuthorLocation() == null &&
            obj.hasAuthorLocation() && obj.getAuthorLocation() != null ) {
            setAuthorLocation( obj.getAuthorLocation() );
        }

        if ( ! hasAuthorAvatarImg() && obj.hasAuthorAvatarImg() ) {
            setAuthorAvatarImg( obj.getAuthorAvatarImg() );
        }

        if ( hasAuthorAvatarImg() && getAuthorAvatarImg() == null &&
            obj.hasAuthorAvatarImg() && obj.getAuthorAvatarImg() != null ) {
            setAuthorAvatarImg( obj.getAuthorAvatarImg() );
        }

        if ( ! hasAuthorAvatarWidth() && obj.hasAuthorAvatarWidth() ) {
            setAuthorAvatarWidth( obj.getAuthorAvatarWidth() );
        }

        if ( ! hasAuthorAvatarHeight() && obj.hasAuthorAvatarHeight() ) {
            setAuthorAvatarHeight( obj.getAuthorAvatarHeight() );
        }

        if ( ! hasAuthorTwitterHandle() && obj.hasAuthorTwitterHandle() ) {
            setAuthorTwitterHandle( obj.getAuthorTwitterHandle() );
        }

        if ( hasAuthorTwitterHandle() && getAuthorTwitterHandle() == null &&
            obj.hasAuthorTwitterHandle() && obj.getAuthorTwitterHandle() != null ) {
            setAuthorTwitterHandle( obj.getAuthorTwitterHandle() );
        }

        if ( ! hasAuthorTwitterUserid() && obj.hasAuthorTwitterUserid() ) {
            setAuthorTwitterUserid( obj.getAuthorTwitterUserid() );
        }

        if ( hasAuthorTwitterUserid() && getAuthorTwitterUserid() == null &&
            obj.hasAuthorTwitterUserid() && obj.getAuthorTwitterUserid() != null ) {
            setAuthorTwitterUserid( obj.getAuthorTwitterUserid() );
        }

        if ( ! hasAuthorUserId() && obj.hasAuthorUserId() ) {
            setAuthorUserId( obj.getAuthorUserId() );
        }

        if ( hasAuthorUserId() && getAuthorUserId() == null &&
            obj.hasAuthorUserId() && obj.getAuthorUserId() != null ) {
            setAuthorUserId( obj.getAuthorUserId() );
        }

        if ( authorGender == null && obj.hasAuthorGender() && obj.getAuthorGender() != null ) {
            setAuthorGender( obj.getAuthorGender() );
        }

        if ( ! hasGeoLocation() && obj.hasGeoLocation() ) {
            setGeoLocation( obj.getGeoLocation() );
        }

        if ( hasGeoLocation() && getGeoLocation() == null &&
            obj.hasGeoLocation() && obj.getGeoLocation() != null ) {
            setGeoLocation( obj.getGeoLocation() );
        }

        if ( ! hasGeoLocationId() && obj.hasGeoLocationId() ) {
            setGeoLocationId( obj.getGeoLocationId() );
        }

        if ( hasGeoLocationId() && getGeoLocationId() == null &&
            obj.hasGeoLocationId() && obj.getGeoLocationId() != null ) {
            setGeoLocationId( obj.getGeoLocationId() );
        }

        if ( ! hasGeoFeaturename() && obj.hasGeoFeaturename() ) {
            setGeoFeaturename( obj.getGeoFeaturename() );
        }

        if ( hasGeoFeaturename() && getGeoFeaturename() == null &&
            obj.hasGeoFeaturename() && obj.getGeoFeaturename() != null ) {
            setGeoFeaturename( obj.getGeoFeaturename() );
        }

        if ( ! hasGeoPoint() && obj.hasGeoPoint() ) {
            setGeoPoint( obj.getGeoPoint() );
        }

        if ( hasGeoPoint() && getGeoPoint() == null &&
            obj.hasGeoPoint() && obj.getGeoPoint() != null ) {
            setGeoPoint( obj.getGeoPoint() );
        }

        if ( ! hasGeoBox() && obj.hasGeoBox() ) {
            setGeoBox( obj.getGeoBox() );
        }

        if ( hasGeoBox() && getGeoBox() == null &&
            obj.hasGeoBox() && obj.getGeoBox() != null ) {
            setGeoBox( obj.getGeoBox() );
        }

        if ( ! hasGeoNameId() && obj.hasGeoNameId() ) {
            setGeoNameId( obj.getGeoNameId() );
        }

        if ( hasGeoNameId() && getGeoNameId() == null &&
            obj.hasGeoNameId() && obj.getGeoNameId() != null ) {
            setGeoNameId( obj.getGeoNameId() );
        }

        if ( ! hasGeoName() && obj.hasGeoName() ) {
            setGeoName( obj.getGeoName() );
        }

        if ( hasGeoName() && getGeoName() == null &&
            obj.hasGeoName() && obj.getGeoName() != null ) {
            setGeoName( obj.getGeoName() );
        }

        if ( ! hasGeoCountry() && obj.hasGeoCountry() ) {
            setGeoCountry( obj.getGeoCountry() );
        }

        if ( hasGeoCountry() && getGeoCountry() == null &&
            obj.hasGeoCountry() && obj.getGeoCountry() != null ) {
            setGeoCountry( obj.getGeoCountry() );
        }

        if ( ! hasGeoState() && obj.hasGeoState() ) {
            setGeoState( obj.getGeoState() );
        }

        if ( hasGeoState() && getGeoState() == null &&
            obj.hasGeoState() && obj.getGeoState() != null ) {
            setGeoState( obj.getGeoState() );
        }

        if ( ! hasGeoCity() && obj.hasGeoCity() ) {
            setGeoCity( obj.getGeoCity() );
        }

        if ( hasGeoCity() && getGeoCity() == null &&
            obj.hasGeoCity() && obj.getGeoCity() != null ) {
            setGeoCity( obj.getGeoCity() );
        }

        if ( geoMethod == null && obj.hasGeoMethod() && obj.getGeoMethod() != null ) {
            setGeoMethod( obj.getGeoMethod() );
        }

        if ( ! hasRatingValue() && obj.hasRatingValue() ) {
            setRatingValue( obj.getRatingValue() );
        }

        if ( hasRatingValue() && getRatingValue() == null &&
            obj.hasRatingValue() && obj.getRatingValue() != null ) {
            setRatingValue( obj.getRatingValue() );
        }

        if ( ! hasFaviconSrc() && obj.hasFaviconSrc() ) {
            setFaviconSrc( obj.getFaviconSrc() );
        }

        if ( hasFaviconSrc() && getFaviconSrc() == null &&
            obj.hasFaviconSrc() && obj.getFaviconSrc() != null ) {
            setFaviconSrc( obj.getFaviconSrc() );
        }

        if ( ! hasFaviconWidth() && obj.hasFaviconWidth() ) {
            setFaviconWidth( obj.getFaviconWidth() );
        }

        if ( ! hasFaviconHeight() && obj.hasFaviconHeight() ) {
            setFaviconHeight( obj.getFaviconHeight() );
        }

        if ( ! hasImageSrc() && obj.hasImageSrc() ) {
            setImageSrc( obj.getImageSrc() );
        }

        if ( hasImageSrc() && getImageSrc() == null &&
            obj.hasImageSrc() && obj.getImageSrc() != null ) {
            setImageSrc( obj.getImageSrc() );
        }

        if ( ! hasImageWidth() && obj.hasImageWidth() ) {
            setImageWidth( obj.getImageWidth() );
        }

        if ( ! hasImageHeight() && obj.hasImageHeight() ) {
            setImageHeight( obj.getImageHeight() );
        }

        if ( ! hasShared() && obj.hasShared() ) {
            setShared( obj.getShared() );
        }

        if ( sharedType == null && obj.hasSharedType() && obj.getSharedType() != null ) {
            setSharedType( obj.getSharedType() );
        }

        if ( ! hasSharedProfileLink() && obj.hasSharedProfileLink() ) {
            setSharedProfileLink( obj.getSharedProfileLink() );
        }

        if ( hasSharedProfileLink() && getSharedProfileLink() == null &&
            obj.hasSharedProfileLink() && obj.getSharedProfileLink() != null ) {
            setSharedProfileLink( obj.getSharedProfileLink() );
        }

        if ( ! hasSharedProfileTitle() && obj.hasSharedProfileTitle() ) {
            setSharedProfileTitle( obj.getSharedProfileTitle() );
        }

        if ( hasSharedProfileTitle() && getSharedProfileTitle() == null &&
            obj.hasSharedProfileTitle() && obj.getSharedProfileTitle() != null ) {
            setSharedProfileTitle( obj.getSharedProfileTitle() );
        }

        if ( ! hasSharedAuthorLink() && obj.hasSharedAuthorLink() ) {
            setSharedAuthorLink( obj.getSharedAuthorLink() );
        }

        if ( hasSharedAuthorLink() && getSharedAuthorLink() == null &&
            obj.hasSharedAuthorLink() && obj.getSharedAuthorLink() != null ) {
            setSharedAuthorLink( obj.getSharedAuthorLink() );
        }

        if ( ! hasSharedAuthorName() && obj.hasSharedAuthorName() ) {
            setSharedAuthorName( obj.getSharedAuthorName() );
        }

        if ( hasSharedAuthorName() && getSharedAuthorName() == null &&
            obj.hasSharedAuthorName() && obj.getSharedAuthorName() != null ) {
            setSharedAuthorName( obj.getSharedAuthorName() );
        }

        if ( ! hasSharedAuthorUserId() && obj.hasSharedAuthorUserId() ) {
            setSharedAuthorUserId( obj.getSharedAuthorUserId() );
        }

        if ( hasSharedAuthorUserId() && getSharedAuthorUserId() == null &&
            obj.hasSharedAuthorUserId() && obj.getSharedAuthorUserId() != null ) {
            setSharedAuthorUserId( obj.getSharedAuthorUserId() );
        }

        if ( ! hasSharedIdentifier() && obj.hasSharedIdentifier() ) {
            setSharedIdentifier( obj.getSharedIdentifier() );
        }

        if ( hasSharedIdentifier() && getSharedIdentifier() == null &&
            obj.hasSharedIdentifier() && obj.getSharedIdentifier() != null ) {
            setSharedIdentifier( obj.getSharedIdentifier() );
        }

        if ( ! hasSharedPermalink() && obj.hasSharedPermalink() ) {
            setSharedPermalink( obj.getSharedPermalink() );
        }

        if ( hasSharedPermalink() && getSharedPermalink() == null &&
            obj.hasSharedPermalink() && obj.getSharedPermalink() != null ) {
            setSharedPermalink( obj.getSharedPermalink() );
        }

        if ( ! hasSharedAuthorHandle() && obj.hasSharedAuthorHandle() ) {
            setSharedAuthorHandle( obj.getSharedAuthorHandle() );
        }

        if ( hasSharedAuthorHandle() && getSharedAuthorHandle() == null &&
            obj.hasSharedAuthorHandle() && obj.getSharedAuthorHandle() != null ) {
            setSharedAuthorHandle( obj.getSharedAuthorHandle() );
        }

        if ( ! hasReplied() && obj.hasReplied() ) {
            setReplied( obj.getReplied() );
        }

        if ( ! hasRepliedProfileLink() && obj.hasRepliedProfileLink() ) {
            setRepliedProfileLink( obj.getRepliedProfileLink() );
        }

        if ( hasRepliedProfileLink() && getRepliedProfileLink() == null &&
            obj.hasRepliedProfileLink() && obj.getRepliedProfileLink() != null ) {
            setRepliedProfileLink( obj.getRepliedProfileLink() );
        }

        if ( ! hasRepliedProfileTitle() && obj.hasRepliedProfileTitle() ) {
            setRepliedProfileTitle( obj.getRepliedProfileTitle() );
        }

        if ( hasRepliedProfileTitle() && getRepliedProfileTitle() == null &&
            obj.hasRepliedProfileTitle() && obj.getRepliedProfileTitle() != null ) {
            setRepliedProfileTitle( obj.getRepliedProfileTitle() );
        }

        if ( card == null && obj.hasCard() && obj.getCard() != null ) {
            setCard( obj.getCard() );
        }

        if ( ! hasVideoPlayer() && obj.hasVideoPlayer() ) {
            setVideoPlayer( obj.getVideoPlayer() );
        }

        if ( hasVideoPlayer() && getVideoPlayer() == null &&
            obj.hasVideoPlayer() && obj.getVideoPlayer() != null ) {
            setVideoPlayer( obj.getVideoPlayer() );
        }

        if ( ! hasVideoPlayerWidth() && obj.hasVideoPlayerWidth() ) {
            setVideoPlayerWidth( obj.getVideoPlayerWidth() );
        }

        if ( ! hasVideoPlayerHeight() && obj.hasVideoPlayerHeight() ) {
            setVideoPlayerHeight( obj.getVideoPlayerHeight() );
        }

        if ( type == null && obj.hasType() && obj.getType() != null ) {
            setType( obj.getType() );
        }

        if ( sentiment == null && obj.hasSentiment() && obj.getSentiment() != null ) {
            setSentiment( obj.getSentiment() );
        }

        if ( ! hasLang() && obj.hasLang() ) {
            setLang( obj.getLang() );
        }

        if ( hasLang() && getLang() == null &&
            obj.hasLang() && obj.getLang() != null ) {
            setLang( obj.getLang() );
        }

        if ( ! hasCategories() && obj.hasCategories() ) {
            setCategories( obj.getCategories() );
        }

        if ( ! hasDuplicates() && obj.hasDuplicates() ) {
            setDuplicates( obj.getDuplicates() );
        }

        if ( ! hasDuplicatesCount() && obj.hasDuplicatesCount() ) {
            setDuplicatesCount( obj.getDuplicatesCount() );
        }

        if ( ! hasClassifications() && obj.hasClassifications() ) {
            setClassifications( obj.getClassifications() );
        }

        if ( ! hasParentHashcode() && obj.hasParentHashcode() ) {
            setParentHashcode( obj.getParentHashcode() );
        }

        if ( hasParentHashcode() && getParentHashcode() == null &&
            obj.hasParentHashcode() && obj.getParentHashcode() != null ) {
            setParentHashcode( obj.getParentHashcode() );
        }

        if ( ! hasParentPermalink() && obj.hasParentPermalink() ) {
            setParentPermalink( obj.getParentPermalink() );
        }

        if ( hasParentPermalink() && getParentPermalink() == null &&
            obj.hasParentPermalink() && obj.getParentPermalink() != null ) {
            setParentPermalink( obj.getParentPermalink() );
        }

        if ( ! hasParentTitle() && obj.hasParentTitle() ) {
            setParentTitle( obj.getParentTitle() );
        }

        if ( hasParentTitle() && getParentTitle() == null &&
            obj.hasParentTitle() && obj.getParentTitle() != null ) {
            setParentTitle( obj.getParentTitle() );
        }

        if ( ! hasParentLang() && obj.hasParentLang() ) {
            setParentLang( obj.getParentLang() );
        }

        if ( hasParentLang() && getParentLang() == null &&
            obj.hasParentLang() && obj.getParentLang() != null ) {
            setParentLang( obj.getParentLang() );
        }

        if ( ! hasParentResource() && obj.hasParentResource() ) {
            setParentResource( obj.getParentResource() );
        }

        if ( hasParentResource() && getParentResource() == null &&
            obj.hasParentResource() && obj.getParentResource() != null ) {
            setParentResource( obj.getParentResource() );
        }

        if ( ! hasLikes() && obj.hasLikes() ) {
            setLikes( obj.getLikes() );
        }

        if ( ! hasDislikes() && obj.hasDislikes() ) {
            setDislikes( obj.getDislikes() );
        }

        if ( ! hasComments() && obj.hasComments() ) {
            setComments( obj.getComments() );
        }

        if ( ! hasViews() && obj.hasViews() ) {
            setViews( obj.getViews() );
        }

        if ( ! hasMetadataScore() && obj.hasMetadataScore() ) {
            setMetadataScore( obj.getMetadataScore() );
        }

        if ( ! hasShares() && obj.hasShares() ) {
            setShares( obj.getShares() );
        }

        if ( ! hasMetadataUpdates() && obj.hasMetadataUpdates() ) {
            setMetadataUpdates( obj.getMetadataUpdates() );
        }

        if ( ! hasPinned() && obj.hasPinned() ) {
            setPinned( obj.getPinned() );
        }

    }

    // go through all fields and mark them as modied.
    protected void resetModified() {

        this.hasModifiedBucket = 0;

        this.hasModifiedSequence = 0;

        this.hasModifiedSequenceRange = 0;

        this.hasModifiedHashcode = 0;

        this.hasModifiedResource = 0;

        this.hasModifiedDateFound = 0;

        this.hasModifiedIndexMethod = 0;

        this.hasModifiedDetectionMethod = 0;

        this.hasModifiedHtml = 0;

        this.hasModifiedHtmlLength = 0;

        this.hasModifiedHtmlChecksum = 0;

        this.hasModifiedHtmlBlob = 0;

        this.hasModifiedHtmlBlobLength = 0;

        this.hasModifiedHtmlBlobChecksum = 0;

        this.hasModifiedExtractBlob = 0;

        this.hasModifiedVersion = 0;

        this.hasModifiedLastUpdated = 0;

        this.hasModifiedSourceHashcode = 0;

        this.hasModifiedSourceResource = 0;

        this.hasModifiedSourceLink = 0;

        this.hasModifiedSourcePublisherType = 0;

        this.hasModifiedSourcePublisherSubtype = 0;

        this.hasModifiedSourceDateFound = 0;

        this.hasModifiedSourceLastUpdated = 0;

        this.hasModifiedSourceLastPublished = 0;

        this.hasModifiedSourceLastPosted = 0;

        this.hasModifiedSourceUpdateInterval = 0;

        this.hasModifiedSourceHttpStatus = 0;

        this.hasModifiedSourceSpamProbability = 0;

        this.hasModifiedSourceContentLength = 0;

        this.hasModifiedSourceContentChecksum = 0;

        this.hasModifiedSourceAssignedTags = 0;

        this.hasModifiedSourceSettingUpdateStrategy = 0;

        this.hasModifiedSourceSettingIndexStrategy = 0;

        this.hasModifiedSourceSettingAuthorPolicy = 0;

        this.hasModifiedSourcePshbHub = 0;

        this.hasModifiedSourcePshbTopic = 0;

        this.hasModifiedSourcePshbLastPosted = 0;

        this.hasModifiedSourcePshbLeaseExpires = 0;

        this.hasModifiedSourceUserInteractions = 0;

        this.hasModifiedSourceSettingMinimumContentMetadataScore = 0;

        this.hasModifiedSourceNextUpdate = 0;

        this.hasModifiedSourceTitle = 0;

        this.hasModifiedSourceDescription = 0;

        this.hasModifiedSourceHandle = 0;

        this.hasModifiedSourceFavorites = 0;

        this.hasModifiedSourceFollowers = 0;

        this.hasModifiedSourceFollowing = 0;

        this.hasModifiedSourceVerified = 0;

        this.hasModifiedSourceProfiles = 0;

        this.hasModifiedSourceLocation = 0;

        this.hasModifiedSourceImageSrc = 0;

        this.hasModifiedSourceImageWidth = 0;

        this.hasModifiedSourceImageHeight = 0;

        this.hasModifiedSourceTelephone = 0;

        this.hasModifiedSourceTags = 0;

        this.hasModifiedSourceRatingValue = 0;

        this.hasModifiedSourceFaviconSrc = 0;

        this.hasModifiedSourceFaviconWidth = 0;

        this.hasModifiedSourceFaviconHeight = 0;

        this.hasModifiedSourceCreated = 0;

        this.hasModifiedSourceLikes = 0;

        this.hasModifiedSourceRelatedTags = 0;

        this.hasModifiedSourceParsedPosts = 0;

        this.hasModifiedSourceParsedPostsMax = 0;

        this.hasModifiedSourceFeedHref = 0;

        this.hasModifiedSourceFeedTitle = 0;

        this.hasModifiedSourceFeedFormat = 0;

        this.hasModifiedPermalink = 0;

        this.hasModifiedIdentifier = 0;

        this.hasModifiedPermalinkRedirect = 0;

        this.hasModifiedPermalinkRedirectDomain = 0;

        this.hasModifiedPermalinkRedirectSite = 0;

        this.hasModifiedLink = 0;

        this.hasModifiedLinkDomain = 0;

        this.hasModifiedLinkSite = 0;

        this.hasModifiedShortlink = 0;

        this.hasModifiedCanonical = 0;

        this.hasModifiedDomain = 0;

        this.hasModifiedSite = 0;

        this.hasModifiedMain = 0;

        this.hasModifiedMainLength = 0;

        this.hasModifiedMainChecksum = 0;

        this.hasModifiedMainAuthoritative = 0;

        this.hasModifiedMainFormat = 0;

        this.hasModifiedExtract = 0;

        this.hasModifiedExtractLength = 0;

        this.hasModifiedExtractChecksum = 0;

        this.hasModifiedSummaryText = 0;

        this.hasModifiedTitle = 0;

        this.hasModifiedPublisher = 0;

        this.hasModifiedSection = 0;

        this.hasModifiedDescription = 0;

        this.hasModifiedTags = 0;

        this.hasModifiedMentions = 0;

        this.hasModifiedLinks = 0;

        this.hasModifiedPublished = 0;

        this.hasModifiedModified = 0;

        this.hasModifiedPublishedPartial = 0;

        this.hasModifiedModifiedPartial = 0;

        this.hasModifiedAuthorName = 0;

        this.hasModifiedAuthorLink = 0;

        this.hasModifiedAuthorHandle = 0;

        this.hasModifiedAuthorFollowers = 0;

        this.hasModifiedAuthorLocation = 0;

        this.hasModifiedAuthorAvatarImg = 0;

        this.hasModifiedAuthorAvatarWidth = 0;

        this.hasModifiedAuthorAvatarHeight = 0;

        this.hasModifiedAuthorTwitterHandle = 0;

        this.hasModifiedAuthorTwitterUserid = 0;

        this.hasModifiedAuthorUserId = 0;

        this.hasModifiedAuthorGender = 0;

        this.hasModifiedGeoLocation = 0;

        this.hasModifiedGeoLocationId = 0;

        this.hasModifiedGeoFeaturename = 0;

        this.hasModifiedGeoPoint = 0;

        this.hasModifiedGeoBox = 0;

        this.hasModifiedGeoNameId = 0;

        this.hasModifiedGeoName = 0;

        this.hasModifiedGeoCountry = 0;

        this.hasModifiedGeoState = 0;

        this.hasModifiedGeoCity = 0;

        this.hasModifiedGeoMethod = 0;

        this.hasModifiedRatingValue = 0;

        this.hasModifiedFaviconSrc = 0;

        this.hasModifiedFaviconWidth = 0;

        this.hasModifiedFaviconHeight = 0;

        this.hasModifiedImageSrc = 0;

        this.hasModifiedImageWidth = 0;

        this.hasModifiedImageHeight = 0;

        this.hasModifiedShared = 0;

        this.hasModifiedSharedType = 0;

        this.hasModifiedSharedProfileLink = 0;

        this.hasModifiedSharedProfileTitle = 0;

        this.hasModifiedSharedAuthorLink = 0;

        this.hasModifiedSharedAuthorName = 0;

        this.hasModifiedSharedAuthorUserId = 0;

        this.hasModifiedSharedIdentifier = 0;

        this.hasModifiedSharedPermalink = 0;

        this.hasModifiedSharedAuthorHandle = 0;

        this.hasModifiedReplied = 0;

        this.hasModifiedRepliedProfileLink = 0;

        this.hasModifiedRepliedProfileTitle = 0;

        this.hasModifiedCard = 0;

        this.hasModifiedVideoPlayer = 0;

        this.hasModifiedVideoPlayerWidth = 0;

        this.hasModifiedVideoPlayerHeight = 0;

        this.hasModifiedType = 0;

        this.hasModifiedSentiment = 0;

        this.hasModifiedLang = 0;

        this.hasModifiedCategories = 0;

        this.hasModifiedDuplicates = 0;

        this.hasModifiedDuplicatesCount = 0;

        this.hasModifiedClassifications = 0;

        this.hasModifiedParentHashcode = 0;

        this.hasModifiedParentPermalink = 0;

        this.hasModifiedParentTitle = 0;

        this.hasModifiedParentLang = 0;

        this.hasModifiedParentResource = 0;

        this.hasModifiedLikes = 0;

        this.hasModifiedDislikes = 0;

        this.hasModifiedComments = 0;

        this.hasModifiedViews = 0;

        this.hasModifiedMetadataScore = 0;

        this.hasModifiedShares = 0;

        this.hasModifiedMetadataUpdates = 0;

        this.hasModifiedPinned = 0;

    }

    /**
      * Return true if any field in this object has been modified.
      */
    public boolean isModified() {

        if ( this.hasModifiedBucket() ) {
            return true;
        }

        if ( this.hasModifiedSequence() ) {
            return true;
        }

        if ( this.hasModifiedSequenceRange() ) {
            return true;
        }

        if ( this.hasModifiedHashcode() ) {
            return true;
        }

        if ( this.hasModifiedResource() ) {
            return true;
        }

        if ( this.hasModifiedDateFound() ) {
            return true;
        }

        if ( this.hasModifiedIndexMethod() ) {
            return true;
        }

        if ( this.hasModifiedDetectionMethod() ) {
            return true;
        }

        if ( this.hasModifiedHtml() ) {
            return true;
        }

        if ( this.hasModifiedHtmlLength() ) {
            return true;
        }

        if ( this.hasModifiedHtmlChecksum() ) {
            return true;
        }

        if ( this.hasModifiedHtmlBlob() ) {
            return true;
        }

        if ( this.hasModifiedHtmlBlobLength() ) {
            return true;
        }

        if ( this.hasModifiedHtmlBlobChecksum() ) {
            return true;
        }

        if ( this.hasModifiedExtractBlob() ) {
            return true;
        }

        if ( this.hasModifiedVersion() ) {
            return true;
        }

        if ( this.hasModifiedLastUpdated() ) {
            return true;
        }

        if ( this.hasModifiedSourceHashcode() ) {
            return true;
        }

        if ( this.hasModifiedSourceResource() ) {
            return true;
        }

        if ( this.hasModifiedSourceLink() ) {
            return true;
        }

        if ( this.hasModifiedSourcePublisherType() ) {
            return true;
        }

        if ( this.hasModifiedSourcePublisherSubtype() ) {
            return true;
        }

        if ( this.hasModifiedSourceDateFound() ) {
            return true;
        }

        if ( this.hasModifiedSourceLastUpdated() ) {
            return true;
        }

        if ( this.hasModifiedSourceLastPublished() ) {
            return true;
        }

        if ( this.hasModifiedSourceLastPosted() ) {
            return true;
        }

        if ( this.hasModifiedSourceUpdateInterval() ) {
            return true;
        }

        if ( this.hasModifiedSourceHttpStatus() ) {
            return true;
        }

        if ( this.hasModifiedSourceSpamProbability() ) {
            return true;
        }

        if ( this.hasModifiedSourceContentLength() ) {
            return true;
        }

        if ( this.hasModifiedSourceContentChecksum() ) {
            return true;
        }

        if ( this.hasModifiedSourceAssignedTags() ) {
            return true;
        }

        if ( this.hasModifiedSourceSettingUpdateStrategy() ) {
            return true;
        }

        if ( this.hasModifiedSourceSettingIndexStrategy() ) {
            return true;
        }

        if ( this.hasModifiedSourceSettingAuthorPolicy() ) {
            return true;
        }

        if ( this.hasModifiedSourcePshbHub() ) {
            return true;
        }

        if ( this.hasModifiedSourcePshbTopic() ) {
            return true;
        }

        if ( this.hasModifiedSourcePshbLastPosted() ) {
            return true;
        }

        if ( this.hasModifiedSourcePshbLeaseExpires() ) {
            return true;
        }

        if ( this.hasModifiedSourceUserInteractions() ) {
            return true;
        }

        if ( this.hasModifiedSourceSettingMinimumContentMetadataScore() ) {
            return true;
        }

        if ( this.hasModifiedSourceNextUpdate() ) {
            return true;
        }

        if ( this.hasModifiedSourceTitle() ) {
            return true;
        }

        if ( this.hasModifiedSourceDescription() ) {
            return true;
        }

        if ( this.hasModifiedSourceHandle() ) {
            return true;
        }

        if ( this.hasModifiedSourceFavorites() ) {
            return true;
        }

        if ( this.hasModifiedSourceFollowers() ) {
            return true;
        }

        if ( this.hasModifiedSourceFollowing() ) {
            return true;
        }

        if ( this.hasModifiedSourceVerified() ) {
            return true;
        }

        if ( this.hasModifiedSourceProfiles() ) {
            return true;
        }

        if ( this.hasModifiedSourceLocation() ) {
            return true;
        }

        if ( this.hasModifiedSourceImageSrc() ) {
            return true;
        }

        if ( this.hasModifiedSourceImageWidth() ) {
            return true;
        }

        if ( this.hasModifiedSourceImageHeight() ) {
            return true;
        }

        if ( this.hasModifiedSourceTelephone() ) {
            return true;
        }

        if ( this.hasModifiedSourceTags() ) {
            return true;
        }

        if ( this.hasModifiedSourceRatingValue() ) {
            return true;
        }

        if ( this.hasModifiedSourceFaviconSrc() ) {
            return true;
        }

        if ( this.hasModifiedSourceFaviconWidth() ) {
            return true;
        }

        if ( this.hasModifiedSourceFaviconHeight() ) {
            return true;
        }

        if ( this.hasModifiedSourceCreated() ) {
            return true;
        }

        if ( this.hasModifiedSourceLikes() ) {
            return true;
        }

        if ( this.hasModifiedSourceRelatedTags() ) {
            return true;
        }

        if ( this.hasModifiedSourceParsedPosts() ) {
            return true;
        }

        if ( this.hasModifiedSourceParsedPostsMax() ) {
            return true;
        }

        if ( this.hasModifiedSourceFeedHref() ) {
            return true;
        }

        if ( this.hasModifiedSourceFeedTitle() ) {
            return true;
        }

        if ( this.hasModifiedSourceFeedFormat() ) {
            return true;
        }

        if ( this.hasModifiedPermalink() ) {
            return true;
        }

        if ( this.hasModifiedIdentifier() ) {
            return true;
        }

        if ( this.hasModifiedPermalinkRedirect() ) {
            return true;
        }

        if ( this.hasModifiedPermalinkRedirectDomain() ) {
            return true;
        }

        if ( this.hasModifiedPermalinkRedirectSite() ) {
            return true;
        }

        if ( this.hasModifiedLink() ) {
            return true;
        }

        if ( this.hasModifiedLinkDomain() ) {
            return true;
        }

        if ( this.hasModifiedLinkSite() ) {
            return true;
        }

        if ( this.hasModifiedShortlink() ) {
            return true;
        }

        if ( this.hasModifiedCanonical() ) {
            return true;
        }

        if ( this.hasModifiedDomain() ) {
            return true;
        }

        if ( this.hasModifiedSite() ) {
            return true;
        }

        if ( this.hasModifiedMain() ) {
            return true;
        }

        if ( this.hasModifiedMainLength() ) {
            return true;
        }

        if ( this.hasModifiedMainChecksum() ) {
            return true;
        }

        if ( this.hasModifiedMainAuthoritative() ) {
            return true;
        }

        if ( this.hasModifiedMainFormat() ) {
            return true;
        }

        if ( this.hasModifiedExtract() ) {
            return true;
        }

        if ( this.hasModifiedExtractLength() ) {
            return true;
        }

        if ( this.hasModifiedExtractChecksum() ) {
            return true;
        }

        if ( this.hasModifiedSummaryText() ) {
            return true;
        }

        if ( this.hasModifiedTitle() ) {
            return true;
        }

        if ( this.hasModifiedPublisher() ) {
            return true;
        }

        if ( this.hasModifiedSection() ) {
            return true;
        }

        if ( this.hasModifiedDescription() ) {
            return true;
        }

        if ( this.hasModifiedTags() ) {
            return true;
        }

        if ( this.hasModifiedMentions() ) {
            return true;
        }

        if ( this.hasModifiedLinks() ) {
            return true;
        }

        if ( this.hasModifiedPublished() ) {
            return true;
        }

        if ( this.hasModifiedModified() ) {
            return true;
        }

        if ( this.hasModifiedPublishedPartial() ) {
            return true;
        }

        if ( this.hasModifiedModifiedPartial() ) {
            return true;
        }

        if ( this.hasModifiedAuthorName() ) {
            return true;
        }

        if ( this.hasModifiedAuthorLink() ) {
            return true;
        }

        if ( this.hasModifiedAuthorHandle() ) {
            return true;
        }

        if ( this.hasModifiedAuthorFollowers() ) {
            return true;
        }

        if ( this.hasModifiedAuthorLocation() ) {
            return true;
        }

        if ( this.hasModifiedAuthorAvatarImg() ) {
            return true;
        }

        if ( this.hasModifiedAuthorAvatarWidth() ) {
            return true;
        }

        if ( this.hasModifiedAuthorAvatarHeight() ) {
            return true;
        }

        if ( this.hasModifiedAuthorTwitterHandle() ) {
            return true;
        }

        if ( this.hasModifiedAuthorTwitterUserid() ) {
            return true;
        }

        if ( this.hasModifiedAuthorUserId() ) {
            return true;
        }

        if ( this.hasModifiedAuthorGender() ) {
            return true;
        }

        if ( this.hasModifiedGeoLocation() ) {
            return true;
        }

        if ( this.hasModifiedGeoLocationId() ) {
            return true;
        }

        if ( this.hasModifiedGeoFeaturename() ) {
            return true;
        }

        if ( this.hasModifiedGeoPoint() ) {
            return true;
        }

        if ( this.hasModifiedGeoBox() ) {
            return true;
        }

        if ( this.hasModifiedGeoNameId() ) {
            return true;
        }

        if ( this.hasModifiedGeoName() ) {
            return true;
        }

        if ( this.hasModifiedGeoCountry() ) {
            return true;
        }

        if ( this.hasModifiedGeoState() ) {
            return true;
        }

        if ( this.hasModifiedGeoCity() ) {
            return true;
        }

        if ( this.hasModifiedGeoMethod() ) {
            return true;
        }

        if ( this.hasModifiedRatingValue() ) {
            return true;
        }

        if ( this.hasModifiedFaviconSrc() ) {
            return true;
        }

        if ( this.hasModifiedFaviconWidth() ) {
            return true;
        }

        if ( this.hasModifiedFaviconHeight() ) {
            return true;
        }

        if ( this.hasModifiedImageSrc() ) {
            return true;
        }

        if ( this.hasModifiedImageWidth() ) {
            return true;
        }

        if ( this.hasModifiedImageHeight() ) {
            return true;
        }

        if ( this.hasModifiedShared() ) {
            return true;
        }

        if ( this.hasModifiedSharedType() ) {
            return true;
        }

        if ( this.hasModifiedSharedProfileLink() ) {
            return true;
        }

        if ( this.hasModifiedSharedProfileTitle() ) {
            return true;
        }

        if ( this.hasModifiedSharedAuthorLink() ) {
            return true;
        }

        if ( this.hasModifiedSharedAuthorName() ) {
            return true;
        }

        if ( this.hasModifiedSharedAuthorUserId() ) {
            return true;
        }

        if ( this.hasModifiedSharedIdentifier() ) {
            return true;
        }

        if ( this.hasModifiedSharedPermalink() ) {
            return true;
        }

        if ( this.hasModifiedSharedAuthorHandle() ) {
            return true;
        }

        if ( this.hasModifiedReplied() ) {
            return true;
        }

        if ( this.hasModifiedRepliedProfileLink() ) {
            return true;
        }

        if ( this.hasModifiedRepliedProfileTitle() ) {
            return true;
        }

        if ( this.hasModifiedCard() ) {
            return true;
        }

        if ( this.hasModifiedVideoPlayer() ) {
            return true;
        }

        if ( this.hasModifiedVideoPlayerWidth() ) {
            return true;
        }

        if ( this.hasModifiedVideoPlayerHeight() ) {
            return true;
        }

        if ( this.hasModifiedType() ) {
            return true;
        }

        if ( this.hasModifiedSentiment() ) {
            return true;
        }

        if ( this.hasModifiedLang() ) {
            return true;
        }

        if ( this.hasModifiedCategories() ) {
            return true;
        }

        if ( this.hasModifiedDuplicates() ) {
            return true;
        }

        if ( this.hasModifiedDuplicatesCount() ) {
            return true;
        }

        if ( this.hasModifiedClassifications() ) {
            return true;
        }

        if ( this.hasModifiedParentHashcode() ) {
            return true;
        }

        if ( this.hasModifiedParentPermalink() ) {
            return true;
        }

        if ( this.hasModifiedParentTitle() ) {
            return true;
        }

        if ( this.hasModifiedParentLang() ) {
            return true;
        }

        if ( this.hasModifiedParentResource() ) {
            return true;
        }

        if ( this.hasModifiedLikes() ) {
            return true;
        }

        if ( this.hasModifiedDislikes() ) {
            return true;
        }

        if ( this.hasModifiedComments() ) {
            return true;
        }

        if ( this.hasModifiedViews() ) {
            return true;
        }

        if ( this.hasModifiedMetadataScore() ) {
            return true;
        }

        if ( this.hasModifiedShares() ) {
            return true;
        }

        if ( this.hasModifiedMetadataUpdates() ) {
            return true;
        }

        if ( this.hasModifiedPinned() ) {
            return true;
        }

        return false;

    }

    /**
     * Mark this object as constructed so that there are no undefined fields.
     */
    public void markConstructed() {
        this.constructed = true;
    }

    @Override
    public String toString() {
        StringBuilder buff = new StringBuilder();

        buff.append( getClass().getName() );
        buff.append( ": " );

        if ( hasBucket > 0 ) {

            buff.append( "bucket=" );
            buff.append( bucket );
            buff.append( " " );

        }

        if ( hasSequence > 0 ) {

            buff.append( "sequence=" );
            buff.append( sequence );
            buff.append( " " );

        }

        if ( hasSequenceRange > 0 ) {

            buff.append( "sequenceRange=" );
            buff.append( sequenceRange );
            buff.append( " " );

        }

        if ( hasHashcode > 0 ) {

            buff.append( "hashcode=" );
            buff.append( hashcode );
            buff.append( " " );

        }

        if ( hasResource > 0 ) {

            buff.append( "resource=" );
            buff.append( resource );
            buff.append( " " );

        }

        if ( hasDateFound > 0 ) {

            buff.append( "dateFound=" );
            if ( dateFound != null ) {
                buff.append( toISO8601( dateFound ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasIndexMethod > 0 ) {

            buff.append( "indexMethod=" );
            buff.append( indexMethod );
            buff.append( " " );

        }

        if ( hasDetectionMethod > 0 ) {

            buff.append( "detectionMethod=" );
            buff.append( detectionMethod );
            buff.append( " " );

        }

        if ( hasHtml > 0 ) {

            buff.append( "html=" );
            buff.append( html );
            buff.append( " " );

        }

        if ( hasHtmlLength > 0 ) {

            buff.append( "htmlLength=" );
            buff.append( htmlLength );
            buff.append( " " );

        }

        if ( hasHtmlChecksum > 0 ) {

            buff.append( "htmlChecksum=" );
            buff.append( htmlChecksum );
            buff.append( " " );

        }

        if ( hasHtmlBlob > 0 ) {

            buff.append( "htmlBlob=" );
            buff.append( htmlBlob );
            buff.append( " " );

        }

        if ( hasHtmlBlobLength > 0 ) {

            buff.append( "htmlBlobLength=" );
            buff.append( htmlBlobLength );
            buff.append( " " );

        }

        if ( hasHtmlBlobChecksum > 0 ) {

            buff.append( "htmlBlobChecksum=" );
            buff.append( htmlBlobChecksum );
            buff.append( " " );

        }

        if ( hasExtractBlob > 0 ) {

            buff.append( "extractBlob=" );
            buff.append( extractBlob );
            buff.append( " " );

        }

        if ( hasVersion > 0 ) {

            buff.append( "version=" );
            buff.append( version );
            buff.append( " " );

        }

        if ( hasLastUpdated > 0 ) {

            buff.append( "lastUpdated=" );
            if ( lastUpdated != null ) {
                buff.append( toISO8601( lastUpdated ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasSourceHashcode > 0 ) {

            buff.append( "sourceHashcode=" );
            buff.append( sourceHashcode );
            buff.append( " " );

        }

        if ( hasSourceResource > 0 ) {

            buff.append( "sourceResource=" );
            buff.append( sourceResource );
            buff.append( " " );

        }

        if ( hasSourceLink > 0 ) {

            buff.append( "sourceLink=" );
            buff.append( sourceLink );
            buff.append( " " );

        }

        if ( hasSourcePublisherType > 0 ) {

            buff.append( "sourcePublisherType=" );
            buff.append( sourcePublisherType );
            buff.append( " " );

        }

        if ( hasSourcePublisherSubtype > 0 ) {

            buff.append( "sourcePublisherSubtype=" );
            buff.append( sourcePublisherSubtype );
            buff.append( " " );

        }

        if ( hasSourceDateFound > 0 ) {

            buff.append( "sourceDateFound=" );
            if ( sourceDateFound != null ) {
                buff.append( toISO8601( sourceDateFound ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasSourceLastUpdated > 0 ) {

            buff.append( "sourceLastUpdated=" );
            if ( sourceLastUpdated != null ) {
                buff.append( toISO8601( sourceLastUpdated ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasSourceLastPublished > 0 ) {

            buff.append( "sourceLastPublished=" );
            if ( sourceLastPublished != null ) {
                buff.append( toISO8601( sourceLastPublished ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasSourceLastPosted > 0 ) {

            buff.append( "sourceLastPosted=" );
            if ( sourceLastPosted != null ) {
                buff.append( toISO8601( sourceLastPosted ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasSourceUpdateInterval > 0 ) {

            buff.append( "sourceUpdateInterval=" );
            buff.append( sourceUpdateInterval );
            buff.append( " " );

        }

        if ( hasSourceHttpStatus > 0 ) {

            buff.append( "sourceHttpStatus=" );
            buff.append( sourceHttpStatus );
            buff.append( " " );

        }

        if ( hasSourceSpamProbability > 0 ) {

            buff.append( "sourceSpamProbability=" );
            buff.append( sourceSpamProbability );
            buff.append( " " );

        }

        if ( hasSourceContentLength > 0 ) {

            buff.append( "sourceContentLength=" );
            buff.append( sourceContentLength );
            buff.append( " " );

        }

        if ( hasSourceContentChecksum > 0 ) {

            buff.append( "sourceContentChecksum=" );
            buff.append( sourceContentChecksum );
            buff.append( " " );

        }

        if ( hasSourceAssignedTags > 0 ) {

            buff.append( "sourceAssignedTags=" );
            buff.append( sourceAssignedTags );
            buff.append( " " );

        }

        if ( hasSourceSettingUpdateStrategy > 0 ) {

            buff.append( "sourceSettingUpdateStrategy=" );
            buff.append( sourceSettingUpdateStrategy );
            buff.append( " " );

        }

        if ( hasSourceSettingIndexStrategy > 0 ) {

            buff.append( "sourceSettingIndexStrategy=" );
            buff.append( sourceSettingIndexStrategy );
            buff.append( " " );

        }

        if ( hasSourceSettingAuthorPolicy > 0 ) {

            buff.append( "sourceSettingAuthorPolicy=" );
            buff.append( sourceSettingAuthorPolicy );
            buff.append( " " );

        }

        if ( hasSourcePshbHub > 0 ) {

            buff.append( "sourcePshbHub=" );
            buff.append( sourcePshbHub );
            buff.append( " " );

        }

        if ( hasSourcePshbTopic > 0 ) {

            buff.append( "sourcePshbTopic=" );
            buff.append( sourcePshbTopic );
            buff.append( " " );

        }

        if ( hasSourcePshbLastPosted > 0 ) {

            buff.append( "sourcePshbLastPosted=" );
            if ( sourcePshbLastPosted != null ) {
                buff.append( toISO8601( sourcePshbLastPosted ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasSourcePshbLeaseExpires > 0 ) {

            buff.append( "sourcePshbLeaseExpires=" );
            if ( sourcePshbLeaseExpires != null ) {
                buff.append( toISO8601( sourcePshbLeaseExpires ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasSourceUserInteractions > 0 ) {

            buff.append( "sourceUserInteractions=" );
            buff.append( sourceUserInteractions );
            buff.append( " " );

        }

        if ( hasSourceSettingMinimumContentMetadataScore > 0 ) {

            buff.append( "sourceSettingMinimumContentMetadataScore=" );
            buff.append( sourceSettingMinimumContentMetadataScore );
            buff.append( " " );

        }

        if ( hasSourceNextUpdate > 0 ) {

            buff.append( "sourceNextUpdate=" );
            if ( sourceNextUpdate != null ) {
                buff.append( toISO8601( sourceNextUpdate ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasSourceTitle > 0 ) {

            buff.append( "sourceTitle=" );
            buff.append( sourceTitle );
            buff.append( " " );

        }

        if ( hasSourceDescription > 0 ) {

            buff.append( "sourceDescription=" );
            buff.append( sourceDescription );
            buff.append( " " );

        }

        if ( hasSourceHandle > 0 ) {

            buff.append( "sourceHandle=" );
            buff.append( sourceHandle );
            buff.append( " " );

        }

        if ( hasSourceFavorites > 0 ) {

            buff.append( "sourceFavorites=" );
            buff.append( sourceFavorites );
            buff.append( " " );

        }

        if ( hasSourceFollowers > 0 ) {

            buff.append( "sourceFollowers=" );
            buff.append( sourceFollowers );
            buff.append( " " );

        }

        if ( hasSourceFollowing > 0 ) {

            buff.append( "sourceFollowing=" );
            buff.append( sourceFollowing );
            buff.append( " " );

        }

        if ( hasSourceVerified > 0 ) {

            buff.append( "sourceVerified=" );
            buff.append( sourceVerified );
            buff.append( " " );

        }

        if ( hasSourceProfiles > 0 ) {

            buff.append( "sourceProfiles=" );
            buff.append( sourceProfiles );
            buff.append( " " );

        }

        if ( hasSourceLocation > 0 ) {

            buff.append( "sourceLocation=" );
            buff.append( sourceLocation );
            buff.append( " " );

        }

        if ( hasSourceImageSrc > 0 ) {

            buff.append( "sourceImageSrc=" );
            buff.append( sourceImageSrc );
            buff.append( " " );

        }

        if ( hasSourceImageWidth > 0 ) {

            buff.append( "sourceImageWidth=" );
            buff.append( sourceImageWidth );
            buff.append( " " );

        }

        if ( hasSourceImageHeight > 0 ) {

            buff.append( "sourceImageHeight=" );
            buff.append( sourceImageHeight );
            buff.append( " " );

        }

        if ( hasSourceTelephone > 0 ) {

            buff.append( "sourceTelephone=" );
            buff.append( sourceTelephone );
            buff.append( " " );

        }

        if ( hasSourceTags > 0 ) {

            buff.append( "sourceTags=" );
            buff.append( sourceTags );
            buff.append( " " );

        }

        if ( hasSourceRatingValue > 0 ) {

            buff.append( "sourceRatingValue=" );
            buff.append( sourceRatingValue );
            buff.append( " " );

        }

        if ( hasSourceFaviconSrc > 0 ) {

            buff.append( "sourceFaviconSrc=" );
            buff.append( sourceFaviconSrc );
            buff.append( " " );

        }

        if ( hasSourceFaviconWidth > 0 ) {

            buff.append( "sourceFaviconWidth=" );
            buff.append( sourceFaviconWidth );
            buff.append( " " );

        }

        if ( hasSourceFaviconHeight > 0 ) {

            buff.append( "sourceFaviconHeight=" );
            buff.append( sourceFaviconHeight );
            buff.append( " " );

        }

        if ( hasSourceCreated > 0 ) {

            buff.append( "sourceCreated=" );
            if ( sourceCreated != null ) {
                buff.append( toISO8601( sourceCreated ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasSourceLikes > 0 ) {

            buff.append( "sourceLikes=" );
            buff.append( sourceLikes );
            buff.append( " " );

        }

        if ( hasSourceRelatedTags > 0 ) {

            buff.append( "sourceRelatedTags=" );
            buff.append( sourceRelatedTags );
            buff.append( " " );

        }

        if ( hasSourceParsedPosts > 0 ) {

            buff.append( "sourceParsedPosts=" );
            buff.append( sourceParsedPosts );
            buff.append( " " );

        }

        if ( hasSourceParsedPostsMax > 0 ) {

            buff.append( "sourceParsedPostsMax=" );
            buff.append( sourceParsedPostsMax );
            buff.append( " " );

        }

        if ( hasSourceFeedHref > 0 ) {

            buff.append( "sourceFeedHref=" );
            buff.append( sourceFeedHref );
            buff.append( " " );

        }

        if ( hasSourceFeedTitle > 0 ) {

            buff.append( "sourceFeedTitle=" );
            buff.append( sourceFeedTitle );
            buff.append( " " );

        }

        if ( hasSourceFeedFormat > 0 ) {

            buff.append( "sourceFeedFormat=" );
            buff.append( sourceFeedFormat );
            buff.append( " " );

        }

        if ( hasPermalink > 0 ) {

            buff.append( "permalink=" );
            buff.append( permalink );
            buff.append( " " );

        }

        if ( hasIdentifier > 0 ) {

            buff.append( "identifier=" );
            buff.append( identifier );
            buff.append( " " );

        }

        if ( hasPermalinkRedirect > 0 ) {

            buff.append( "permalinkRedirect=" );
            buff.append( permalinkRedirect );
            buff.append( " " );

        }

        if ( hasPermalinkRedirectDomain > 0 ) {

            buff.append( "permalinkRedirectDomain=" );
            buff.append( permalinkRedirectDomain );
            buff.append( " " );

        }

        if ( hasPermalinkRedirectSite > 0 ) {

            buff.append( "permalinkRedirectSite=" );
            buff.append( permalinkRedirectSite );
            buff.append( " " );

        }

        if ( hasLink > 0 ) {

            buff.append( "link=" );
            buff.append( link );
            buff.append( " " );

        }

        if ( hasLinkDomain > 0 ) {

            buff.append( "linkDomain=" );
            buff.append( linkDomain );
            buff.append( " " );

        }

        if ( hasLinkSite > 0 ) {

            buff.append( "linkSite=" );
            buff.append( linkSite );
            buff.append( " " );

        }

        if ( hasShortlink > 0 ) {

            buff.append( "shortlink=" );
            buff.append( shortlink );
            buff.append( " " );

        }

        if ( hasCanonical > 0 ) {

            buff.append( "canonical=" );
            buff.append( canonical );
            buff.append( " " );

        }

        if ( hasDomain > 0 ) {

            buff.append( "domain=" );
            buff.append( domain );
            buff.append( " " );

        }

        if ( hasSite > 0 ) {

            buff.append( "site=" );
            buff.append( site );
            buff.append( " " );

        }

        if ( hasMain > 0 ) {

            buff.append( "main=" );
            buff.append( main );
            buff.append( " " );

        }

        if ( hasMainLength > 0 ) {

            buff.append( "mainLength=" );
            buff.append( mainLength );
            buff.append( " " );

        }

        if ( hasMainChecksum > 0 ) {

            buff.append( "mainChecksum=" );
            buff.append( mainChecksum );
            buff.append( " " );

        }

        if ( hasMainAuthoritative > 0 ) {

            buff.append( "mainAuthoritative=" );
            buff.append( mainAuthoritative );
            buff.append( " " );

        }

        if ( hasMainFormat > 0 ) {

            buff.append( "mainFormat=" );
            buff.append( mainFormat );
            buff.append( " " );

        }

        if ( hasExtract > 0 ) {

            buff.append( "extract=" );
            buff.append( extract );
            buff.append( " " );

        }

        if ( hasExtractLength > 0 ) {

            buff.append( "extractLength=" );
            buff.append( extractLength );
            buff.append( " " );

        }

        if ( hasExtractChecksum > 0 ) {

            buff.append( "extractChecksum=" );
            buff.append( extractChecksum );
            buff.append( " " );

        }

        if ( hasSummaryText > 0 ) {

            buff.append( "summaryText=" );
            buff.append( summaryText );
            buff.append( " " );

        }

        if ( hasTitle > 0 ) {

            buff.append( "title=" );
            buff.append( title );
            buff.append( " " );

        }

        if ( hasPublisher > 0 ) {

            buff.append( "publisher=" );
            buff.append( publisher );
            buff.append( " " );

        }

        if ( hasSection > 0 ) {

            buff.append( "section=" );
            buff.append( section );
            buff.append( " " );

        }

        if ( hasDescription > 0 ) {

            buff.append( "description=" );
            buff.append( description );
            buff.append( " " );

        }

        if ( hasTags > 0 ) {

            buff.append( "tags=" );
            buff.append( tags );
            buff.append( " " );

        }

        if ( hasMentions > 0 ) {

            buff.append( "mentions=" );
            buff.append( mentions );
            buff.append( " " );

        }

        if ( hasLinks > 0 ) {

            buff.append( "links=" );
            buff.append( links );
            buff.append( " " );

        }

        if ( hasPublished > 0 ) {

            buff.append( "published=" );
            if ( published != null ) {
                buff.append( toISO8601( published ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasModified > 0 ) {

            buff.append( "modified=" );
            if ( modified != null ) {
                buff.append( toISO8601( modified ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasPublishedPartial > 0 ) {

            buff.append( "publishedPartial=" );
            if ( publishedPartial != null ) {
                buff.append( toISO8601( publishedPartial ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasModifiedPartial > 0 ) {

            buff.append( "modifiedPartial=" );
            if ( modifiedPartial != null ) {
                buff.append( toISO8601( modifiedPartial ) );
            } else {
                buff.append( "null" );
            }
            buff.append( " " );

        }

        if ( hasAuthorName > 0 ) {

            buff.append( "authorName=" );
            buff.append( authorName );
            buff.append( " " );

        }

        if ( hasAuthorLink > 0 ) {

            buff.append( "authorLink=" );
            buff.append( authorLink );
            buff.append( " " );

        }

        if ( hasAuthorHandle > 0 ) {

            buff.append( "authorHandle=" );
            buff.append( authorHandle );
            buff.append( " " );

        }

        if ( hasAuthorFollowers > 0 ) {

            buff.append( "authorFollowers=" );
            buff.append( authorFollowers );
            buff.append( " " );

        }

        if ( hasAuthorLocation > 0 ) {

            buff.append( "authorLocation=" );
            buff.append( authorLocation );
            buff.append( " " );

        }

        if ( hasAuthorAvatarImg > 0 ) {

            buff.append( "authorAvatarImg=" );
            buff.append( authorAvatarImg );
            buff.append( " " );

        }

        if ( hasAuthorAvatarWidth > 0 ) {

            buff.append( "authorAvatarWidth=" );
            buff.append( authorAvatarWidth );
            buff.append( " " );

        }

        if ( hasAuthorAvatarHeight > 0 ) {

            buff.append( "authorAvatarHeight=" );
            buff.append( authorAvatarHeight );
            buff.append( " " );

        }

        if ( hasAuthorTwitterHandle > 0 ) {

            buff.append( "authorTwitterHandle=" );
            buff.append( authorTwitterHandle );
            buff.append( " " );

        }

        if ( hasAuthorTwitterUserid > 0 ) {

            buff.append( "authorTwitterUserid=" );
            buff.append( authorTwitterUserid );
            buff.append( " " );

        }

        if ( hasAuthorUserId > 0 ) {

            buff.append( "authorUserId=" );
            buff.append( authorUserId );
            buff.append( " " );

        }

        if ( hasAuthorGender > 0 ) {

            buff.append( "authorGender=" );
            buff.append( authorGender );
            buff.append( " " );

        }

        if ( hasGeoLocation > 0 ) {

            buff.append( "geoLocation=" );
            buff.append( geoLocation );
            buff.append( " " );

        }

        if ( hasGeoLocationId > 0 ) {

            buff.append( "geoLocationId=" );
            buff.append( geoLocationId );
            buff.append( " " );

        }

        if ( hasGeoFeaturename > 0 ) {

            buff.append( "geoFeaturename=" );
            buff.append( geoFeaturename );
            buff.append( " " );

        }

        if ( hasGeoPoint > 0 ) {

            buff.append( "geoPoint=" );
            buff.append( geoPoint );
            buff.append( " " );

        }

        if ( hasGeoBox > 0 ) {

            buff.append( "geoBox=" );
            buff.append( geoBox );
            buff.append( " " );

        }

        if ( hasGeoNameId > 0 ) {

            buff.append( "geoNameId=" );
            buff.append( geoNameId );
            buff.append( " " );

        }

        if ( hasGeoName > 0 ) {

            buff.append( "geoName=" );
            buff.append( geoName );
            buff.append( " " );

        }

        if ( hasGeoCountry > 0 ) {

            buff.append( "geoCountry=" );
            buff.append( geoCountry );
            buff.append( " " );

        }

        if ( hasGeoState > 0 ) {

            buff.append( "geoState=" );
            buff.append( geoState );
            buff.append( " " );

        }

        if ( hasGeoCity > 0 ) {

            buff.append( "geoCity=" );
            buff.append( geoCity );
            buff.append( " " );

        }

        if ( hasGeoMethod > 0 ) {

            buff.append( "geoMethod=" );
            buff.append( geoMethod );
            buff.append( " " );

        }

        if ( hasRatingValue > 0 ) {

            buff.append( "ratingValue=" );
            buff.append( ratingValue );
            buff.append( " " );

        }

        if ( hasFaviconSrc > 0 ) {

            buff.append( "faviconSrc=" );
            buff.append( faviconSrc );
            buff.append( " " );

        }

        if ( hasFaviconWidth > 0 ) {

            buff.append( "faviconWidth=" );
            buff.append( faviconWidth );
            buff.append( " " );

        }

        if ( hasFaviconHeight > 0 ) {

            buff.append( "faviconHeight=" );
            buff.append( faviconHeight );
            buff.append( " " );

        }

        if ( hasImageSrc > 0 ) {

            buff.append( "imageSrc=" );
            buff.append( imageSrc );
            buff.append( " " );

        }

        if ( hasImageWidth > 0 ) {

            buff.append( "imageWidth=" );
            buff.append( imageWidth );
            buff.append( " " );

        }

        if ( hasImageHeight > 0 ) {

            buff.append( "imageHeight=" );
            buff.append( imageHeight );
            buff.append( " " );

        }

        if ( hasShared > 0 ) {

            buff.append( "shared=" );
            buff.append( shared );
            buff.append( " " );

        }

        if ( hasSharedType > 0 ) {

            buff.append( "sharedType=" );
            buff.append( sharedType );
            buff.append( " " );

        }

        if ( hasSharedProfileLink > 0 ) {

            buff.append( "sharedProfileLink=" );
            buff.append( sharedProfileLink );
            buff.append( " " );

        }

        if ( hasSharedProfileTitle > 0 ) {

            buff.append( "sharedProfileTitle=" );
            buff.append( sharedProfileTitle );
            buff.append( " " );

        }

        if ( hasSharedAuthorLink > 0 ) {

            buff.append( "sharedAuthorLink=" );
            buff.append( sharedAuthorLink );
            buff.append( " " );

        }

        if ( hasSharedAuthorName > 0 ) {

            buff.append( "sharedAuthorName=" );
            buff.append( sharedAuthorName );
            buff.append( " " );

        }

        if ( hasSharedAuthorUserId > 0 ) {

            buff.append( "sharedAuthorUserId=" );
            buff.append( sharedAuthorUserId );
            buff.append( " " );

        }

        if ( hasSharedIdentifier > 0 ) {

            buff.append( "sharedIdentifier=" );
            buff.append( sharedIdentifier );
            buff.append( " " );

        }

        if ( hasSharedPermalink > 0 ) {

            buff.append( "sharedPermalink=" );
            buff.append( sharedPermalink );
            buff.append( " " );

        }

        if ( hasSharedAuthorHandle > 0 ) {

            buff.append( "sharedAuthorHandle=" );
            buff.append( sharedAuthorHandle );
            buff.append( " " );

        }

        if ( hasReplied > 0 ) {

            buff.append( "replied=" );
            buff.append( replied );
            buff.append( " " );

        }

        if ( hasRepliedProfileLink > 0 ) {

            buff.append( "repliedProfileLink=" );
            buff.append( repliedProfileLink );
            buff.append( " " );

        }

        if ( hasRepliedProfileTitle > 0 ) {

            buff.append( "repliedProfileTitle=" );
            buff.append( repliedProfileTitle );
            buff.append( " " );

        }

        if ( hasCard > 0 ) {

            buff.append( "card=" );
            buff.append( card );
            buff.append( " " );

        }

        if ( hasVideoPlayer > 0 ) {

            buff.append( "videoPlayer=" );
            buff.append( videoPlayer );
            buff.append( " " );

        }

        if ( hasVideoPlayerWidth > 0 ) {

            buff.append( "videoPlayerWidth=" );
            buff.append( videoPlayerWidth );
            buff.append( " " );

        }

        if ( hasVideoPlayerHeight > 0 ) {

            buff.append( "videoPlayerHeight=" );
            buff.append( videoPlayerHeight );
            buff.append( " " );

        }

        if ( hasType > 0 ) {

            buff.append( "type=" );
            buff.append( type );
            buff.append( " " );

        }

        if ( hasSentiment > 0 ) {

            buff.append( "sentiment=" );
            buff.append( sentiment );
            buff.append( " " );

        }

        if ( hasLang > 0 ) {

            buff.append( "lang=" );
            buff.append( lang );
            buff.append( " " );

        }

        if ( hasCategories > 0 ) {

            buff.append( "categories=" );
            buff.append( categories );
            buff.append( " " );

        }

        if ( hasDuplicates > 0 ) {

            buff.append( "duplicates=" );
            buff.append( duplicates );
            buff.append( " " );

        }

        if ( hasDuplicatesCount > 0 ) {

            buff.append( "duplicatesCount=" );
            buff.append( duplicatesCount );
            buff.append( " " );

        }

        if ( hasClassifications > 0 ) {

            buff.append( "classifications=" );
            buff.append( classifications );
            buff.append( " " );

        }

        if ( hasParentHashcode > 0 ) {

            buff.append( "parentHashcode=" );
            buff.append( parentHashcode );
            buff.append( " " );

        }

        if ( hasParentPermalink > 0 ) {

            buff.append( "parentPermalink=" );
            buff.append( parentPermalink );
            buff.append( " " );

        }

        if ( hasParentTitle > 0 ) {

            buff.append( "parentTitle=" );
            buff.append( parentTitle );
            buff.append( " " );

        }

        if ( hasParentLang > 0 ) {

            buff.append( "parentLang=" );
            buff.append( parentLang );
            buff.append( " " );

        }

        if ( hasParentResource > 0 ) {

            buff.append( "parentResource=" );
            buff.append( parentResource );
            buff.append( " " );

        }

        if ( hasLikes > 0 ) {

            buff.append( "likes=" );
            buff.append( likes );
            buff.append( " " );

        }

        if ( hasDislikes > 0 ) {

            buff.append( "dislikes=" );
            buff.append( dislikes );
            buff.append( " " );

        }

        if ( hasComments > 0 ) {

            buff.append( "comments=" );
            buff.append( comments );
            buff.append( " " );

        }

        if ( hasViews > 0 ) {

            buff.append( "views=" );
            buff.append( views );
            buff.append( " " );

        }

        if ( hasMetadataScore > 0 ) {

            buff.append( "metadataScore=" );
            buff.append( metadataScore );
            buff.append( " " );

        }

        if ( hasShares > 0 ) {

            buff.append( "shares=" );
            buff.append( shares );
            buff.append( " " );

        }

        if ( hasMetadataUpdates > 0 ) {

            buff.append( "metadataUpdates=" );
            buff.append( metadataUpdates );
            buff.append( " " );

        }

        if ( hasPinned > 0 ) {

            buff.append( "pinned=" );
            buff.append( pinned );
            buff.append( " " );

        }

        return buff.toString().trim();
    }

    @Override
    public boolean equals( Object obj ) {

        if ( ! ( obj instanceof BaseContent ) ) {
            return false;
        }

        // the object we're comparing to...
        BaseContent cmp = (BaseContent)obj;

        // they should either be both false or both true...
        if ( hasBucket() != cmp.hasBucket() ) {
            return false;
        }

        if ( bucket != cmp.bucket ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSequence() != cmp.hasSequence() ) {
            return false;
        }

        if ( sequence != cmp.sequence ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSequenceRange() != cmp.hasSequenceRange() ) {
            return false;
        }

        if ( sequenceRange != cmp.sequenceRange ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasHashcode() != cmp.hasHashcode() ) {
            return false;
        }

        if ( ! equalsWithNull( hashcode, cmp.hashcode ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasResource() != cmp.hasResource() ) {
            return false;
        }

        if ( ! equalsWithNull( resource, cmp.resource ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDateFound() != cmp.hasDateFound() ) {
            return false;
        }

        if ( ! equalsWithNull( dateFound, cmp.dateFound ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasIndexMethod() != cmp.hasIndexMethod() ) {
            return false;
        }

        if ( indexMethod != cmp.indexMethod ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDetectionMethod() != cmp.hasDetectionMethod() ) {
            return false;
        }

        if ( detectionMethod != cmp.detectionMethod ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasHtml() != cmp.hasHtml() ) {
            return false;
        }

        if ( ! equalsWithNull( html, cmp.html ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasHtmlLength() != cmp.hasHtmlLength() ) {
            return false;
        }

        if ( htmlLength != cmp.htmlLength ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasHtmlChecksum() != cmp.hasHtmlChecksum() ) {
            return false;
        }

        if ( ! equalsWithNull( htmlChecksum, cmp.htmlChecksum ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasHtmlBlob() != cmp.hasHtmlBlob() ) {
            return false;
        }

        if ( ! Arrays.equals( htmlBlob, cmp.htmlBlob ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasHtmlBlobLength() != cmp.hasHtmlBlobLength() ) {
            return false;
        }

        if ( htmlBlobLength != cmp.htmlBlobLength ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasHtmlBlobChecksum() != cmp.hasHtmlBlobChecksum() ) {
            return false;
        }

        if ( ! equalsWithNull( htmlBlobChecksum, cmp.htmlBlobChecksum ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasExtractBlob() != cmp.hasExtractBlob() ) {
            return false;
        }

        if ( ! Arrays.equals( extractBlob, cmp.extractBlob ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasVersion() != cmp.hasVersion() ) {
            return false;
        }

        if ( ! equalsWithNull( version, cmp.version ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLastUpdated() != cmp.hasLastUpdated() ) {
            return false;
        }

        if ( ! equalsWithNull( lastUpdated, cmp.lastUpdated ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceHashcode() != cmp.hasSourceHashcode() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceHashcode, cmp.sourceHashcode ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceResource() != cmp.hasSourceResource() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceResource, cmp.sourceResource ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceLink() != cmp.hasSourceLink() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceLink, cmp.sourceLink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourcePublisherType() != cmp.hasSourcePublisherType() ) {
            return false;
        }

        if ( sourcePublisherType != cmp.sourcePublisherType ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourcePublisherSubtype() != cmp.hasSourcePublisherSubtype() ) {
            return false;
        }

        if ( ! equalsWithNull( sourcePublisherSubtype, cmp.sourcePublisherSubtype ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceDateFound() != cmp.hasSourceDateFound() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceDateFound, cmp.sourceDateFound ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceLastUpdated() != cmp.hasSourceLastUpdated() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceLastUpdated, cmp.sourceLastUpdated ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceLastPublished() != cmp.hasSourceLastPublished() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceLastPublished, cmp.sourceLastPublished ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceLastPosted() != cmp.hasSourceLastPosted() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceLastPosted, cmp.sourceLastPosted ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceUpdateInterval() != cmp.hasSourceUpdateInterval() ) {
            return false;
        }

        if ( sourceUpdateInterval != cmp.sourceUpdateInterval ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceHttpStatus() != cmp.hasSourceHttpStatus() ) {
            return false;
        }

        if ( sourceHttpStatus != cmp.sourceHttpStatus ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceSpamProbability() != cmp.hasSourceSpamProbability() ) {
            return false;
        }

        if ( sourceSpamProbability != cmp.sourceSpamProbability ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceContentLength() != cmp.hasSourceContentLength() ) {
            return false;
        }

        if ( sourceContentLength != cmp.sourceContentLength ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceContentChecksum() != cmp.hasSourceContentChecksum() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceContentChecksum, cmp.sourceContentChecksum ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceAssignedTags() != cmp.hasSourceAssignedTags() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceAssignedTags, cmp.sourceAssignedTags ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceSettingUpdateStrategy() != cmp.hasSourceSettingUpdateStrategy() ) {
            return false;
        }

        if ( sourceSettingUpdateStrategy != cmp.sourceSettingUpdateStrategy ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceSettingIndexStrategy() != cmp.hasSourceSettingIndexStrategy() ) {
            return false;
        }

        if ( sourceSettingIndexStrategy != cmp.sourceSettingIndexStrategy ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceSettingAuthorPolicy() != cmp.hasSourceSettingAuthorPolicy() ) {
            return false;
        }

        if ( sourceSettingAuthorPolicy != cmp.sourceSettingAuthorPolicy ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourcePshbHub() != cmp.hasSourcePshbHub() ) {
            return false;
        }

        if ( ! equalsWithNull( sourcePshbHub, cmp.sourcePshbHub ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourcePshbTopic() != cmp.hasSourcePshbTopic() ) {
            return false;
        }

        if ( ! equalsWithNull( sourcePshbTopic, cmp.sourcePshbTopic ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourcePshbLastPosted() != cmp.hasSourcePshbLastPosted() ) {
            return false;
        }

        if ( ! equalsWithNull( sourcePshbLastPosted, cmp.sourcePshbLastPosted ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourcePshbLeaseExpires() != cmp.hasSourcePshbLeaseExpires() ) {
            return false;
        }

        if ( ! equalsWithNull( sourcePshbLeaseExpires, cmp.sourcePshbLeaseExpires ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceUserInteractions() != cmp.hasSourceUserInteractions() ) {
            return false;
        }

        if ( sourceUserInteractions != cmp.sourceUserInteractions ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceSettingMinimumContentMetadataScore() != cmp.hasSourceSettingMinimumContentMetadataScore() ) {
            return false;
        }

        if ( sourceSettingMinimumContentMetadataScore != cmp.sourceSettingMinimumContentMetadataScore ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceNextUpdate() != cmp.hasSourceNextUpdate() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceNextUpdate, cmp.sourceNextUpdate ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceTitle() != cmp.hasSourceTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceTitle, cmp.sourceTitle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceDescription() != cmp.hasSourceDescription() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceDescription, cmp.sourceDescription ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceHandle() != cmp.hasSourceHandle() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceHandle, cmp.sourceHandle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceFavorites() != cmp.hasSourceFavorites() ) {
            return false;
        }

        if ( sourceFavorites != cmp.sourceFavorites ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceFollowers() != cmp.hasSourceFollowers() ) {
            return false;
        }

        if ( sourceFollowers != cmp.sourceFollowers ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceFollowing() != cmp.hasSourceFollowing() ) {
            return false;
        }

        if ( sourceFollowing != cmp.sourceFollowing ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceVerified() != cmp.hasSourceVerified() ) {
            return false;
        }

        if ( sourceVerified != cmp.sourceVerified ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceProfiles() != cmp.hasSourceProfiles() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceProfiles, cmp.sourceProfiles ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceLocation() != cmp.hasSourceLocation() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceLocation, cmp.sourceLocation ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceImageSrc() != cmp.hasSourceImageSrc() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceImageSrc, cmp.sourceImageSrc ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceImageWidth() != cmp.hasSourceImageWidth() ) {
            return false;
        }

        if ( sourceImageWidth != cmp.sourceImageWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceImageHeight() != cmp.hasSourceImageHeight() ) {
            return false;
        }

        if ( sourceImageHeight != cmp.sourceImageHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceTelephone() != cmp.hasSourceTelephone() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceTelephone, cmp.sourceTelephone ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceTags() != cmp.hasSourceTags() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceTags, cmp.sourceTags ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceRatingValue() != cmp.hasSourceRatingValue() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceRatingValue, cmp.sourceRatingValue ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceFaviconSrc() != cmp.hasSourceFaviconSrc() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceFaviconSrc, cmp.sourceFaviconSrc ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceFaviconWidth() != cmp.hasSourceFaviconWidth() ) {
            return false;
        }

        if ( sourceFaviconWidth != cmp.sourceFaviconWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceFaviconHeight() != cmp.hasSourceFaviconHeight() ) {
            return false;
        }

        if ( sourceFaviconHeight != cmp.sourceFaviconHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceCreated() != cmp.hasSourceCreated() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceCreated, cmp.sourceCreated ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceLikes() != cmp.hasSourceLikes() ) {
            return false;
        }

        if ( sourceLikes != cmp.sourceLikes ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceRelatedTags() != cmp.hasSourceRelatedTags() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceRelatedTags, cmp.sourceRelatedTags ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceParsedPosts() != cmp.hasSourceParsedPosts() ) {
            return false;
        }

        if ( sourceParsedPosts != cmp.sourceParsedPosts ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceParsedPostsMax() != cmp.hasSourceParsedPostsMax() ) {
            return false;
        }

        if ( sourceParsedPostsMax != cmp.sourceParsedPostsMax ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceFeedHref() != cmp.hasSourceFeedHref() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceFeedHref, cmp.sourceFeedHref ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceFeedTitle() != cmp.hasSourceFeedTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( sourceFeedTitle, cmp.sourceFeedTitle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSourceFeedFormat() != cmp.hasSourceFeedFormat() ) {
            return false;
        }

        if ( sourceFeedFormat != cmp.sourceFeedFormat ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPermalink() != cmp.hasPermalink() ) {
            return false;
        }

        if ( ! equalsWithNull( permalink, cmp.permalink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasIdentifier() != cmp.hasIdentifier() ) {
            return false;
        }

        if ( ! equalsWithNull( identifier, cmp.identifier ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPermalinkRedirect() != cmp.hasPermalinkRedirect() ) {
            return false;
        }

        if ( ! equalsWithNull( permalinkRedirect, cmp.permalinkRedirect ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPermalinkRedirectDomain() != cmp.hasPermalinkRedirectDomain() ) {
            return false;
        }

        if ( ! equalsWithNull( permalinkRedirectDomain, cmp.permalinkRedirectDomain ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPermalinkRedirectSite() != cmp.hasPermalinkRedirectSite() ) {
            return false;
        }

        if ( ! equalsWithNull( permalinkRedirectSite, cmp.permalinkRedirectSite ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLink() != cmp.hasLink() ) {
            return false;
        }

        if ( ! equalsWithNull( link, cmp.link ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLinkDomain() != cmp.hasLinkDomain() ) {
            return false;
        }

        if ( ! equalsWithNull( linkDomain, cmp.linkDomain ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLinkSite() != cmp.hasLinkSite() ) {
            return false;
        }

        if ( ! equalsWithNull( linkSite, cmp.linkSite ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasShortlink() != cmp.hasShortlink() ) {
            return false;
        }

        if ( ! equalsWithNull( shortlink, cmp.shortlink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasCanonical() != cmp.hasCanonical() ) {
            return false;
        }

        if ( ! equalsWithNull( canonical, cmp.canonical ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDomain() != cmp.hasDomain() ) {
            return false;
        }

        if ( ! equalsWithNull( domain, cmp.domain ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSite() != cmp.hasSite() ) {
            return false;
        }

        if ( ! equalsWithNull( site, cmp.site ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMain() != cmp.hasMain() ) {
            return false;
        }

        if ( ! equalsWithNull( main, cmp.main ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMainLength() != cmp.hasMainLength() ) {
            return false;
        }

        if ( mainLength != cmp.mainLength ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMainChecksum() != cmp.hasMainChecksum() ) {
            return false;
        }

        if ( ! equalsWithNull( mainChecksum, cmp.mainChecksum ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMainAuthoritative() != cmp.hasMainAuthoritative() ) {
            return false;
        }

        if ( mainAuthoritative != cmp.mainAuthoritative ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMainFormat() != cmp.hasMainFormat() ) {
            return false;
        }

        if ( mainFormat != cmp.mainFormat ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasExtract() != cmp.hasExtract() ) {
            return false;
        }

        if ( ! equalsWithNull( extract, cmp.extract ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasExtractLength() != cmp.hasExtractLength() ) {
            return false;
        }

        if ( extractLength != cmp.extractLength ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasExtractChecksum() != cmp.hasExtractChecksum() ) {
            return false;
        }

        if ( ! equalsWithNull( extractChecksum, cmp.extractChecksum ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSummaryText() != cmp.hasSummaryText() ) {
            return false;
        }

        if ( ! equalsWithNull( summaryText, cmp.summaryText ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasTitle() != cmp.hasTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( title, cmp.title ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPublisher() != cmp.hasPublisher() ) {
            return false;
        }

        if ( ! equalsWithNull( publisher, cmp.publisher ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSection() != cmp.hasSection() ) {
            return false;
        }

        if ( ! equalsWithNull( section, cmp.section ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDescription() != cmp.hasDescription() ) {
            return false;
        }

        if ( ! equalsWithNull( description, cmp.description ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasTags() != cmp.hasTags() ) {
            return false;
        }

        if ( ! equalsWithNull( tags, cmp.tags ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMentions() != cmp.hasMentions() ) {
            return false;
        }

        if ( ! equalsWithNull( mentions, cmp.mentions ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLinks() != cmp.hasLinks() ) {
            return false;
        }

        if ( ! equalsWithNull( links, cmp.links ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPublished() != cmp.hasPublished() ) {
            return false;
        }

        if ( ! equalsWithNull( published, cmp.published ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasModified() != cmp.hasModified() ) {
            return false;
        }

        if ( ! equalsWithNull( modified, cmp.modified ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPublishedPartial() != cmp.hasPublishedPartial() ) {
            return false;
        }

        if ( ! equalsWithNull( publishedPartial, cmp.publishedPartial ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasModifiedPartial() != cmp.hasModifiedPartial() ) {
            return false;
        }

        if ( ! equalsWithNull( modifiedPartial, cmp.modifiedPartial ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorName() != cmp.hasAuthorName() ) {
            return false;
        }

        if ( ! equalsWithNull( authorName, cmp.authorName ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorLink() != cmp.hasAuthorLink() ) {
            return false;
        }

        if ( ! equalsWithNull( authorLink, cmp.authorLink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorHandle() != cmp.hasAuthorHandle() ) {
            return false;
        }

        if ( ! equalsWithNull( authorHandle, cmp.authorHandle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorFollowers() != cmp.hasAuthorFollowers() ) {
            return false;
        }

        if ( authorFollowers != cmp.authorFollowers ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorLocation() != cmp.hasAuthorLocation() ) {
            return false;
        }

        if ( ! equalsWithNull( authorLocation, cmp.authorLocation ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorAvatarImg() != cmp.hasAuthorAvatarImg() ) {
            return false;
        }

        if ( ! equalsWithNull( authorAvatarImg, cmp.authorAvatarImg ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorAvatarWidth() != cmp.hasAuthorAvatarWidth() ) {
            return false;
        }

        if ( authorAvatarWidth != cmp.authorAvatarWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorAvatarHeight() != cmp.hasAuthorAvatarHeight() ) {
            return false;
        }

        if ( authorAvatarHeight != cmp.authorAvatarHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorTwitterHandle() != cmp.hasAuthorTwitterHandle() ) {
            return false;
        }

        if ( ! equalsWithNull( authorTwitterHandle, cmp.authorTwitterHandle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorTwitterUserid() != cmp.hasAuthorTwitterUserid() ) {
            return false;
        }

        if ( ! equalsWithNull( authorTwitterUserid, cmp.authorTwitterUserid ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorUserId() != cmp.hasAuthorUserId() ) {
            return false;
        }

        if ( ! equalsWithNull( authorUserId, cmp.authorUserId ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasAuthorGender() != cmp.hasAuthorGender() ) {
            return false;
        }

        if ( authorGender != cmp.authorGender ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoLocation() != cmp.hasGeoLocation() ) {
            return false;
        }

        if ( ! equalsWithNull( geoLocation, cmp.geoLocation ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoLocationId() != cmp.hasGeoLocationId() ) {
            return false;
        }

        if ( ! equalsWithNull( geoLocationId, cmp.geoLocationId ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoFeaturename() != cmp.hasGeoFeaturename() ) {
            return false;
        }

        if ( ! equalsWithNull( geoFeaturename, cmp.geoFeaturename ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoPoint() != cmp.hasGeoPoint() ) {
            return false;
        }

        if ( ! equalsWithNull( geoPoint, cmp.geoPoint ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoBox() != cmp.hasGeoBox() ) {
            return false;
        }

        if ( ! equalsWithNull( geoBox, cmp.geoBox ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoNameId() != cmp.hasGeoNameId() ) {
            return false;
        }

        if ( ! equalsWithNull( geoNameId, cmp.geoNameId ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoName() != cmp.hasGeoName() ) {
            return false;
        }

        if ( ! equalsWithNull( geoName, cmp.geoName ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoCountry() != cmp.hasGeoCountry() ) {
            return false;
        }

        if ( ! equalsWithNull( geoCountry, cmp.geoCountry ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoState() != cmp.hasGeoState() ) {
            return false;
        }

        if ( ! equalsWithNull( geoState, cmp.geoState ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoCity() != cmp.hasGeoCity() ) {
            return false;
        }

        if ( ! equalsWithNull( geoCity, cmp.geoCity ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasGeoMethod() != cmp.hasGeoMethod() ) {
            return false;
        }

        if ( geoMethod != cmp.geoMethod ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasRatingValue() != cmp.hasRatingValue() ) {
            return false;
        }

        if ( ! equalsWithNull( ratingValue, cmp.ratingValue ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasFaviconSrc() != cmp.hasFaviconSrc() ) {
            return false;
        }

        if ( ! equalsWithNull( faviconSrc, cmp.faviconSrc ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasFaviconWidth() != cmp.hasFaviconWidth() ) {
            return false;
        }

        if ( faviconWidth != cmp.faviconWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasFaviconHeight() != cmp.hasFaviconHeight() ) {
            return false;
        }

        if ( faviconHeight != cmp.faviconHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasImageSrc() != cmp.hasImageSrc() ) {
            return false;
        }

        if ( ! equalsWithNull( imageSrc, cmp.imageSrc ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasImageWidth() != cmp.hasImageWidth() ) {
            return false;
        }

        if ( imageWidth != cmp.imageWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasImageHeight() != cmp.hasImageHeight() ) {
            return false;
        }

        if ( imageHeight != cmp.imageHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasShared() != cmp.hasShared() ) {
            return false;
        }

        if ( shared != cmp.shared ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedType() != cmp.hasSharedType() ) {
            return false;
        }

        if ( sharedType != cmp.sharedType ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedProfileLink() != cmp.hasSharedProfileLink() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedProfileLink, cmp.sharedProfileLink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedProfileTitle() != cmp.hasSharedProfileTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedProfileTitle, cmp.sharedProfileTitle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedAuthorLink() != cmp.hasSharedAuthorLink() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedAuthorLink, cmp.sharedAuthorLink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedAuthorName() != cmp.hasSharedAuthorName() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedAuthorName, cmp.sharedAuthorName ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedAuthorUserId() != cmp.hasSharedAuthorUserId() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedAuthorUserId, cmp.sharedAuthorUserId ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedIdentifier() != cmp.hasSharedIdentifier() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedIdentifier, cmp.sharedIdentifier ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedPermalink() != cmp.hasSharedPermalink() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedPermalink, cmp.sharedPermalink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSharedAuthorHandle() != cmp.hasSharedAuthorHandle() ) {
            return false;
        }

        if ( ! equalsWithNull( sharedAuthorHandle, cmp.sharedAuthorHandle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasReplied() != cmp.hasReplied() ) {
            return false;
        }

        if ( replied != cmp.replied ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasRepliedProfileLink() != cmp.hasRepliedProfileLink() ) {
            return false;
        }

        if ( ! equalsWithNull( repliedProfileLink, cmp.repliedProfileLink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasRepliedProfileTitle() != cmp.hasRepliedProfileTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( repliedProfileTitle, cmp.repliedProfileTitle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasCard() != cmp.hasCard() ) {
            return false;
        }

        if ( card != cmp.card ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasVideoPlayer() != cmp.hasVideoPlayer() ) {
            return false;
        }

        if ( ! equalsWithNull( videoPlayer, cmp.videoPlayer ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasVideoPlayerWidth() != cmp.hasVideoPlayerWidth() ) {
            return false;
        }

        if ( videoPlayerWidth != cmp.videoPlayerWidth ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasVideoPlayerHeight() != cmp.hasVideoPlayerHeight() ) {
            return false;
        }

        if ( videoPlayerHeight != cmp.videoPlayerHeight ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasType() != cmp.hasType() ) {
            return false;
        }

        if ( type != cmp.type ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasSentiment() != cmp.hasSentiment() ) {
            return false;
        }

        if ( sentiment != cmp.sentiment ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLang() != cmp.hasLang() ) {
            return false;
        }

        if ( ! equalsWithNull( lang, cmp.lang ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasCategories() != cmp.hasCategories() ) {
            return false;
        }

        if ( ! equalsWithNull( categories, cmp.categories ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDuplicates() != cmp.hasDuplicates() ) {
            return false;
        }

        if ( ! equalsWithNull( duplicates, cmp.duplicates ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDuplicatesCount() != cmp.hasDuplicatesCount() ) {
            return false;
        }

        if ( duplicatesCount != cmp.duplicatesCount ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasClassifications() != cmp.hasClassifications() ) {
            return false;
        }

        if ( ! equalsWithNull( classifications, cmp.classifications ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentHashcode() != cmp.hasParentHashcode() ) {
            return false;
        }

        if ( ! equalsWithNull( parentHashcode, cmp.parentHashcode ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentPermalink() != cmp.hasParentPermalink() ) {
            return false;
        }

        if ( ! equalsWithNull( parentPermalink, cmp.parentPermalink ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentTitle() != cmp.hasParentTitle() ) {
            return false;
        }

        if ( ! equalsWithNull( parentTitle, cmp.parentTitle ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentLang() != cmp.hasParentLang() ) {
            return false;
        }

        if ( ! equalsWithNull( parentLang, cmp.parentLang ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasParentResource() != cmp.hasParentResource() ) {
            return false;
        }

        if ( ! equalsWithNull( parentResource, cmp.parentResource ) ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasLikes() != cmp.hasLikes() ) {
            return false;
        }

        if ( likes != cmp.likes ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasDislikes() != cmp.hasDislikes() ) {
            return false;
        }

        if ( dislikes != cmp.dislikes ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasComments() != cmp.hasComments() ) {
            return false;
        }

        if ( comments != cmp.comments ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasViews() != cmp.hasViews() ) {
            return false;
        }

        if ( views != cmp.views ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMetadataScore() != cmp.hasMetadataScore() ) {
            return false;
        }

        if ( metadataScore != cmp.metadataScore ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasShares() != cmp.hasShares() ) {
            return false;
        }

        if ( shares != cmp.shares ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasMetadataUpdates() != cmp.hasMetadataUpdates() ) {
            return false;
        }

        if ( metadataUpdates != cmp.metadataUpdates ) {
            return false;
        }

        // they should either be both false or both true...
        if ( hasPinned() != cmp.hasPinned() ) {
            return false;
        }

        if ( pinned != cmp.pinned ) {
            return false;
        }

        // if we have reached this point then they are equal.
        return true;

    }

    public static boolean equalsWithNull( Date d0, Date d1 ) {

        // either one is null
        if ( d0 == null && d1 != null )
            return false;

        // either one is null
        if ( d0 != null && d1 == null )
            return false;

        // they're both null
        if ( d0 == null && d1 == null )
            return true;

        long t0 = d0.getTime();
        long t1 = d1.getTime();

        // ok, they're both non-null
        return t0 == t1;

    }

    /** compare two objects factoring in nulls */
    public static boolean equalsWithNull( Object obj0, Object obj1 ) {

        // either one is null
        if ( obj0 == null && obj1 != null )
            return false;

        // either one is null
        if ( obj0 != null && obj1 == null )
            return false;

        // they're both null
        if ( obj0 == null && obj1 == null )
            return true;

        // ok, they're both non-null
        return obj0.equals( obj1 );

    }

    public void toJSON( boolean prettyPrint, OutputStream out ) {

        asJSON()
          .withPrettyPrint( prettyPrint )
          .withOutputStream( out )
          .toOutputStream();

    }

    @Override
    public String toJSON() {
        return toJSON( false );
    }

    public String toJSON( boolean prettyPrint ) {

        return asJSON()
            .withPrettyPrint( true )
            .toJSON()
            ;

    }

    public JSONBuilder asJSON() {
        return new JSONBuilder();
    }

    public class JSONBuilder {

        protected boolean prettyPrint = true;

        protected OutputStream out = null;

        protected Writer writer = null;

        protected boolean camelCaseNames = UNDERSCORE == false;

        protected boolean enableBinaryFields = false;

        public JSONBuilder withPrettyPrint( boolean prettyPrint ) {
            this.prettyPrint = prettyPrint;
            return this;
        }

        public JSONBuilder withOutputStream( OutputStream out ) {
            this.out = out;
            return this;
        }

        public JSONBuilder withWriter( Writer writer ) {
            this.writer = writer;
            return this;
        }

        /**
         * Set whether to use camel case names or not.  This is probably best
         * left set as the default.
         */
        public JSONBuilder withCamelCaseName( boolean camelCaseNames ) {
            this.camelCaseNames = camelCaseNames;
            return this;
        }

        /**
         * When true, we enable writing binary fields in the response JSON.
         */
        public JSONBuilder withEnableBinaryFields( boolean enableBinaryFields ) {
            this.enableBinaryFields = enableBinaryFields;
            return this;
        }

        /**
         * Peform the conversion to JSON with the given options.
         *
         * @return
         */
        public String toJSON() {

            try( FastByteArrayOutputStream out = new FastByteArrayOutputStream(); ) {

                withOutputStream( out );
                toOutputStream();

                // TODO: this is not a fast way of converting to a string.  The
                // preferred way to do this is to work with the raw byte[] and
                // pass the byte, offset, length, and Charset to String but
                // ByteArrayOutputStream won't allow us to do this directly.

                return out.toString( UTF_8 );

            } catch( IOException e ) {
                throw new RuntimeException( e );
            }

        }

        /**
         * Write the JSON to the output stream given.
         */
        public void toOutputStream() {
            BaseContent.this.toJSON( this );
        }

        public JsonGenerator createGenerator(JsonFactory jsonFactory) throws IOException {

            if ( writer != null ) {
                return jsonFactory.createGenerator( writer );
            } else if ( out != null ) {
                return jsonFactory.createGenerator( out, JsonEncoding.UTF8 );
            } else {
                throw new RuntimeException( "No writer or output stream specified." );
            }

        }

    }

    public void toJSON( JSONBuilder builder ) {
        toJSON( JSON_FACTORY, builder );
    }

    public void toJSON( JsonFactory jsonFactory, JSONBuilder builder ) {

        try ( JsonGenerator generator = builder.createGenerator( jsonFactory ) ) {

            if ( builder.prettyPrint ) {
                generator.useDefaultPrettyPrinter();
            }

            generator.disable( JsonGenerator.Feature.AUTO_CLOSE_TARGET );

            generator.writeStartObject();

            String __name = null;

            // ***** json encode member bucket from long

            __name = "bucket";

            if ( ! builder.camelCaseNames ) {
                __name = "bucket";
            }

            if ( this.hasBucket > 0 ) {

                if ( hasDefinedBucket )
                    generator.writeNumberField( __name, bucket );

            }

            // ***** json encode member sequence from long

            __name = "sequence";

            if ( ! builder.camelCaseNames ) {
                __name = "sequence";
            }

            if ( this.hasSequence > 0 ) {

                if ( hasDefinedSequence )
                    generator.writeNumberField( __name, sequence );

            }

            // ***** json encode member sequence_range from long

            __name = "sequenceRange";

            if ( ! builder.camelCaseNames ) {
                __name = "sequence_range";
            }

            if ( this.hasSequenceRange > 0 ) {

                if ( hasDefinedSequenceRange )
                    generator.writeNumberField( __name, sequenceRange );

            }

            // ***** json encode member hashcode from String

            __name = "hashcode";

            if ( ! builder.camelCaseNames ) {
                __name = "hashcode";
            }

            if ( this.hasHashcode > 0 ) {

                if ( hashcode != null ) {
                    generator.writeStringField( __name, hashcode );
                }

            }

            // ***** json encode member resource from String

            __name = "resource";

            if ( ! builder.camelCaseNames ) {
                __name = "resource";
            }

            if ( this.hasResource > 0 ) {

                if ( resource != null ) {
                    generator.writeStringField( __name, resource );
                }

            }

            // ***** json encode member date_found from Date

            __name = "dateFound";

            if ( ! builder.camelCaseNames ) {
                __name = "date_found";
            }

            if ( this.hasDateFound > 0 ) {

                if ( dateFound != null )
                    generator.writeStringField( __name, toISO8601( dateFound ) );

            }

            // ***** json encode member index_method from int

            __name = "indexMethod";

            if ( ! builder.camelCaseNames ) {
                __name = "index_method";
            }

            if ( this.hasIndexMethod > 0 ) {

                if ( indexMethod != null )
                    generator.writeStringField( __name, indexMethod.toString() );

            }

            // ***** json encode member detection_method from int

            __name = "detectionMethod";

            if ( ! builder.camelCaseNames ) {
                __name = "detection_method";
            }

            if ( this.hasDetectionMethod > 0 ) {

                if ( detectionMethod != null )
                    generator.writeStringField( __name, detectionMethod.toString() );

            }

            // ***** json encode member html from String

            __name = "html";

            if ( ! builder.camelCaseNames ) {
                __name = "html";
            }

            if ( this.hasHtml > 0 ) {

                if ( html != null ) {
                    generator.writeStringField( __name, html );
                }

            }

            // ***** json encode member html_length from int

            __name = "htmlLength";

            if ( ! builder.camelCaseNames ) {
                __name = "html_length";
            }

            if ( this.hasHtmlLength > 0 ) {

                if ( hasDefinedHtmlLength )
                    generator.writeNumberField( __name, htmlLength );

            }

            // ***** json encode member html_checksum from String

            __name = "htmlChecksum";

            if ( ! builder.camelCaseNames ) {
                __name = "html_checksum";
            }

            if ( this.hasHtmlChecksum > 0 ) {

                if ( htmlChecksum != null ) {
                    generator.writeStringField( __name, htmlChecksum );
                }

            }

            // ***** json encode member html_blob from byte[]

            __name = "htmlBlob";

            if ( ! builder.camelCaseNames ) {
                __name = "html_blob";
            }

            if ( this.hasHtmlBlob > 0 ) {

                if ( htmlBlob != null && builder.enableBinaryFields ) {
                    generator.writeBinaryField( __name, htmlBlob );
                }

            }

            // ***** json encode member html_blob_length from int

            __name = "htmlBlobLength";

            if ( ! builder.camelCaseNames ) {
                __name = "html_blob_length";
            }

            if ( this.hasHtmlBlobLength > 0 ) {

                if ( hasDefinedHtmlBlobLength )
                    generator.writeNumberField( __name, htmlBlobLength );

            }

            // ***** json encode member html_blob_checksum from String

            __name = "htmlBlobChecksum";

            if ( ! builder.camelCaseNames ) {
                __name = "html_blob_checksum";
            }

            if ( this.hasHtmlBlobChecksum > 0 ) {

                if ( htmlBlobChecksum != null ) {
                    generator.writeStringField( __name, htmlBlobChecksum );
                }

            }

            // ***** json encode member extract_blob from byte[]

            __name = "extractBlob";

            if ( ! builder.camelCaseNames ) {
                __name = "extract_blob";
            }

            if ( this.hasExtractBlob > 0 ) {

                if ( extractBlob != null && builder.enableBinaryFields ) {
                    generator.writeBinaryField( __name, extractBlob );
                }

            }

            // ***** json encode member version from String

            __name = "version";

            if ( ! builder.camelCaseNames ) {
                __name = "version";
            }

            if ( this.hasVersion > 0 ) {

                if ( version != null ) {
                    generator.writeStringField( __name, version );
                }

            }

            // ***** json encode member last_updated from Date

            __name = "lastUpdated";

            if ( ! builder.camelCaseNames ) {
                __name = "last_updated";
            }

            if ( this.hasLastUpdated > 0 ) {

                if ( lastUpdated != null )
                    generator.writeStringField( __name, toISO8601( lastUpdated ) );

            }

            // ***** json encode member source_hashcode from String

            __name = "sourceHashcode";

            if ( ! builder.camelCaseNames ) {
                __name = "source_hashcode";
            }

            if ( this.hasSourceHashcode > 0 ) {

                if ( sourceHashcode != null ) {
                    generator.writeStringField( __name, sourceHashcode );
                }

            }

            // ***** json encode member source_resource from String

            __name = "sourceResource";

            if ( ! builder.camelCaseNames ) {
                __name = "source_resource";
            }

            if ( this.hasSourceResource > 0 ) {

                if ( sourceResource != null ) {
                    generator.writeStringField( __name, sourceResource );
                }

            }

            // ***** json encode member source_link from String

            __name = "sourceLink";

            if ( ! builder.camelCaseNames ) {
                __name = "source_link";
            }

            if ( this.hasSourceLink > 0 ) {

                if ( sourceLink != null ) {
                    generator.writeStringField( __name, sourceLink );
                }

            }

            // ***** json encode member source_publisher_type from int

            __name = "sourcePublisherType";

            if ( ! builder.camelCaseNames ) {
                __name = "source_publisher_type";
            }

            if ( this.hasSourcePublisherType > 0 ) {

                if ( sourcePublisherType != null )
                    generator.writeStringField( __name, sourcePublisherType.toString() );

            }

            // ***** json encode member source_publisher_subtype from String

            __name = "sourcePublisherSubtype";

            if ( ! builder.camelCaseNames ) {
                __name = "source_publisher_subtype";
            }

            if ( this.hasSourcePublisherSubtype > 0 ) {

                if ( sourcePublisherSubtype != null ) {
                    generator.writeStringField( __name, sourcePublisherSubtype );
                }

            }

            // ***** json encode member source_date_found from Date

            __name = "sourceDateFound";

            if ( ! builder.camelCaseNames ) {
                __name = "source_date_found";
            }

            if ( this.hasSourceDateFound > 0 ) {

                if ( sourceDateFound != null )
                    generator.writeStringField( __name, toISO8601( sourceDateFound ) );

            }

            // ***** json encode member source_last_updated from Date

            __name = "sourceLastUpdated";

            if ( ! builder.camelCaseNames ) {
                __name = "source_last_updated";
            }

            if ( this.hasSourceLastUpdated > 0 ) {

                if ( sourceLastUpdated != null )
                    generator.writeStringField( __name, toISO8601( sourceLastUpdated ) );

            }

            // ***** json encode member source_last_published from Date

            __name = "sourceLastPublished";

            if ( ! builder.camelCaseNames ) {
                __name = "source_last_published";
            }

            if ( this.hasSourceLastPublished > 0 ) {

                if ( sourceLastPublished != null )
                    generator.writeStringField( __name, toISO8601( sourceLastPublished ) );

            }

            // ***** json encode member source_last_posted from Date

            __name = "sourceLastPosted";

            if ( ! builder.camelCaseNames ) {
                __name = "source_last_posted";
            }

            if ( this.hasSourceLastPosted > 0 ) {

                if ( sourceLastPosted != null )
                    generator.writeStringField( __name, toISO8601( sourceLastPosted ) );

            }

            // ***** json encode member source_update_interval from long

            __name = "sourceUpdateInterval";

            if ( ! builder.camelCaseNames ) {
                __name = "source_update_interval";
            }

            if ( this.hasSourceUpdateInterval > 0 ) {

                if ( hasDefinedSourceUpdateInterval )
                    generator.writeNumberField( __name, sourceUpdateInterval );

            }

            // ***** json encode member source_http_status from int

            __name = "sourceHttpStatus";

            if ( ! builder.camelCaseNames ) {
                __name = "source_http_status";
            }

            if ( this.hasSourceHttpStatus > 0 ) {

                if ( hasDefinedSourceHttpStatus )
                    generator.writeNumberField( __name, sourceHttpStatus );

            }

            // ***** json encode member source_spam_probability from float

            __name = "sourceSpamProbability";

            if ( ! builder.camelCaseNames ) {
                __name = "source_spam_probability";
            }

            if ( this.hasSourceSpamProbability > 0 ) {

                if ( hasDefinedSourceSpamProbability )
                    generator.writeNumberField( __name, sourceSpamProbability );

            }

            // ***** json encode member source_content_length from int

            __name = "sourceContentLength";

            if ( ! builder.camelCaseNames ) {
                __name = "source_content_length";
            }

            if ( this.hasSourceContentLength > 0 ) {

                if ( hasDefinedSourceContentLength )
                    generator.writeNumberField( __name, sourceContentLength );

            }

            // ***** json encode member source_content_checksum from String

            __name = "sourceContentChecksum";

            if ( ! builder.camelCaseNames ) {
                __name = "source_content_checksum";
            }

            if ( this.hasSourceContentChecksum > 0 ) {

                if ( sourceContentChecksum != null ) {
                    generator.writeStringField( __name, sourceContentChecksum );
                }

            }

            // ***** json encode member source_assigned_tags from Set<String>

            __name = "sourceAssignedTags";

            if ( ! builder.camelCaseNames ) {
                __name = "source_assigned_tags";
            }

            if ( this.hasSourceAssignedTags > 0 ) {

                if ( sourceAssignedTags != null ) {

                    JSON.writeStringSet( generator, __name, sourceAssignedTags );

                }

            }

            // ***** json encode member source_setting_update_strategy from int

            __name = "sourceSettingUpdateStrategy";

            if ( ! builder.camelCaseNames ) {
                __name = "source_setting_update_strategy";
            }

            if ( this.hasSourceSettingUpdateStrategy > 0 ) {

                if ( sourceSettingUpdateStrategy != null )
                    generator.writeStringField( __name, sourceSettingUpdateStrategy.toString() );

            }

            // ***** json encode member source_setting_index_strategy from int

            __name = "sourceSettingIndexStrategy";

            if ( ! builder.camelCaseNames ) {
                __name = "source_setting_index_strategy";
            }

            if ( this.hasSourceSettingIndexStrategy > 0 ) {

                if ( sourceSettingIndexStrategy != null )
                    generator.writeStringField( __name, sourceSettingIndexStrategy.toString() );

            }

            // ***** json encode member source_setting_author_policy from int

            __name = "sourceSettingAuthorPolicy";

            if ( ! builder.camelCaseNames ) {
                __name = "source_setting_author_policy";
            }

            if ( this.hasSourceSettingAuthorPolicy > 0 ) {

                if ( sourceSettingAuthorPolicy != null )
                    generator.writeStringField( __name, sourceSettingAuthorPolicy.toString() );

            }

            // ***** json encode member source_pshb_hub from String

            __name = "sourcePshbHub";

            if ( ! builder.camelCaseNames ) {
                __name = "source_pshb_hub";
            }

            if ( this.hasSourcePshbHub > 0 ) {

                if ( sourcePshbHub != null ) {
                    generator.writeStringField( __name, sourcePshbHub );
                }

            }

            // ***** json encode member source_pshb_topic from String

            __name = "sourcePshbTopic";

            if ( ! builder.camelCaseNames ) {
                __name = "source_pshb_topic";
            }

            if ( this.hasSourcePshbTopic > 0 ) {

                if ( sourcePshbTopic != null ) {
                    generator.writeStringField( __name, sourcePshbTopic );
                }

            }

            // ***** json encode member source_pshb_last_posted from Date

            __name = "sourcePshbLastPosted";

            if ( ! builder.camelCaseNames ) {
                __name = "source_pshb_last_posted";
            }

            if ( this.hasSourcePshbLastPosted > 0 ) {

                if ( sourcePshbLastPosted != null )
                    generator.writeStringField( __name, toISO8601( sourcePshbLastPosted ) );

            }

            // ***** json encode member source_pshb_lease_expires from Date

            __name = "sourcePshbLeaseExpires";

            if ( ! builder.camelCaseNames ) {
                __name = "source_pshb_lease_expires";
            }

            if ( this.hasSourcePshbLeaseExpires > 0 ) {

                if ( sourcePshbLeaseExpires != null )
                    generator.writeStringField( __name, toISO8601( sourcePshbLeaseExpires ) );

            }

            // ***** json encode member source_user_interactions from long

            __name = "sourceUserInteractions";

            if ( ! builder.camelCaseNames ) {
                __name = "source_user_interactions";
            }

            if ( this.hasSourceUserInteractions > 0 ) {

                if ( hasDefinedSourceUserInteractions )
                    generator.writeNumberField( __name, sourceUserInteractions );

            }

            // ***** json encode member source_setting_minimum_content_metadata_score from int

            __name = "sourceSettingMinimumContentMetadataScore";

            if ( ! builder.camelCaseNames ) {
                __name = "source_setting_minimum_content_metadata_score";
            }

            if ( this.hasSourceSettingMinimumContentMetadataScore > 0 ) {

                if ( hasDefinedSourceSettingMinimumContentMetadataScore )
                    generator.writeNumberField( __name, sourceSettingMinimumContentMetadataScore );

            }

            // ***** json encode member source_next_update from Date

            __name = "sourceNextUpdate";

            if ( ! builder.camelCaseNames ) {
                __name = "source_next_update";
            }

            if ( this.hasSourceNextUpdate > 0 ) {

                if ( sourceNextUpdate != null )
                    generator.writeStringField( __name, toISO8601( sourceNextUpdate ) );

            }

            // ***** json encode member source_title from String

            __name = "sourceTitle";

            if ( ! builder.camelCaseNames ) {
                __name = "source_title";
            }

            if ( this.hasSourceTitle > 0 ) {

                if ( sourceTitle != null ) {
                    generator.writeStringField( __name, sourceTitle );
                }

            }

            // ***** json encode member source_description from String

            __name = "sourceDescription";

            if ( ! builder.camelCaseNames ) {
                __name = "source_description";
            }

            if ( this.hasSourceDescription > 0 ) {

                if ( sourceDescription != null ) {
                    generator.writeStringField( __name, sourceDescription );
                }

            }

            // ***** json encode member source_handle from String

            __name = "sourceHandle";

            if ( ! builder.camelCaseNames ) {
                __name = "source_handle";
            }

            if ( this.hasSourceHandle > 0 ) {

                if ( sourceHandle != null ) {
                    generator.writeStringField( __name, sourceHandle );
                }

            }

            // ***** json encode member source_favorites from int

            __name = "sourceFavorites";

            if ( ! builder.camelCaseNames ) {
                __name = "source_favorites";
            }

            if ( this.hasSourceFavorites > 0 ) {

                if ( hasDefinedSourceFavorites )
                    generator.writeNumberField( __name, sourceFavorites );

            }

            // ***** json encode member source_followers from int

            __name = "sourceFollowers";

            if ( ! builder.camelCaseNames ) {
                __name = "source_followers";
            }

            if ( this.hasSourceFollowers > 0 ) {

                if ( hasDefinedSourceFollowers )
                    generator.writeNumberField( __name, sourceFollowers );

            }

            // ***** json encode member source_following from int

            __name = "sourceFollowing";

            if ( ! builder.camelCaseNames ) {
                __name = "source_following";
            }

            if ( this.hasSourceFollowing > 0 ) {

                if ( hasDefinedSourceFollowing )
                    generator.writeNumberField( __name, sourceFollowing );

            }

            // ***** json encode member source_verified from boolean

            __name = "sourceVerified";

            if ( ! builder.camelCaseNames ) {
                __name = "source_verified";
            }

            if ( this.hasSourceVerified > 0 ) {

                if ( hasDefinedSourceVerified )
                    generator.writeBooleanField( __name, sourceVerified );

            }

            // ***** json encode member source_profiles from Set<String>

            __name = "sourceProfiles";

            if ( ! builder.camelCaseNames ) {
                __name = "source_profiles";
            }

            if ( this.hasSourceProfiles > 0 ) {

                if ( sourceProfiles != null ) {

                    JSON.writeStringSet( generator, __name, sourceProfiles );

                }

            }

            // ***** json encode member source_location from String

            __name = "sourceLocation";

            if ( ! builder.camelCaseNames ) {
                __name = "source_location";
            }

            if ( this.hasSourceLocation > 0 ) {

                if ( sourceLocation != null ) {
                    generator.writeStringField( __name, sourceLocation );
                }

            }

            // ***** json encode member source_image_src from String

            __name = "sourceImageSrc";

            if ( ! builder.camelCaseNames ) {
                __name = "source_image_src";
            }

            if ( this.hasSourceImageSrc > 0 ) {

                if ( sourceImageSrc != null ) {
                    generator.writeStringField( __name, sourceImageSrc );
                }

            }

            // ***** json encode member source_image_width from int

            __name = "sourceImageWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "source_image_width";
            }

            if ( this.hasSourceImageWidth > 0 ) {

                if ( hasDefinedSourceImageWidth )
                    generator.writeNumberField( __name, sourceImageWidth );

            }

            // ***** json encode member source_image_height from int

            __name = "sourceImageHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "source_image_height";
            }

            if ( this.hasSourceImageHeight > 0 ) {

                if ( hasDefinedSourceImageHeight )
                    generator.writeNumberField( __name, sourceImageHeight );

            }

            // ***** json encode member source_telephone from String

            __name = "sourceTelephone";

            if ( ! builder.camelCaseNames ) {
                __name = "source_telephone";
            }

            if ( this.hasSourceTelephone > 0 ) {

                if ( sourceTelephone != null ) {
                    generator.writeStringField( __name, sourceTelephone );
                }

            }

            // ***** json encode member source_tags from Set<String>

            __name = "sourceTags";

            if ( ! builder.camelCaseNames ) {
                __name = "source_tags";
            }

            if ( this.hasSourceTags > 0 ) {

                if ( sourceTags != null ) {

                    JSON.writeStringSet( generator, __name, sourceTags );

                }

            }

            // ***** json encode member source_rating_value from String

            __name = "sourceRatingValue";

            if ( ! builder.camelCaseNames ) {
                __name = "source_rating_value";
            }

            if ( this.hasSourceRatingValue > 0 ) {

                if ( sourceRatingValue != null ) {
                    generator.writeStringField( __name, sourceRatingValue );
                }

            }

            // ***** json encode member source_favicon_src from String

            __name = "sourceFaviconSrc";

            if ( ! builder.camelCaseNames ) {
                __name = "source_favicon_src";
            }

            if ( this.hasSourceFaviconSrc > 0 ) {

                if ( sourceFaviconSrc != null ) {
                    generator.writeStringField( __name, sourceFaviconSrc );
                }

            }

            // ***** json encode member source_favicon_width from int

            __name = "sourceFaviconWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "source_favicon_width";
            }

            if ( this.hasSourceFaviconWidth > 0 ) {

                if ( hasDefinedSourceFaviconWidth )
                    generator.writeNumberField( __name, sourceFaviconWidth );

            }

            // ***** json encode member source_favicon_height from int

            __name = "sourceFaviconHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "source_favicon_height";
            }

            if ( this.hasSourceFaviconHeight > 0 ) {

                if ( hasDefinedSourceFaviconHeight )
                    generator.writeNumberField( __name, sourceFaviconHeight );

            }

            // ***** json encode member source_created from Date

            __name = "sourceCreated";

            if ( ! builder.camelCaseNames ) {
                __name = "source_created";
            }

            if ( this.hasSourceCreated > 0 ) {

                if ( sourceCreated != null )
                    generator.writeStringField( __name, toISO8601( sourceCreated ) );

            }

            // ***** json encode member source_likes from int

            __name = "sourceLikes";

            if ( ! builder.camelCaseNames ) {
                __name = "source_likes";
            }

            if ( this.hasSourceLikes > 0 ) {

                if ( hasDefinedSourceLikes )
                    generator.writeNumberField( __name, sourceLikes );

            }

            // ***** json encode member source_related_tags from Set<String>

            __name = "sourceRelatedTags";

            if ( ! builder.camelCaseNames ) {
                __name = "source_related_tags";
            }

            if ( this.hasSourceRelatedTags > 0 ) {

                if ( sourceRelatedTags != null ) {

                    JSON.writeStringSet( generator, __name, sourceRelatedTags );

                }

            }

            // ***** json encode member source_parsed_posts from int

            __name = "sourceParsedPosts";

            if ( ! builder.camelCaseNames ) {
                __name = "source_parsed_posts";
            }

            if ( this.hasSourceParsedPosts > 0 ) {

                if ( hasDefinedSourceParsedPosts )
                    generator.writeNumberField( __name, sourceParsedPosts );

            }

            // ***** json encode member source_parsed_posts_max from int

            __name = "sourceParsedPostsMax";

            if ( ! builder.camelCaseNames ) {
                __name = "source_parsed_posts_max";
            }

            if ( this.hasSourceParsedPostsMax > 0 ) {

                if ( hasDefinedSourceParsedPostsMax )
                    generator.writeNumberField( __name, sourceParsedPostsMax );

            }

            // ***** json encode member source_feed_href from String

            __name = "sourceFeedHref";

            if ( ! builder.camelCaseNames ) {
                __name = "source_feed_href";
            }

            if ( this.hasSourceFeedHref > 0 ) {

                if ( sourceFeedHref != null ) {
                    generator.writeStringField( __name, sourceFeedHref );
                }

            }

            // ***** json encode member source_feed_title from String

            __name = "sourceFeedTitle";

            if ( ! builder.camelCaseNames ) {
                __name = "source_feed_title";
            }

            if ( this.hasSourceFeedTitle > 0 ) {

                if ( sourceFeedTitle != null ) {
                    generator.writeStringField( __name, sourceFeedTitle );
                }

            }

            // ***** json encode member source_feed_format from int

            __name = "sourceFeedFormat";

            if ( ! builder.camelCaseNames ) {
                __name = "source_feed_format";
            }

            if ( this.hasSourceFeedFormat > 0 ) {

                if ( sourceFeedFormat != null )
                    generator.writeStringField( __name, sourceFeedFormat.toString() );

            }

            // ***** json encode member permalink from String

            __name = "permalink";

            if ( ! builder.camelCaseNames ) {
                __name = "permalink";
            }

            if ( this.hasPermalink > 0 ) {

                if ( permalink != null ) {
                    generator.writeStringField( __name, permalink );
                }

            }

            // ***** json encode member identifier from String

            __name = "identifier";

            if ( ! builder.camelCaseNames ) {
                __name = "identifier";
            }

            if ( this.hasIdentifier > 0 ) {

                if ( identifier != null ) {
                    generator.writeStringField( __name, identifier );
                }

            }

            // ***** json encode member permalink_redirect from String

            __name = "permalinkRedirect";

            if ( ! builder.camelCaseNames ) {
                __name = "permalink_redirect";
            }

            if ( this.hasPermalinkRedirect > 0 ) {

                if ( permalinkRedirect != null ) {
                    generator.writeStringField( __name, permalinkRedirect );
                }

            }

            // ***** json encode member permalink_redirect_domain from String

            __name = "permalinkRedirectDomain";

            if ( ! builder.camelCaseNames ) {
                __name = "permalink_redirect_domain";
            }

            if ( this.hasPermalinkRedirectDomain > 0 ) {

                if ( permalinkRedirectDomain != null ) {
                    generator.writeStringField( __name, permalinkRedirectDomain );
                }

            }

            // ***** json encode member permalink_redirect_site from String

            __name = "permalinkRedirectSite";

            if ( ! builder.camelCaseNames ) {
                __name = "permalink_redirect_site";
            }

            if ( this.hasPermalinkRedirectSite > 0 ) {

                if ( permalinkRedirectSite != null ) {
                    generator.writeStringField( __name, permalinkRedirectSite );
                }

            }

            // ***** json encode member link from String

            __name = "link";

            if ( ! builder.camelCaseNames ) {
                __name = "link";
            }

            if ( this.hasLink > 0 ) {

                if ( link != null ) {
                    generator.writeStringField( __name, link );
                }

            }

            // ***** json encode member link_domain from String

            __name = "linkDomain";

            if ( ! builder.camelCaseNames ) {
                __name = "link_domain";
            }

            if ( this.hasLinkDomain > 0 ) {

                if ( linkDomain != null ) {
                    generator.writeStringField( __name, linkDomain );
                }

            }

            // ***** json encode member link_site from String

            __name = "linkSite";

            if ( ! builder.camelCaseNames ) {
                __name = "link_site";
            }

            if ( this.hasLinkSite > 0 ) {

                if ( linkSite != null ) {
                    generator.writeStringField( __name, linkSite );
                }

            }

            // ***** json encode member shortlink from String

            __name = "shortlink";

            if ( ! builder.camelCaseNames ) {
                __name = "shortlink";
            }

            if ( this.hasShortlink > 0 ) {

                if ( shortlink != null ) {
                    generator.writeStringField( __name, shortlink );
                }

            }

            // ***** json encode member canonical from String

            __name = "canonical";

            if ( ! builder.camelCaseNames ) {
                __name = "canonical";
            }

            if ( this.hasCanonical > 0 ) {

                if ( canonical != null ) {
                    generator.writeStringField( __name, canonical );
                }

            }

            // ***** json encode member domain from String

            __name = "domain";

            if ( ! builder.camelCaseNames ) {
                __name = "domain";
            }

            if ( this.hasDomain > 0 ) {

                if ( domain != null ) {
                    generator.writeStringField( __name, domain );
                }

            }

            // ***** json encode member site from String

            __name = "site";

            if ( ! builder.camelCaseNames ) {
                __name = "site";
            }

            if ( this.hasSite > 0 ) {

                if ( site != null ) {
                    generator.writeStringField( __name, site );
                }

            }

            // ***** json encode member main from String

            __name = "main";

            if ( ! builder.camelCaseNames ) {
                __name = "main";
            }

            if ( this.hasMain > 0 ) {

                if ( main != null ) {
                    generator.writeStringField( __name, main );
                }

            }

            // ***** json encode member main_length from int

            __name = "mainLength";

            if ( ! builder.camelCaseNames ) {
                __name = "main_length";
            }

            if ( this.hasMainLength > 0 ) {

                if ( hasDefinedMainLength )
                    generator.writeNumberField( __name, mainLength );

            }

            // ***** json encode member main_checksum from String

            __name = "mainChecksum";

            if ( ! builder.camelCaseNames ) {
                __name = "main_checksum";
            }

            if ( this.hasMainChecksum > 0 ) {

                if ( mainChecksum != null ) {
                    generator.writeStringField( __name, mainChecksum );
                }

            }

            // ***** json encode member main_authoritative from boolean

            __name = "mainAuthoritative";

            if ( ! builder.camelCaseNames ) {
                __name = "main_authoritative";
            }

            if ( this.hasMainAuthoritative > 0 ) {

                if ( hasDefinedMainAuthoritative )
                    generator.writeBooleanField( __name, mainAuthoritative );

            }

            // ***** json encode member main_format from int

            __name = "mainFormat";

            if ( ! builder.camelCaseNames ) {
                __name = "main_format";
            }

            if ( this.hasMainFormat > 0 ) {

                if ( mainFormat != null )
                    generator.writeStringField( __name, mainFormat.toString() );

            }

            // ***** json encode member extract from String

            __name = "extract";

            if ( ! builder.camelCaseNames ) {
                __name = "extract";
            }

            if ( this.hasExtract > 0 ) {

                if ( extract != null ) {
                    generator.writeStringField( __name, extract );
                }

            }

            // ***** json encode member extract_length from int

            __name = "extractLength";

            if ( ! builder.camelCaseNames ) {
                __name = "extract_length";
            }

            if ( this.hasExtractLength > 0 ) {

                if ( hasDefinedExtractLength )
                    generator.writeNumberField( __name, extractLength );

            }

            // ***** json encode member extract_checksum from String

            __name = "extractChecksum";

            if ( ! builder.camelCaseNames ) {
                __name = "extract_checksum";
            }

            if ( this.hasExtractChecksum > 0 ) {

                if ( extractChecksum != null ) {
                    generator.writeStringField( __name, extractChecksum );
                }

            }

            // ***** json encode member summary_text from String

            __name = "summaryText";

            if ( ! builder.camelCaseNames ) {
                __name = "summary_text";
            }

            if ( this.hasSummaryText > 0 ) {

                if ( summaryText != null ) {
                    generator.writeStringField( __name, summaryText );
                }

            }

            // ***** json encode member title from String

            __name = "title";

            if ( ! builder.camelCaseNames ) {
                __name = "title";
            }

            if ( this.hasTitle > 0 ) {

                if ( title != null ) {
                    generator.writeStringField( __name, title );
                }

            }

            // ***** json encode member publisher from String

            __name = "publisher";

            if ( ! builder.camelCaseNames ) {
                __name = "publisher";
            }

            if ( this.hasPublisher > 0 ) {

                if ( publisher != null ) {
                    generator.writeStringField( __name, publisher );
                }

            }

            // ***** json encode member section from String

            __name = "section";

            if ( ! builder.camelCaseNames ) {
                __name = "section";
            }

            if ( this.hasSection > 0 ) {

                if ( section != null ) {
                    generator.writeStringField( __name, section );
                }

            }

            // ***** json encode member description from String

            __name = "description";

            if ( ! builder.camelCaseNames ) {
                __name = "description";
            }

            if ( this.hasDescription > 0 ) {

                if ( description != null ) {
                    generator.writeStringField( __name, description );
                }

            }

            // ***** json encode member tags from Set<String>

            __name = "tags";

            if ( ! builder.camelCaseNames ) {
                __name = "tags";
            }

            if ( this.hasTags > 0 ) {

                if ( tags != null ) {

                    JSON.writeStringSet( generator, __name, tags );

                }

            }

            // ***** json encode member mentions from Set<String>

            __name = "mentions";

            if ( ! builder.camelCaseNames ) {
                __name = "mentions";
            }

            if ( this.hasMentions > 0 ) {

                if ( mentions != null ) {

                    JSON.writeStringSet( generator, __name, mentions );

                }

            }

            // ***** json encode member links from Set<String>

            __name = "links";

            if ( ! builder.camelCaseNames ) {
                __name = "links";
            }

            if ( this.hasLinks > 0 ) {

                if ( links != null ) {

                    JSON.writeStringSet( generator, __name, links );

                }

            }

            // ***** json encode member published from Date

            __name = "published";

            if ( ! builder.camelCaseNames ) {
                __name = "published";
            }

            if ( this.hasPublished > 0 ) {

                if ( published != null )
                    generator.writeStringField( __name, toISO8601( published ) );

            }

            // ***** json encode member modified from Date

            __name = "modified";

            if ( ! builder.camelCaseNames ) {
                __name = "modified";
            }

            if ( this.hasModified > 0 ) {

                if ( modified != null )
                    generator.writeStringField( __name, toISO8601( modified ) );

            }

            // ***** json encode member published_partial from Date

            __name = "publishedPartial";

            if ( ! builder.camelCaseNames ) {
                __name = "published_partial";
            }

            if ( this.hasPublishedPartial > 0 ) {

                if ( publishedPartial != null )
                    generator.writeStringField( __name, toISO8601( publishedPartial ) );

            }

            // ***** json encode member modified_partial from Date

            __name = "modifiedPartial";

            if ( ! builder.camelCaseNames ) {
                __name = "modified_partial";
            }

            if ( this.hasModifiedPartial > 0 ) {

                if ( modifiedPartial != null )
                    generator.writeStringField( __name, toISO8601( modifiedPartial ) );

            }

            // ***** json encode member author_name from String

            __name = "authorName";

            if ( ! builder.camelCaseNames ) {
                __name = "author_name";
            }

            if ( this.hasAuthorName > 0 ) {

                if ( authorName != null ) {
                    generator.writeStringField( __name, authorName );
                }

            }

            // ***** json encode member author_link from String

            __name = "authorLink";

            if ( ! builder.camelCaseNames ) {
                __name = "author_link";
            }

            if ( this.hasAuthorLink > 0 ) {

                if ( authorLink != null ) {
                    generator.writeStringField( __name, authorLink );
                }

            }

            // ***** json encode member author_handle from String

            __name = "authorHandle";

            if ( ! builder.camelCaseNames ) {
                __name = "author_handle";
            }

            if ( this.hasAuthorHandle > 0 ) {

                if ( authorHandle != null ) {
                    generator.writeStringField( __name, authorHandle );
                }

            }

            // ***** json encode member author_followers from int

            __name = "authorFollowers";

            if ( ! builder.camelCaseNames ) {
                __name = "author_followers";
            }

            if ( this.hasAuthorFollowers > 0 ) {

                if ( hasDefinedAuthorFollowers )
                    generator.writeNumberField( __name, authorFollowers );

            }

            // ***** json encode member author_location from String

            __name = "authorLocation";

            if ( ! builder.camelCaseNames ) {
                __name = "author_location";
            }

            if ( this.hasAuthorLocation > 0 ) {

                if ( authorLocation != null ) {
                    generator.writeStringField( __name, authorLocation );
                }

            }

            // ***** json encode member author_avatar_img from String

            __name = "authorAvatarImg";

            if ( ! builder.camelCaseNames ) {
                __name = "author_avatar_img";
            }

            if ( this.hasAuthorAvatarImg > 0 ) {

                if ( authorAvatarImg != null ) {
                    generator.writeStringField( __name, authorAvatarImg );
                }

            }

            // ***** json encode member author_avatar_width from int

            __name = "authorAvatarWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "author_avatar_width";
            }

            if ( this.hasAuthorAvatarWidth > 0 ) {

                if ( hasDefinedAuthorAvatarWidth )
                    generator.writeNumberField( __name, authorAvatarWidth );

            }

            // ***** json encode member author_avatar_height from int

            __name = "authorAvatarHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "author_avatar_height";
            }

            if ( this.hasAuthorAvatarHeight > 0 ) {

                if ( hasDefinedAuthorAvatarHeight )
                    generator.writeNumberField( __name, authorAvatarHeight );

            }

            // ***** json encode member author_twitter_handle from String

            __name = "authorTwitterHandle";

            if ( ! builder.camelCaseNames ) {
                __name = "author_twitter_handle";
            }

            if ( this.hasAuthorTwitterHandle > 0 ) {

                if ( authorTwitterHandle != null ) {
                    generator.writeStringField( __name, authorTwitterHandle );
                }

            }

            // ***** json encode member author_twitter_userid from String

            __name = "authorTwitterUserid";

            if ( ! builder.camelCaseNames ) {
                __name = "author_twitter_userid";
            }

            if ( this.hasAuthorTwitterUserid > 0 ) {

                if ( authorTwitterUserid != null ) {
                    generator.writeStringField( __name, authorTwitterUserid );
                }

            }

            // ***** json encode member author_user_id from String

            __name = "authorUserId";

            if ( ! builder.camelCaseNames ) {
                __name = "author_user_id";
            }

            if ( this.hasAuthorUserId > 0 ) {

                if ( authorUserId != null ) {
                    generator.writeStringField( __name, authorUserId );
                }

            }

            // ***** json encode member author_gender from int

            __name = "authorGender";

            if ( ! builder.camelCaseNames ) {
                __name = "author_gender";
            }

            if ( this.hasAuthorGender > 0 ) {

                if ( authorGender != null )
                    generator.writeStringField( __name, authorGender.toString() );

            }

            // ***** json encode member geo_location from String

            __name = "geoLocation";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_location";
            }

            if ( this.hasGeoLocation > 0 ) {

                if ( geoLocation != null ) {
                    generator.writeStringField( __name, geoLocation );
                }

            }

            // ***** json encode member geo_location_id from String

            __name = "geoLocationId";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_location_id";
            }

            if ( this.hasGeoLocationId > 0 ) {

                if ( geoLocationId != null ) {
                    generator.writeStringField( __name, geoLocationId );
                }

            }

            // ***** json encode member geo_featurename from String

            __name = "geoFeaturename";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_featurename";
            }

            if ( this.hasGeoFeaturename > 0 ) {

                if ( geoFeaturename != null ) {
                    generator.writeStringField( __name, geoFeaturename );
                }

            }

            // ***** json encode member geo_point from String

            __name = "geoPoint";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_point";
            }

            if ( this.hasGeoPoint > 0 ) {

                if ( geoPoint != null ) {
                    generator.writeStringField( __name, geoPoint );
                }

            }

            // ***** json encode member geo_box from String

            __name = "geoBox";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_box";
            }

            if ( this.hasGeoBox > 0 ) {

                if ( geoBox != null ) {
                    generator.writeStringField( __name, geoBox );
                }

            }

            // ***** json encode member geo_name_id from String

            __name = "geoNameId";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_name_id";
            }

            if ( this.hasGeoNameId > 0 ) {

                if ( geoNameId != null ) {
                    generator.writeStringField( __name, geoNameId );
                }

            }

            // ***** json encode member geo_name from String

            __name = "geoName";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_name";
            }

            if ( this.hasGeoName > 0 ) {

                if ( geoName != null ) {
                    generator.writeStringField( __name, geoName );
                }

            }

            // ***** json encode member geo_country from String

            __name = "geoCountry";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_country";
            }

            if ( this.hasGeoCountry > 0 ) {

                if ( geoCountry != null ) {
                    generator.writeStringField( __name, geoCountry );
                }

            }

            // ***** json encode member geo_state from String

            __name = "geoState";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_state";
            }

            if ( this.hasGeoState > 0 ) {

                if ( geoState != null ) {
                    generator.writeStringField( __name, geoState );
                }

            }

            // ***** json encode member geo_city from String

            __name = "geoCity";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_city";
            }

            if ( this.hasGeoCity > 0 ) {

                if ( geoCity != null ) {
                    generator.writeStringField( __name, geoCity );
                }

            }

            // ***** json encode member geo_method from int

            __name = "geoMethod";

            if ( ! builder.camelCaseNames ) {
                __name = "geo_method";
            }

            if ( this.hasGeoMethod > 0 ) {

                if ( geoMethod != null )
                    generator.writeStringField( __name, geoMethod.toString() );

            }

            // ***** json encode member rating_value from String

            __name = "ratingValue";

            if ( ! builder.camelCaseNames ) {
                __name = "rating_value";
            }

            if ( this.hasRatingValue > 0 ) {

                if ( ratingValue != null ) {
                    generator.writeStringField( __name, ratingValue );
                }

            }

            // ***** json encode member favicon_src from String

            __name = "faviconSrc";

            if ( ! builder.camelCaseNames ) {
                __name = "favicon_src";
            }

            if ( this.hasFaviconSrc > 0 ) {

                if ( faviconSrc != null ) {
                    generator.writeStringField( __name, faviconSrc );
                }

            }

            // ***** json encode member favicon_width from int

            __name = "faviconWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "favicon_width";
            }

            if ( this.hasFaviconWidth > 0 ) {

                if ( hasDefinedFaviconWidth )
                    generator.writeNumberField( __name, faviconWidth );

            }

            // ***** json encode member favicon_height from int

            __name = "faviconHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "favicon_height";
            }

            if ( this.hasFaviconHeight > 0 ) {

                if ( hasDefinedFaviconHeight )
                    generator.writeNumberField( __name, faviconHeight );

            }

            // ***** json encode member image_src from String

            __name = "imageSrc";

            if ( ! builder.camelCaseNames ) {
                __name = "image_src";
            }

            if ( this.hasImageSrc > 0 ) {

                if ( imageSrc != null ) {
                    generator.writeStringField( __name, imageSrc );
                }

            }

            // ***** json encode member image_width from int

            __name = "imageWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "image_width";
            }

            if ( this.hasImageWidth > 0 ) {

                if ( hasDefinedImageWidth )
                    generator.writeNumberField( __name, imageWidth );

            }

            // ***** json encode member image_height from int

            __name = "imageHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "image_height";
            }

            if ( this.hasImageHeight > 0 ) {

                if ( hasDefinedImageHeight )
                    generator.writeNumberField( __name, imageHeight );

            }

            // ***** json encode member shared from boolean

            __name = "shared";

            if ( ! builder.camelCaseNames ) {
                __name = "shared";
            }

            if ( this.hasShared > 0 ) {

                if ( hasDefinedShared )
                    generator.writeBooleanField( __name, shared );

            }

            // ***** json encode member shared_type from int

            __name = "sharedType";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_type";
            }

            if ( this.hasSharedType > 0 ) {

                if ( sharedType != null )
                    generator.writeStringField( __name, sharedType.toString() );

            }

            // ***** json encode member shared_profile_link from String

            __name = "sharedProfileLink";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_profile_link";
            }

            if ( this.hasSharedProfileLink > 0 ) {

                if ( sharedProfileLink != null ) {
                    generator.writeStringField( __name, sharedProfileLink );
                }

            }

            // ***** json encode member shared_profile_title from String

            __name = "sharedProfileTitle";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_profile_title";
            }

            if ( this.hasSharedProfileTitle > 0 ) {

                if ( sharedProfileTitle != null ) {
                    generator.writeStringField( __name, sharedProfileTitle );
                }

            }

            // ***** json encode member shared_author_link from String

            __name = "sharedAuthorLink";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_author_link";
            }

            if ( this.hasSharedAuthorLink > 0 ) {

                if ( sharedAuthorLink != null ) {
                    generator.writeStringField( __name, sharedAuthorLink );
                }

            }

            // ***** json encode member shared_author_name from String

            __name = "sharedAuthorName";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_author_name";
            }

            if ( this.hasSharedAuthorName > 0 ) {

                if ( sharedAuthorName != null ) {
                    generator.writeStringField( __name, sharedAuthorName );
                }

            }

            // ***** json encode member shared_author_user_id from String

            __name = "sharedAuthorUserId";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_author_user_id";
            }

            if ( this.hasSharedAuthorUserId > 0 ) {

                if ( sharedAuthorUserId != null ) {
                    generator.writeStringField( __name, sharedAuthorUserId );
                }

            }

            // ***** json encode member shared_identifier from String

            __name = "sharedIdentifier";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_identifier";
            }

            if ( this.hasSharedIdentifier > 0 ) {

                if ( sharedIdentifier != null ) {
                    generator.writeStringField( __name, sharedIdentifier );
                }

            }

            // ***** json encode member shared_permalink from String

            __name = "sharedPermalink";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_permalink";
            }

            if ( this.hasSharedPermalink > 0 ) {

                if ( sharedPermalink != null ) {
                    generator.writeStringField( __name, sharedPermalink );
                }

            }

            // ***** json encode member shared_author_handle from String

            __name = "sharedAuthorHandle";

            if ( ! builder.camelCaseNames ) {
                __name = "shared_author_handle";
            }

            if ( this.hasSharedAuthorHandle > 0 ) {

                if ( sharedAuthorHandle != null ) {
                    generator.writeStringField( __name, sharedAuthorHandle );
                }

            }

            // ***** json encode member replied from boolean

            __name = "replied";

            if ( ! builder.camelCaseNames ) {
                __name = "replied";
            }

            if ( this.hasReplied > 0 ) {

                if ( hasDefinedReplied )
                    generator.writeBooleanField( __name, replied );

            }

            // ***** json encode member replied_profile_link from String

            __name = "repliedProfileLink";

            if ( ! builder.camelCaseNames ) {
                __name = "replied_profile_link";
            }

            if ( this.hasRepliedProfileLink > 0 ) {

                if ( repliedProfileLink != null ) {
                    generator.writeStringField( __name, repliedProfileLink );
                }

            }

            // ***** json encode member replied_profile_title from String

            __name = "repliedProfileTitle";

            if ( ! builder.camelCaseNames ) {
                __name = "replied_profile_title";
            }

            if ( this.hasRepliedProfileTitle > 0 ) {

                if ( repliedProfileTitle != null ) {
                    generator.writeStringField( __name, repliedProfileTitle );
                }

            }

            // ***** json encode member card from int

            __name = "card";

            if ( ! builder.camelCaseNames ) {
                __name = "card";
            }

            if ( this.hasCard > 0 ) {

                if ( card != null )
                    generator.writeStringField( __name, card.toString() );

            }

            // ***** json encode member video_player from String

            __name = "videoPlayer";

            if ( ! builder.camelCaseNames ) {
                __name = "video_player";
            }

            if ( this.hasVideoPlayer > 0 ) {

                if ( videoPlayer != null ) {
                    generator.writeStringField( __name, videoPlayer );
                }

            }

            // ***** json encode member video_player_width from int

            __name = "videoPlayerWidth";

            if ( ! builder.camelCaseNames ) {
                __name = "video_player_width";
            }

            if ( this.hasVideoPlayerWidth > 0 ) {

                if ( hasDefinedVideoPlayerWidth )
                    generator.writeNumberField( __name, videoPlayerWidth );

            }

            // ***** json encode member video_player_height from int

            __name = "videoPlayerHeight";

            if ( ! builder.camelCaseNames ) {
                __name = "video_player_height";
            }

            if ( this.hasVideoPlayerHeight > 0 ) {

                if ( hasDefinedVideoPlayerHeight )
                    generator.writeNumberField( __name, videoPlayerHeight );

            }

            // ***** json encode member type from int

            __name = "type";

            if ( ! builder.camelCaseNames ) {
                __name = "type";
            }

            if ( this.hasType > 0 ) {

                if ( type != null )
                    generator.writeStringField( __name, type.toString() );

            }

            // ***** json encode member sentiment from int

            __name = "sentiment";

            if ( ! builder.camelCaseNames ) {
                __name = "sentiment";
            }

            if ( this.hasSentiment > 0 ) {

                if ( sentiment != null )
                    generator.writeStringField( __name, sentiment.toString() );

            }

            // ***** json encode member lang from String

            __name = "lang";

            if ( ! builder.camelCaseNames ) {
                __name = "lang";
            }

            if ( this.hasLang > 0 ) {

                if ( lang != null ) {
                    generator.writeStringField( __name, lang );
                }

            }

            // ***** json encode member categories from Map<String,Double>

            __name = "categories";

            if ( ! builder.camelCaseNames ) {
                __name = "categories";
            }

            if ( this.hasCategories > 0 ) {

                if ( categories != null ) {

                    JSON.writeStringMap( generator, __name, categories );

                }

            }

            // ***** json encode member duplicates from Map<Long,Double>

            __name = "duplicates";

            if ( ! builder.camelCaseNames ) {
                __name = "duplicates";
            }

            if ( this.hasDuplicates > 0 ) {

                if ( duplicates != null ) {

                    JSON.writeLongMap( generator, __name, duplicates );

                }

            }

            // ***** json encode member duplicates_count from int

            __name = "duplicatesCount";

            if ( ! builder.camelCaseNames ) {
                __name = "duplicates_count";
            }

            if ( this.hasDuplicatesCount > 0 ) {

                if ( hasDefinedDuplicatesCount )
                    generator.writeNumberField( __name, duplicatesCount );

            }

            // ***** json encode member classifications from Map<String,Double>

            __name = "classifications";

            if ( ! builder.camelCaseNames ) {
                __name = "classifications";
            }

            if ( this.hasClassifications > 0 ) {

                if ( classifications != null ) {

                    JSON.writeStringMap( generator, __name, classifications );

                }

            }

            // ***** json encode member parent_hashcode from String

            __name = "parentHashcode";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_hashcode";
            }

            if ( this.hasParentHashcode > 0 ) {

                if ( parentHashcode != null ) {
                    generator.writeStringField( __name, parentHashcode );
                }

            }

            // ***** json encode member parent_permalink from String

            __name = "parentPermalink";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_permalink";
            }

            if ( this.hasParentPermalink > 0 ) {

                if ( parentPermalink != null ) {
                    generator.writeStringField( __name, parentPermalink );
                }

            }

            // ***** json encode member parent_title from String

            __name = "parentTitle";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_title";
            }

            if ( this.hasParentTitle > 0 ) {

                if ( parentTitle != null ) {
                    generator.writeStringField( __name, parentTitle );
                }

            }

            // ***** json encode member parent_lang from String

            __name = "parentLang";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_lang";
            }

            if ( this.hasParentLang > 0 ) {

                if ( parentLang != null ) {
                    generator.writeStringField( __name, parentLang );
                }

            }

            // ***** json encode member parent_resource from String

            __name = "parentResource";

            if ( ! builder.camelCaseNames ) {
                __name = "parent_resource";
            }

            if ( this.hasParentResource > 0 ) {

                if ( parentResource != null ) {
                    generator.writeStringField( __name, parentResource );
                }

            }

            // ***** json encode member likes from int

            __name = "likes";

            if ( ! builder.camelCaseNames ) {
                __name = "likes";
            }

            if ( this.hasLikes > 0 ) {

                if ( hasDefinedLikes )
                    generator.writeNumberField( __name, likes );

            }

            // ***** json encode member dislikes from int

            __name = "dislikes";

            if ( ! builder.camelCaseNames ) {
                __name = "dislikes";
            }

            if ( this.hasDislikes > 0 ) {

                if ( hasDefinedDislikes )
                    generator.writeNumberField( __name, dislikes );

            }

            // ***** json encode member comments from int

            __name = "comments";

            if ( ! builder.camelCaseNames ) {
                __name = "comments";
            }

            if ( this.hasComments > 0 ) {

                if ( hasDefinedComments )
                    generator.writeNumberField( __name, comments );

            }

            // ***** json encode member views from int

            __name = "views";

            if ( ! builder.camelCaseNames ) {
                __name = "views";
            }

            if ( this.hasViews > 0 ) {

                if ( hasDefinedViews )
                    generator.writeNumberField( __name, views );

            }

            // ***** json encode member metadata_score from int

            __name = "metadataScore";

            if ( ! builder.camelCaseNames ) {
                __name = "metadata_score";
            }

            if ( this.hasMetadataScore > 0 ) {

                if ( hasDefinedMetadataScore )
                    generator.writeNumberField( __name, metadataScore );

            }

            // ***** json encode member shares from int

            __name = "shares";

            if ( ! builder.camelCaseNames ) {
                __name = "shares";
            }

            if ( this.hasShares > 0 ) {

                if ( hasDefinedShares )
                    generator.writeNumberField( __name, shares );

            }

            // ***** json encode member metadata_updates from int

            __name = "metadataUpdates";

            if ( ! builder.camelCaseNames ) {
                __name = "metadata_updates";
            }

            if ( this.hasMetadataUpdates > 0 ) {

                if ( hasDefinedMetadataUpdates )
                    generator.writeNumberField( __name, metadataUpdates );

            }

            // ***** json encode member pinned from boolean

            __name = "pinned";

            if ( ! builder.camelCaseNames ) {
                __name = "pinned";
            }

            if ( this.hasPinned > 0 ) {

                if ( hasDefinedPinned )
                    generator.writeBooleanField( __name, pinned );

            }

            generator.writeEndObject();
            generator.close();

        } catch( IOException e ) {
            throw new RuntimeException( e );
        }
    }

    public void fromJSON( JsonFactory jsonFactory, InputStream inputStream ) throws IOException, JsonParseException {

        try (JsonParser jParser = jsonFactory.createParser( inputStream )) {
            fromJSON( jParser );
        }

    }

    public void fromJSON( JsonFactory jsonFactory, String json ) throws IOException, JsonParseException {

        try (JsonParser jParser = jsonFactory.createParser( json )) {
            fromJSON( jParser );
        }

    }

    public void fromJSON( JsonParser jParser ) throws IOException, JsonParseException {

        while (jParser.nextToken() != JsonToken.END_OBJECT) {

            String tokenName = jParser.getCurrentName();

            if ( tokenName == null ) {
                // this is null for array values and root level
                continue;
            }

            // Java 7/8 optimizes switches so this is an efficient way
            // to dispatch token names.
            switch( tokenName ) {

                // FIXME: handle camelCase and under_score
                // ***** json decode member bucket from long

                case "bucket":

                    jParser.nextToken();
                    setBucket( jParser.getLongValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member sequence from long

                case "sequence":

                    jParser.nextToken();
                    setSequence( jParser.getLongValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member sequence_range from long

                case "sequence_range":

                    jParser.nextToken();
                    setSequenceRange( jParser.getLongValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member hashcode from String

                case "hashcode":

                    jParser.nextToken();
                    setHashcode( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member resource from String

                case "resource":

                    jParser.nextToken();
                    setResource( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member date_found from Date

                case "date_found":

                    try {
                        jParser.nextToken();
                        setDateFound( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: date_found", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member index_method from int

                case "index_method":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member detection_method from int

                case "detection_method":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member html from String

                case "html":

                    jParser.nextToken();
                    setHtml( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member html_length from int

                case "html_length":

                    jParser.nextToken();
                    setHtmlLength( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member html_checksum from String

                case "html_checksum":

                    jParser.nextToken();
                    setHtmlChecksum( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member html_blob from byte[]

                case "html_blob":

                    jParser.nextToken();
                    setHtmlBlob( jParser.getBinaryValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member html_blob_length from int

                case "html_blob_length":

                    jParser.nextToken();
                    setHtmlBlobLength( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member html_blob_checksum from String

                case "html_blob_checksum":

                    jParser.nextToken();
                    setHtmlBlobChecksum( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member extract_blob from byte[]

                case "extract_blob":

                    jParser.nextToken();
                    setExtractBlob( jParser.getBinaryValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member version from String

                case "version":

                    jParser.nextToken();
                    setVersion( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member last_updated from Date

                case "last_updated":

                    try {
                        jParser.nextToken();
                        setLastUpdated( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: last_updated", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_hashcode from String

                case "source_hashcode":

                    jParser.nextToken();
                    setSourceHashcode( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_resource from String

                case "source_resource":

                    jParser.nextToken();
                    setSourceResource( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_link from String

                case "source_link":

                    jParser.nextToken();
                    setSourceLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_publisher_type from int

                case "source_publisher_type":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_publisher_subtype from String

                case "source_publisher_subtype":

                    jParser.nextToken();
                    setSourcePublisherSubtype( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_date_found from Date

                case "source_date_found":

                    try {
                        jParser.nextToken();
                        setSourceDateFound( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: source_date_found", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_last_updated from Date

                case "source_last_updated":

                    try {
                        jParser.nextToken();
                        setSourceLastUpdated( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: source_last_updated", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_last_published from Date

                case "source_last_published":

                    try {
                        jParser.nextToken();
                        setSourceLastPublished( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: source_last_published", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_last_posted from Date

                case "source_last_posted":

                    try {
                        jParser.nextToken();
                        setSourceLastPosted( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: source_last_posted", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_update_interval from long

                case "source_update_interval":

                    jParser.nextToken();
                    setSourceUpdateInterval( jParser.getLongValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_http_status from int

                case "source_http_status":

                    jParser.nextToken();
                    setSourceHttpStatus( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_spam_probability from float

                case "source_spam_probability":

                    jParser.nextToken();
                    setSourceSpamProbability( jParser.getFloatValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_content_length from int

                case "source_content_length":

                    jParser.nextToken();
                    setSourceContentLength( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_content_checksum from String

                case "source_content_checksum":

                    jParser.nextToken();
                    setSourceContentChecksum( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_assigned_tags from Set<String>

                case "source_assigned_tags":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_setting_update_strategy from int

                case "source_setting_update_strategy":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_setting_index_strategy from int

                case "source_setting_index_strategy":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_setting_author_policy from int

                case "source_setting_author_policy":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_pshb_hub from String

                case "source_pshb_hub":

                    jParser.nextToken();
                    setSourcePshbHub( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_pshb_topic from String

                case "source_pshb_topic":

                    jParser.nextToken();
                    setSourcePshbTopic( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_pshb_last_posted from Date

                case "source_pshb_last_posted":

                    try {
                        jParser.nextToken();
                        setSourcePshbLastPosted( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: source_pshb_last_posted", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_pshb_lease_expires from Date

                case "source_pshb_lease_expires":

                    try {
                        jParser.nextToken();
                        setSourcePshbLeaseExpires( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: source_pshb_lease_expires", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_user_interactions from long

                case "source_user_interactions":

                    jParser.nextToken();
                    setSourceUserInteractions( jParser.getLongValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_setting_minimum_content_metadata_score from int

                case "source_setting_minimum_content_metadata_score":

                    jParser.nextToken();
                    setSourceSettingMinimumContentMetadataScore( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_next_update from Date

                case "source_next_update":

                    try {
                        jParser.nextToken();
                        setSourceNextUpdate( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: source_next_update", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_title from String

                case "source_title":

                    jParser.nextToken();
                    setSourceTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_description from String

                case "source_description":

                    jParser.nextToken();
                    setSourceDescription( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_handle from String

                case "source_handle":

                    jParser.nextToken();
                    setSourceHandle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_favorites from int

                case "source_favorites":

                    jParser.nextToken();
                    setSourceFavorites( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_followers from int

                case "source_followers":

                    jParser.nextToken();
                    setSourceFollowers( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_following from int

                case "source_following":

                    jParser.nextToken();
                    setSourceFollowing( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_verified from boolean

                case "source_verified":

                    jParser.nextToken();
                    setSourceVerified( jParser.getBooleanValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_profiles from Set<String>

                case "source_profiles":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_location from String

                case "source_location":

                    jParser.nextToken();
                    setSourceLocation( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_image_src from String

                case "source_image_src":

                    jParser.nextToken();
                    setSourceImageSrc( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_image_width from int

                case "source_image_width":

                    jParser.nextToken();
                    setSourceImageWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_image_height from int

                case "source_image_height":

                    jParser.nextToken();
                    setSourceImageHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_telephone from String

                case "source_telephone":

                    jParser.nextToken();
                    setSourceTelephone( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_tags from Set<String>

                case "source_tags":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_rating_value from String

                case "source_rating_value":

                    jParser.nextToken();
                    setSourceRatingValue( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_favicon_src from String

                case "source_favicon_src":

                    jParser.nextToken();
                    setSourceFaviconSrc( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_favicon_width from int

                case "source_favicon_width":

                    jParser.nextToken();
                    setSourceFaviconWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_favicon_height from int

                case "source_favicon_height":

                    jParser.nextToken();
                    setSourceFaviconHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_created from Date

                case "source_created":

                    try {
                        jParser.nextToken();
                        setSourceCreated( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: source_created", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_likes from int

                case "source_likes":

                    jParser.nextToken();
                    setSourceLikes( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_related_tags from Set<String>

                case "source_related_tags":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_parsed_posts from int

                case "source_parsed_posts":

                    jParser.nextToken();
                    setSourceParsedPosts( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_parsed_posts_max from int

                case "source_parsed_posts_max":

                    jParser.nextToken();
                    setSourceParsedPostsMax( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_feed_href from String

                case "source_feed_href":

                    jParser.nextToken();
                    setSourceFeedHref( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_feed_title from String

                case "source_feed_title":

                    jParser.nextToken();
                    setSourceFeedTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member source_feed_format from int

                case "source_feed_format":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member permalink from String

                case "permalink":

                    jParser.nextToken();
                    setPermalink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member identifier from String

                case "identifier":

                    jParser.nextToken();
                    setIdentifier( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member permalink_redirect from String

                case "permalink_redirect":

                    jParser.nextToken();
                    setPermalinkRedirect( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member permalink_redirect_domain from String

                case "permalink_redirect_domain":

                    jParser.nextToken();
                    setPermalinkRedirectDomain( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member permalink_redirect_site from String

                case "permalink_redirect_site":

                    jParser.nextToken();
                    setPermalinkRedirectSite( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member link from String

                case "link":

                    jParser.nextToken();
                    setLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member link_domain from String

                case "link_domain":

                    jParser.nextToken();
                    setLinkDomain( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member link_site from String

                case "link_site":

                    jParser.nextToken();
                    setLinkSite( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shortlink from String

                case "shortlink":

                    jParser.nextToken();
                    setShortlink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member canonical from String

                case "canonical":

                    jParser.nextToken();
                    setCanonical( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member domain from String

                case "domain":

                    jParser.nextToken();
                    setDomain( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member site from String

                case "site":

                    jParser.nextToken();
                    setSite( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main from String

                case "main":

                    jParser.nextToken();
                    setMain( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main_length from int

                case "main_length":

                    jParser.nextToken();
                    setMainLength( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main_checksum from String

                case "main_checksum":

                    jParser.nextToken();
                    setMainChecksum( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main_authoritative from boolean

                case "main_authoritative":

                    jParser.nextToken();
                    setMainAuthoritative( jParser.getBooleanValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member main_format from int

                case "main_format":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member extract from String

                case "extract":

                    jParser.nextToken();
                    setExtract( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member extract_length from int

                case "extract_length":

                    jParser.nextToken();
                    setExtractLength( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member extract_checksum from String

                case "extract_checksum":

                    jParser.nextToken();
                    setExtractChecksum( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member summary_text from String

                case "summary_text":

                    jParser.nextToken();
                    setSummaryText( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member title from String

                case "title":

                    jParser.nextToken();
                    setTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member publisher from String

                case "publisher":

                    jParser.nextToken();
                    setPublisher( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member section from String

                case "section":

                    jParser.nextToken();
                    setSection( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member description from String

                case "description":

                    jParser.nextToken();
                    setDescription( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member tags from Set<String>

                case "tags":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member mentions from Set<String>

                case "mentions":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member links from Set<String>

                case "links":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member published from Date

                case "published":

                    try {
                        jParser.nextToken();
                        setPublished( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: published", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member modified from Date

                case "modified":

                    try {
                        jParser.nextToken();
                        setModified( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: modified", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member published_partial from Date

                case "published_partial":

                    try {
                        jParser.nextToken();
                        setPublishedPartial( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: published_partial", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member modified_partial from Date

                case "modified_partial":

                    try {
                        jParser.nextToken();
                        setModifiedPartial( ISO8601.parse( jParser.getValueAsString() ) );
                    } catch( ParseException e ) {
                        throw new JsonParseException( "Could not parse field: modified_partial", jParser.getCurrentLocation(), e );
                    }

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_name from String

                case "author_name":

                    jParser.nextToken();
                    setAuthorName( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_link from String

                case "author_link":

                    jParser.nextToken();
                    setAuthorLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_handle from String

                case "author_handle":

                    jParser.nextToken();
                    setAuthorHandle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_followers from int

                case "author_followers":

                    jParser.nextToken();
                    setAuthorFollowers( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_location from String

                case "author_location":

                    jParser.nextToken();
                    setAuthorLocation( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_avatar_img from String

                case "author_avatar_img":

                    jParser.nextToken();
                    setAuthorAvatarImg( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_avatar_width from int

                case "author_avatar_width":

                    jParser.nextToken();
                    setAuthorAvatarWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_avatar_height from int

                case "author_avatar_height":

                    jParser.nextToken();
                    setAuthorAvatarHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_twitter_handle from String

                case "author_twitter_handle":

                    jParser.nextToken();
                    setAuthorTwitterHandle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_twitter_userid from String

                case "author_twitter_userid":

                    jParser.nextToken();
                    setAuthorTwitterUserid( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_user_id from String

                case "author_user_id":

                    jParser.nextToken();
                    setAuthorUserId( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member author_gender from int

                case "author_gender":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_location from String

                case "geo_location":

                    jParser.nextToken();
                    setGeoLocation( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_location_id from String

                case "geo_location_id":

                    jParser.nextToken();
                    setGeoLocationId( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_featurename from String

                case "geo_featurename":

                    jParser.nextToken();
                    setGeoFeaturename( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_point from String

                case "geo_point":

                    jParser.nextToken();
                    setGeoPoint( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_box from String

                case "geo_box":

                    jParser.nextToken();
                    setGeoBox( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_name_id from String

                case "geo_name_id":

                    jParser.nextToken();
                    setGeoNameId( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_name from String

                case "geo_name":

                    jParser.nextToken();
                    setGeoName( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_country from String

                case "geo_country":

                    jParser.nextToken();
                    setGeoCountry( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_state from String

                case "geo_state":

                    jParser.nextToken();
                    setGeoState( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_city from String

                case "geo_city":

                    jParser.nextToken();
                    setGeoCity( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member geo_method from int

                case "geo_method":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member rating_value from String

                case "rating_value":

                    jParser.nextToken();
                    setRatingValue( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member favicon_src from String

                case "favicon_src":

                    jParser.nextToken();
                    setFaviconSrc( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member favicon_width from int

                case "favicon_width":

                    jParser.nextToken();
                    setFaviconWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member favicon_height from int

                case "favicon_height":

                    jParser.nextToken();
                    setFaviconHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member image_src from String

                case "image_src":

                    jParser.nextToken();
                    setImageSrc( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member image_width from int

                case "image_width":

                    jParser.nextToken();
                    setImageWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member image_height from int

                case "image_height":

                    jParser.nextToken();
                    setImageHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared from boolean

                case "shared":

                    jParser.nextToken();
                    setShared( jParser.getBooleanValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_type from int

                case "shared_type":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_profile_link from String

                case "shared_profile_link":

                    jParser.nextToken();
                    setSharedProfileLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_profile_title from String

                case "shared_profile_title":

                    jParser.nextToken();
                    setSharedProfileTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_author_link from String

                case "shared_author_link":

                    jParser.nextToken();
                    setSharedAuthorLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_author_name from String

                case "shared_author_name":

                    jParser.nextToken();
                    setSharedAuthorName( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_author_user_id from String

                case "shared_author_user_id":

                    jParser.nextToken();
                    setSharedAuthorUserId( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_identifier from String

                case "shared_identifier":

                    jParser.nextToken();
                    setSharedIdentifier( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_permalink from String

                case "shared_permalink":

                    jParser.nextToken();
                    setSharedPermalink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shared_author_handle from String

                case "shared_author_handle":

                    jParser.nextToken();
                    setSharedAuthorHandle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member replied from boolean

                case "replied":

                    jParser.nextToken();
                    setReplied( jParser.getBooleanValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member replied_profile_link from String

                case "replied_profile_link":

                    jParser.nextToken();
                    setRepliedProfileLink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member replied_profile_title from String

                case "replied_profile_title":

                    jParser.nextToken();
                    setRepliedProfileTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member card from int

                case "card":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member video_player from String

                case "video_player":

                    jParser.nextToken();
                    setVideoPlayer( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member video_player_width from int

                case "video_player_width":

                    jParser.nextToken();
                    setVideoPlayerWidth( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member video_player_height from int

                case "video_player_height":

                    jParser.nextToken();
                    setVideoPlayerHeight( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member type from int

                case "type":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member sentiment from int

                case "sentiment":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member lang from String

                case "lang":

                    jParser.nextToken();
                    setLang( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member categories from Map<String,Double>

                case "categories":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member duplicates from Map<Long,Double>

                case "duplicates":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member duplicates_count from int

                case "duplicates_count":

                    jParser.nextToken();
                    setDuplicatesCount( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member classifications from Map<String,Double>

                case "classifications":

                    // FIXME not implemented yet.

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_hashcode from String

                case "parent_hashcode":

                    jParser.nextToken();
                    setParentHashcode( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_permalink from String

                case "parent_permalink":

                    jParser.nextToken();
                    setParentPermalink( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_title from String

                case "parent_title":

                    jParser.nextToken();
                    setParentTitle( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_lang from String

                case "parent_lang":

                    jParser.nextToken();
                    setParentLang( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member parent_resource from String

                case "parent_resource":

                    jParser.nextToken();
                    setParentResource( jParser.getValueAsString() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member likes from int

                case "likes":

                    jParser.nextToken();
                    setLikes( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member dislikes from int

                case "dislikes":

                    jParser.nextToken();
                    setDislikes( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member comments from int

                case "comments":

                    jParser.nextToken();
                    setComments( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member views from int

                case "views":

                    jParser.nextToken();
                    setViews( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member metadata_score from int

                case "metadata_score":

                    jParser.nextToken();
                    setMetadataScore( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member shares from int

                case "shares":

                    jParser.nextToken();
                    setShares( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member metadata_updates from int

                case "metadata_updates":

                    jParser.nextToken();
                    setMetadataUpdates( jParser.getIntValue() );

                    break;

                // FIXME: handle camelCase and under_score
                // ***** json decode member pinned from boolean

                case "pinned":

                    jParser.nextToken();
                    setPinned( jParser.getBooleanValue() );

                    break;

            }

        }

    }

    private static String toISO8601( Date date ) {

        // NOTE: Simple Date Format is NOT thread safe.
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        df.setTimeZone( UTC );
        return df.format( date );

    }

    public static Content fromJSON( String value ) {

        try {

            Content result = MAPPER.readValue( value, Content.class );
            result.resetModified();
            result.constructed = false;

            return result;

        } catch ( IOException e ) {
            throw new RuntimeException( e );
        }

    }

    public static Content fromJSON( Map<String,Object> map ) {

        Content result = MAPPER.convertValue( map, Content.class );
        result.resetModified();
        result.constructed = false;

        return result;

    }

    public static Content fromJSON( ByteBuffer byteBuffer ) {

        try {
            return fromJSON( ByteBufferInputStreams.toInputStream( byteBuffer ) );
        } catch ( IOException e ) {
            throw new RuntimeException( "Could not parse byte buffer: ", e );
        }

    }

    public static Content fromJSON( InputStream inputStream ) throws IOException {

        Content result = MAPPER.readValue( inputStream, Content.class );
        result.resetModified();
        result.constructed = false;

        return result;

    }

}